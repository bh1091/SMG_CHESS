package org.harshmehta.hw3;

import static org.shared.chess.Color.BLACK;
import static org.shared.chess.Color.WHITE;
import static org.shared.chess.PieceKind.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.GameResultReason;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;


/**
 * Tests for the Presenter class.
 */
public class PresenterTest {
  Presenter presenter;
  Presenter.View view;
  
  @Before
  public void setup() {
    presenter = new Presenter();
    view = Mockito.mock(Presenter.View.class); 
    presenter.setView(view);
  }
  
  @Test
  public void testStartGame() {
    presenter.startGame(null);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view).setPiece(0, 0, new Piece(Color.WHITE, PieceKind.ROOK));
    Mockito.verify(view).setPiece(4, 4, null);
  }
  
  @Test
  public void testValidPieceClicked() {
    presenter.startGame(null);
    presenter.cellClicked(1,3);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view, Mockito.times(1)).setSelected(1, 3, true);
    Mockito.verify(view).setHighlighted(2, 3, true);
    Mockito.verify(view).setHighlighted(3, 3, true);
    Mockito.verify(view, Mockito.never()).setGameResult(null);
  }
  
  @Test
  public void testEmptySquareClicked() {
    presenter.startGame(null);
    presenter.cellClicked(4,4);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view, Mockito.never()).setGameResult(null);
    Mockito.verify(view, Mockito.never()).setHighlighted(0, 0, true);
  }
  
  @Test
  public void testInvalidPieceClicked() {
    presenter.startGame(null);
    presenter.cellClicked(6,3);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view, Mockito.never()).setSelected(6, 3, true);
    Mockito.verify(view, Mockito.never()).setGameResult(null);
  }
  
  @Test
  public void testSetStateInitial() {
    presenter.startGame(null);
    State state = new State();
    presenter.setState(state, null);
    Mockito.verify(view, Mockito.atLeastOnce()).setWhoseTurn(Color.WHITE);
    Mockito.verify(view, Mockito.atLeastOnce()).setPiece(0, 0, new Piece(Color.WHITE, PieceKind.ROOK));
    Mockito.verify(view, Mockito.atLeastOnce()).setPiece(4, 4, null);
  }
  
  @Test
  public void testInitialKnightMoves() {
    presenter.startGame(null);
    presenter.cellClicked(0, 1); // Select White Knight
    Mockito.verify(view).setSelected(0, 1, true);
    Mockito.verify(view).setHighlighted(2, 0, true);
    Mockito.verify(view).setHighlighted(2, 2, true);
  }
  
  @Test
  public void testSwitchTurn() {
    presenter.startGame(null);
    Mockito.verify(view, Mockito.times(1)).setWhoseTurn(WHITE);
    presenter.cellClicked(0, 1);
    presenter.cellClicked(2, 0);
    Mockito.verify(view, Mockito.times(1)).setWhoseTurn(BLACK);
  }
  
  @Test
  public void testWhiteCheckmatedFoolsMate() {
    // Simulating this 2-move checkmate: http://en.wikipedia.org/wiki/Fool's_mate
    presenter.startGame(null);
    State state = new State();
    state.setPiece(new Position(6,4), null);
    state.setPiece(new Position(4,4), new Piece(BLACK, PAWN));
    state.setPiece(new Position(1,5), null);
    state.setPiece(new Position(2,5), new Piece(WHITE, PAWN));
    state.setPiece(new Position(1,6), null);
    state.setPiece(new Position(3,6), new Piece(WHITE, PAWN));
    state.setTurn(BLACK);
    state.setEnpassantPosition(new Position(3,6));
    presenter.setState(state, null);
    Mockito.verify(view, Mockito.atLeastOnce()).setWhoseTurn(Color.WHITE);
    // Make the clinching move (Black Queen):
    presenter.cellClicked(7, 3);
    Mockito.verify(view).setSelected(7, 3, true);
    Mockito.verify(view).setHighlighted(6, 4, true);
    Mockito.verify(view).setHighlighted(5, 5, true);
    Mockito.verify(view).setHighlighted(4, 6, true);
    Mockito.verify(view).setHighlighted(3, 7, true);
    presenter.cellClicked(3, 7);
    Mockito.verify(view).setGameResult("Game Over! Winner: BLACK (CHECKMATE)");
  }
  
  @Test
  public void testBlackCheckmated() {
    presenter.startGame(null);
    State state = new State();
    state.setGameResult(new GameResult(WHITE, GameResultReason.CHECKMATE));
    presenter.setState(state, null);
    Mockito.verify(view).setGameResult("Game Over! Winner: WHITE (CHECKMATE)");
  }
  
  @Test
  public void testCaptureIsHighlighted() {
    presenter.startGame(null);
    State state = new State();
    state.setPiece(new Position(1,3), null);
    state.setPiece(new Position(3,3), new Piece(WHITE, PAWN));
    state.setPiece(new Position(6,4), null);
    state.setPiece(new Position(4,4), new Piece(BLACK, PAWN));
    state.setTurn(WHITE);
    presenter.setState(state, null);
    presenter.cellClicked(3, 3);
    Mockito.verify(view).setHighlighted(4, 4, true);
  }
  
  @Test
  public void testFiftyMoveRule() {
    presenter.startGame(null);
    State state = new State();
    state.setNumberOfMovesWithoutCaptureNorPawnMoved(99);
    presenter.setState(state, null);
    presenter.cellClicked(0, 1);  // Moving Knight for the 50th move
    presenter.cellClicked(2, 0);
    Mockito.verify(view).setGameResult("Game Over! Winner: Draw (FIFTY_MOVE_RULE)");
  }
  
  @Test
  public void testPromotion() {
    presenter.startGame(null);
    State state = new State();
    state.setPiece(new Position(1,1), null);
    state.setPiece(new Position(6,1), new Piece(WHITE, PAWN));
    presenter.setState(state, null);
    presenter.cellClicked(6, 1);
    presenter.cellClicked(7, 0);
    Mockito.verify(view).showPromotionPieces(WHITE);
    presenter.selectPromotedPiece(1);
    Mockito.verify(view).setPiece(7, 0, new Piece(WHITE, QUEEN));
    Mockito.verify(view).hidePromotionPieces();
  }  
}
