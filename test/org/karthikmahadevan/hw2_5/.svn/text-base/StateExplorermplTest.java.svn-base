package org.karthikmahadevan.hw2_5;

import static org.junit.Assert.assertEquals;

import java.util.Set;

import org.shared.chess.AbstractStateExplorerTest;
import org.shared.chess.Move;
import org.shared.chess.PieceKind;
import org.shared.chess.Piece;
import org.shared.chess.Position;
import org.shared.chess.Color;
import org.shared.chess.StateExplorer;


import org.junit.Test;

import com.google.common.collect.Sets;

public class StateExplorermplTest extends AbstractStateExplorerTest {
	@Override
	public StateExplorer getStateExplorer() {
		return new StateExplorerImpl();
	}
	
	public void initKarthik() {
		for (int row = 0; row < 8; ++row) {
			for (int col = 0; col < 8; ++col) {
				start.setPiece(new Position(row, col), null);
			}
		}
	}
	
	@Test
	public void testStartingPosition_KingUnderAttack_KM() {
		initKarthik();
		start.setPiece(new Position(2,2), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(3,0), new Piece(Color.BLACK, PieceKind.BISHOP));
		start.setPiece(new Position(4,0), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(5,0), new Piece(Color.BLACK, PieceKind.BISHOP));
		start.setPiece(new Position(1,1), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(6,5), new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.KING));
		
		Set<Position> expectedPositions = Sets.newHashSet();
		expectedPositions.add(new Position(1,1));
		expectedPositions.add(new Position(2,2));
		assertEquals(expectedPositions,
				stateExplorer.getPossibleStartPositions(start));
	}
	
	@Test
	public void testPossibleMovesFromPosition_KingCanCastle_KM() {
		initKarthik();
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(0,0), new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(new Position(6,3), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(6,5), new Piece(Color.BLACK, PieceKind.ROOK));
		start.setPiece(new Position(1,7), new Piece(Color.BLACK, PieceKind.ROOK));
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.KING));
		start.setPiece(new Position(1,3), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(2,3), new Piece(Color.BLACK, PieceKind.PAWN));
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(0,4),new Position(0,3),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(0,2),null));
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMovesFromPosition(start,new Position(0,4)));
	}
	
	@Test
	public void testStartingPosition_KingCannotMove_KM() {
		initKarthik();
		start.setPiece(new Position(0,0), new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(6,3), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(6,5), new Piece(Color.BLACK, PieceKind.ROOK));
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.KING));
		start.setPiece(new Position(1,7), new Piece(Color.BLACK, PieceKind.ROOK));
		
		Set<Position> expectedPositions = Sets.newHashSet();
		expectedPositions.add(new Position(0,0));
		assertEquals(expectedPositions,
				stateExplorer.getPossibleStartPositions(start));
	}
	
	@Test
	public void testPossibleMovesFromPosition_QueenMovements_KM() {
		initKarthik();
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.KING));
		start.setPiece(new Position(7,5), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(5,5), new Piece(Color.WHITE, PieceKind.KNIGHT));
		start.setPiece(new Position(4,7), new Piece(Color.BLACK, PieceKind.PAWN));
		start.setPiece(new Position(4,4), new Piece(Color.WHITE, PieceKind.QUEEN));
		start.setPiece(new Position(4,3), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(4,4),new Position(5,3),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(6,2),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(7,1),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(5,4),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(6,4),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(7,4),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(4,5),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(4,6),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(4,7),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(3,4),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(2,4),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(1,4),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(3,3),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(2,2),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(1,1),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(0,0),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(3,5),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(2,6),null));
		expectedMoves.add(new Move(new Position(4,4),new Position(1,7),null));
		
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMovesFromPosition(start,new Position(4,4)));
	}
	
	@Test
	public void testPossibleMovesFromPosition_QueenMovesCauseCheck_KM() {
		initKarthik();
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(4,0), new Piece(Color.BLACK, PieceKind.BISHOP));
		start.setPiece(new Position(2,2), new Piece(Color.WHITE, PieceKind.QUEEN));
		start.setPiece(new Position(7,2), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(7,3), new Piece(Color.BLACK, PieceKind.KING));
		
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(2,2),new Position(3,1),null));
		expectedMoves.add(new Move(new Position(2,2),new Position(4,0),null));
		expectedMoves.add(new Move(new Position(2,2),new Position(1,3),null));
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMovesFromPosition(start,new Position(2,2)));
	}
	
	@Test
	public void testPossibleMovesFromPosition_KingMovements_KM() {
		initKarthik();
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(0,0), new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(new Position(0,7), new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(new Position(1,2), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(1,3), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(1,5), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(1,6), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(7,3), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(7,3), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.KING));
		
		start.setCanCastleKingSide(Color.WHITE, false);
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(0,4),new Position(1,4),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(0,5),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(0,3),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(0,2),null));
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMovesFromPosition(start,new Position(0,4)));
	}
	
	@Test
	public void testAllPossibleMoves_KingInCheck_KM() {
		initKarthik();
		start.setPiece(new Position(0,0), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(2,0), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(7,1), new Piece(Color.BLACK, PieceKind.ROOK));
		start.setPiece(new Position(4,3), new Piece(Color.WHITE, PieceKind.BISHOP));
		start.setPiece(new Position(7,3), new Piece(Color.BLACK, PieceKind.KING));
		start.setPiece(new Position(0,3), new Piece(Color.WHITE, PieceKind.ROOK));
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(4,3),new Position(1,0),null));
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMoves(start));
	}
	
	@Test
	public void testAllPossibleMoves_KingInCheckCanMove_KM() {
		initKarthik();
		start.setPiece(new Position(0,0), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(3,0), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(3,1), new Piece(Color.WHITE, PieceKind.KNIGHT));
		start.setPiece(new Position(0,3), new Piece(Color.WHITE, PieceKind.BISHOP));
		start.setPiece(new Position(7,3), new Piece(Color.BLACK, PieceKind.KING));
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(0,0),new Position(1,1),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(0,1),null));
		expectedMoves.add(new Move(new Position(0,3),new Position(3,0),null));
		expectedMoves.add(new Move(new Position(3,1),new Position(1,0),null));
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMoves(start));
	}
	
	@Test
	public void testAllPossibleMoves_KingCannotCastle_KM() {
		initKarthik();
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(0,0), new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(new Position(4,1), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.KING));
		start.setPiece(new Position(4,4), new Piece(Color.BLACK, PieceKind.PAWN));
		start.setPiece(new Position(4,3), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(4,5), new Piece(Color.WHITE, PieceKind.PAWN));
		
		start.setEnpassantPosition(new Position(4,4));
		start.setCanCastleKingSide(Color.WHITE, false);
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(4,3),new Position(5,4),null));
		expectedMoves.add(new Move(new Position(4,5),new Position(5,4),null));
		expectedMoves.add(new Move(new Position(4,3),new Position(5,3),null));
		expectedMoves.add(new Move(new Position(4,5),new Position(5,5),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(1,3),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(1,5),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(0,2),null));
		expectedMoves.add(new Move(new Position(0,4),new Position(0,3),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(0,1),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(0,2),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(0,3),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(1,0),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(2,0),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(3,0),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(4,0),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(5,0),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(6,0),null));
		expectedMoves.add(new Move(new Position(0,0),new Position(7,0),null));
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMoves(start));
	}
	
	@Test
	public void testPossibleMovesFromPosition_PawnCannotCapture_KM() {
		initKarthik();
		start.setPiece(new Position(0,4), new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(new Position(7,5), new Piece(Color.BLACK, PieceKind.KING));
		start.setPiece(new Position(7,4), new Piece(Color.BLACK, PieceKind.QUEEN));
		start.setPiece(new Position(4,4), new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(new Position(4,5), new Piece(Color.BLACK, PieceKind.PAWN));
		start.setPiece(new Position(5,3), new Piece(Color.BLACK, PieceKind.PAWN));
		
		start.setEnpassantPosition(new Position(4,5));
		start.setCanCastleKingSide(Color.WHITE, false);
		
		Set<Move> expectedMoves = Sets.newHashSet();
		expectedMoves.add(new Move(new Position(4,4),new Position(5,4),null));
		
		assertEquals(expectedMoves,
				stateExplorer.getPossibleMovesFromPosition(start,new Position(4,4)));
	}
}


