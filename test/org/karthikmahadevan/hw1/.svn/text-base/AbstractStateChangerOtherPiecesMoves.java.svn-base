package org.karthikmahadevan.hw1;

import static org.junit.Assert.assertEquals;
import static org.shared.chess.Color.BLACK;
import static org.shared.chess.Color.WHITE;

import static org.shared.chess.PieceKind.PAWN;
import static org.shared.chess.PieceKind.BISHOP;
import static org.shared.chess.PieceKind.KNIGHT;
import static org.shared.chess.PieceKind.QUEEN;
import static org.shared.chess.PieceKind.ROOK;

import org.junit.Test;
import org.shared.chess.AbstractStateChangerTest;
import org.shared.chess.IllegalMove;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.Position;
import org.shared.chess.State;

public abstract class AbstractStateChangerOtherPiecesMoves extends AbstractStateChangerTest {

	  @Test
	  public void testKnightJumpLegal() {
	    Move move2 = new Move(new Position(7, 1), new Position(5, 2), null);
	    
	    start.setPiece(1, 0, null);
	    start.setPiece(2, 0, new Piece(WHITE, PAWN));
	    State expected = start.copy();
	    expected.setPiece(7, 1, null);
	    expected.setPiece(5, 2, new Piece(BLACK, KNIGHT));
	    expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
	    
	    start.setTurn(BLACK);
	    
	    stateChanger.makeMove(start, move2);
	    assertEquals(expected, start);
	  }
	  
	  @Test(expected = IllegalMove.class)
	  public void testKnightJumpIllegal() {
		start.setPiece(1, 0, null);
		start.setPiece(3, 0, new Piece(WHITE, PAWN));
		start.setPiece(6, 2, null);
		start.setPiece(5, 2, new Piece(BLACK, PAWN));
		start.setTurn(BLACK);
		
	    Move move = new Move(new Position(7, 1), new Position(5, 2), null);
	    
	    stateChanger.makeMove(start, move);
	  }
	  
	  @Test
	  public void testKnightJumpCapture() {
	    State expected = start.copy();
	    expected.setPiece(1, 2, null);
	    expected.setPiece(6, 1, null);
	    expected.setPiece(3, 1, new Piece(BLACK, PAWN));
	    expected.setPiece(7,1,null);
	    expected.setPiece(5,2,new Piece(BLACK, KNIGHT));
	    expected.setNumberOfMovesWithoutCaptureNorPawnMoved(0);
	    
	    start.setPiece(1, 2, null);
	    start.setPiece(6, 1, null);
	    start.setPiece(3, 1, new Piece(BLACK, PAWN));
	    start.setPiece(new Position(5,2),new Piece(WHITE,PAWN));
	    start.setTurn(BLACK);
	    Move move = new Move(new Position(7,1), new Position(5, 2), null);
	    stateChanger.makeMove(start, move);
	    
	    assertEquals(start,expected);
	  }
	  
	  @Test(expected = IllegalMove.class) 
	  public void testKnightJumpIllegalSquare() {
		  start.setPiece(1, 0, null);
		  start.setPiece(2, 0, new Piece(WHITE, PAWN));
		  Move move = new Move(new Position(7, 1), new Position(5, 1), null);
		  start.setTurn(BLACK);
		  stateChanger.makeMove(start, move);
	  }
	  
	  @Test(expected = IllegalMove.class) 
	  public void testKnightJumpIllegal1() {
		  start.setPiece(1, 0, null);
		  start.setPiece(2, 0, new Piece(WHITE, PAWN));
		  Move move = new Move(new Position(7, 1), new Position(6, 3), null);
		  start.setTurn(BLACK);
		  stateChanger.makeMove(start, move);
	  }
	  
	  @Test
	  public void testBishopMovement1() {
		start.setPiece(1, 4, null);
		start.setPiece(2, 4, new Piece(WHITE, PAWN));
		start.setPiece(6, 1, null);
		start.setPiece(5, 1, new Piece(BLACK, PAWN));
	    Move move = new Move(new Position(0, 5), new Position(5, 0), null);
	    State expected = start.copy();
	    
	    expected.setPiece(0, 5, null);
	    expected.setPiece(5, 0, new Piece(WHITE, BISHOP));
	    expected.setTurn(BLACK);
	    expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
	    
	    stateChanger.makeMove(start, move);
	    assertEquals(start,expected);
	  }
	  
	  @Test(expected = IllegalMove.class)
	  public void testIllegalBishopJump() {
		  start.setTurn(BLACK);
		  Move move = new Move(new Position(7, 5), new Position(2, 0), null);
		  stateChanger.makeMove(start, move);
	  }
	  
	  
	  @Test(expected = IllegalMove.class)
	  public void testBishopIllegalMoveStraight() {
		    start.setPiece(1, 6, null);
			start.setPiece(3, 6, new Piece(WHITE, PAWN));
			start.setPiece(6, 5, null);
			start.setPiece(5, 5, new Piece(BLACK, PAWN));
		    start.setTurn(BLACK);
		    Move move = new Move(new Position(7,5), new Position(6, 5), null);
		    
		    stateChanger.makeMove(start,move);
	  }
	  
	  
	  @Test(expected = IllegalMove.class)
	  public void testRookIllegalJump() {
		    start.setPiece(1, 0, null);
		    start.setPiece(2, 0, new Piece(WHITE, PAWN));
		    start.setTurn(BLACK);
		    
		    Move move = new Move(new Position(7, 0), new Position(5, 0), null);
		    stateChanger.makeMove(start, move);
	  }
	  
	  @Test
	  public void testRookForwardMovement5() {
		  start.setPiece(1, 1, null);
		  start.setPiece(4, 1, new Piece(WHITE, PAWN));
		  start.setPiece(6, 0, null);
		  start.setPiece(4, 0, new Piece(BLACK, PAWN));
		  
		  Move move = new Move(new Position(7, 0), new Position(5, 0), null);
		  
		  State expected = start.copy();
		  
		  start.setTurn(BLACK);
		  
		  expected.setPiece(7, 0, null);
		  expected.setPiece(5, 0, new Piece(BLACK, ROOK));
		  expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
		  expected.setCanCastleQueenSide(BLACK, false);
		  
		  stateChanger.makeMove(start, move);
		  
		  assertEquals(start,expected);
	  }
	  
	  
	  @Test
	  public void testRookAcrossMovement5() {
		  start.setPiece(1, 7, null);
		  start.setPiece(5, 7, new Piece(WHITE, PAWN));
		  start.setPiece(6, 0, null);
		  start.setPiece(4, 0, new Piece(BLACK, PAWN));
		  start.setPiece(7, 0, null);
		  start.setPiece(5, 0, new Piece(BLACK, ROOK));
		  start.setCanCastleQueenSide(BLACK, false);
		  
		  Move move = new Move(new Position(5, 0), new Position(5, 6), null);
		  
		  State expected = start.copy();
		  
		  start.setTurn(BLACK);
		  
		  expected.setPiece(5, 0, null);
		  expected.setPiece(5, 6, new Piece(BLACK, ROOK));
		  expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
		  
		  stateChanger.makeMove(start, move);
		  
		  assertEquals(start,expected);
	  }
	  
	  
	  @Test
	  public void testRookCapture5() {
		  start.setPiece(1, 7, null);
		  start.setPiece(5, 7, new Piece(WHITE, PAWN));
		  start.setPiece(6, 0, null);
		  start.setPiece(4, 0, new Piece(BLACK, PAWN));
		  start.setPiece(7, 0, null);
		  start.setPiece(5, 0, new Piece(BLACK, ROOK));
		  start.setCanCastleQueenSide(BLACK, false);
		  
		  Move move = new Move(new Position(5, 0), new Position(5, 7), null);
		  
		  State expected = start.copy();
		  
		  start.setTurn(BLACK);
		  
		  expected.setPiece(5, 0, null);
		  expected.setPiece(5, 7, new Piece(BLACK, ROOK));
		  
		  
		  stateChanger.makeMove(start, move);
		  
		  assertEquals(start,expected);
	  }
	  
	  @Test(expected = IllegalMove.class)
	  public void testRookCapturesOwnPawn() {
		  start.setPiece(1, 7, null);
		  start.setPiece(2, 7, new Piece(WHITE, PAWN));
		  start.setTurn(BLACK);
		  Move move = new Move(new Position(7, 0), new Position(6, 0), null);
		  stateChanger.makeMove(start, move);
	  }
	  
	  
	  @Test(expected = IllegalMove.class)
	  public void testIllegalRookMovementDiagonal() {
		  start.setPiece(1, 0, null);
		  start.setPiece(3, 0, new Piece(WHITE, PAWN));
		  start.setPiece(6, 1, null);
		  start.setPiece(5, 1, new Piece(BLACK, PAWN));
		  Move move = new Move(new Position(7, 0), new Position(6, 1), null);
		  start.setTurn(BLACK);
		  stateChanger.makeMove(start, move);
	  }
	  
	  @Test
	  public void testQueenForwardMovement() {
		  start.setPiece(6, 3, null);
		  start.setPiece(6, 4, null);
		  start.setPiece(1, 3, null);
		  start.setPiece(1, 4, null);
		  start.setPiece(7, 3, null);
		  start.setPiece(5, 5, new Piece(BLACK, QUEEN));
		  State expected = start.copy();
		  expected.setPiece(5, 5, null);
		  expected.setPiece(2, 5, new Piece(BLACK, QUEEN));
		  expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
		  
		  start.setTurn(BLACK);
		  
		  Move move = new Move(new Position(5,5), new Position(2,5), null);
		  stateChanger.makeMove(start, move);
		  assertEquals(start,expected);
	  }
	  
	  @Test
	  public void testQueenAcrossMovement() {
		  start.setPiece(6, 3, null);
		  start.setPiece(6, 4, null);
		  start.setPiece(1, 3, null);
		  start.setPiece(1, 4, null);
		  start.setPiece(7, 3, null);
		  start.setPiece(5, 5, new Piece(BLACK, QUEEN));
		  State expected = start.copy();
		  expected.setPiece(5, 5, null);
		  expected.setPiece(5, 0, new Piece(BLACK, QUEEN));
		  expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
		  start.setTurn(BLACK);
		  Move move = new Move(new Position(5,5), new Position(5,0), null);
		  stateChanger.makeMove(start, move);
		  assertEquals(start,expected);
	  }
	  
	  @Test
	  public void testQueenDiagonalMovement() {
		  start.setPiece(6, 3, null);
		  start.setPiece(6, 4, null);
		  start.setPiece(1, 3, null);
		  start.setPiece(1, 4, null);
		  start.setPiece(7, 3, null);
		  start.setPiece(5, 5, new Piece(BLACK, QUEEN));
		  State expected = start.copy();
		  expected.setPiece(5, 5, null);
		  expected.setPiece(4, 4, new Piece(BLACK, QUEEN));
		  expected.setNumberOfMovesWithoutCaptureNorPawnMoved(1);
		  
		  start.setTurn(BLACK);
		  
		  Move move = new Move(new Position(5,5), new Position(4,4), null);
		  stateChanger.makeMove(start, move);
		  assertEquals(start,expected);
	  }
	  
	  @Test
	  public void testQueenCapture() {
		  start.setPiece(6, 3, null);
		  start.setPiece(6, 4, null);
		  start.setPiece(1, 3, null);
		  start.setPiece(1, 4, null);
		  start.setPiece(7, 3, null);
		  start.setPiece(5, 3, new Piece(WHITE, QUEEN));
		  start.setPiece(5, 5, new Piece(BLACK, QUEEN));
		  State expected = start.copy();
		  expected.setPiece(5, 5, null);
		  expected.setPiece(5, 3, new Piece(BLACK, QUEEN));
		  start.setTurn(BLACK);
		  Move move = new Move(new Position(5,5), new Position(5,3), null);
		  stateChanger.makeMove(start, move);
	  }
	  
	  @Test(expected = IllegalMove.class)
	  public void testQueenIllegalJump() {
		  start.setPiece(6, 3, null);
		  start.setPiece(6, 4, null);
		  start.setPiece(1, 3, null);
		  start.setPiece(1, 4, null);
		  start.setPiece(7, 3, null);
		  start.setPiece(5, 3, new Piece(WHITE, QUEEN));
		  start.setPiece(5, 5, new Piece(BLACK, QUEEN));
		  start.setTurn(BLACK);
		  Move move = new Move(new Position(5,5), new Position(5,2), null);
		  stateChanger.makeMove(start, move);
	  }
	  
	  @Test(expected = IllegalMove.class)
	  public void testQueenIllegalMovement() {
		  start.setPiece(6, 3, null);
		  start.setPiece(6, 4, null);
		  start.setPiece(1, 3, null);
		  start.setPiece(1, 4, null);
		  start.setPiece(7, 3, null);
		  start.setPiece(5, 5, new Piece(BLACK, QUEEN));
		  start.setTurn(BLACK);
		  Move move = new Move(new Position(5,5), new Position(4,2), null);
		  stateChanger.makeMove(start, move);
	  }
	}




