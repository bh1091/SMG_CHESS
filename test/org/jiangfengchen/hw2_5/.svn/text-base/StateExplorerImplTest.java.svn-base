package org.jiangfengchen.hw2_5;

import static org.junit.Assert.*;
import static org.shared.chess.Color.BLACK;
import static org.shared.chess.Color.WHITE;
import static org.shared.chess.State.COLS;
import static org.shared.chess.State.ROWS;
import static org.shared.chess.PieceKind.*;

import java.util.Set;

import org.junit.Test;
import org.shared.chess.AbstractStateExplorerTest;
import org.shared.chess.Color;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.shared.chess.StateExplorer;

import com.google.common.collect.Sets;

public class StateExplorerImplTest extends AbstractStateExplorerTest {
  @Override
  public StateExplorer getStateExplorer() {
    return new StateExplorerImpl();
  }

  /*
   * Begin Tests by Jiangfeng Chen <kanppa@gmail.com>
   */
  public State InitJFC(){
	    boolean[] CastleBool={false,false};
		Piece[][] board = new Piece[ROWS][COLS];
	    State original= new State(BLACK,board,CastleBool,CastleBool,null,7,null);
	    original.setPiece(new Position (7,4), new Piece(BLACK,KING));
	    original.setPiece(new Position (0,4), new Piece(WHITE,KING));
	    return original;
  }
  @Test // 1
  public void testPawnCJF() {
	State original = InitJFC();
	original.setPiece(new Position(6,7),new Piece(BLACK,PAWN));
	original.setPiece(new Position(6,4),new Piece(BLACK,PAWN));
	original.setPiece(new Position(6,0),new Piece(BLACK,PAWN));
    Set<Move> expectedMoves = Sets.newHashSet();   
    expectedMoves.add(new Move(new Position(6, 7), new Position(4, 7), null));
    expectedMoves.add(new Move(new Position(6, 7), new Position(5, 7), null));
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(original, new Position(6, 7)));
  }
  
  @Test // 2
  public void testKightCJF() {
	State original = InitJFC();
    Set<Move> expectedMoves = Sets.newHashSet();
    original.setPiece(new Position(3,4), new Piece(BLACK,KNIGHT));
    expectedMoves.add(new Move(new Position(3, 4), new Position(5, 5), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(5, 3), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(4, 6), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(4, 2), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(1, 5), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(1, 3), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(2, 6), null));
    expectedMoves.add(new Move(new Position(3, 4), new Position(2, 2), null));
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(original, new Position(3, 4)));
  }

  @Test // 3
  public void testRookCJF() {
	State original = InitJFC();
	Set<Move> expectedMoves = Sets.newHashSet();
	original.setPiece(new Position(3,5), new Piece(BLACK,ROOK));
    for(int i=0; i<8;i++){
     if(i!=5) expectedMoves.add(new Move(new Position(3, 5), new Position(3, i), null));
     if(i!=3) expectedMoves.add(new Move(new Position(3, 5), new Position(i, 5), null));
    }
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(original, new Position(3, 5)));
  }
  
  @Test // 4
  public void testPromoteCJF() {
	State original = InitJFC();
    Set<Move> expectedMoves = Sets.newHashSet();
    original.setPiece(new Position(1,2), new Piece(BLACK,PAWN));
    original.setPiece(new Position(0,1), new Piece(WHITE,ROOK));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 2), PieceKind.BISHOP));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 2), PieceKind.KNIGHT));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 2), PieceKind.ROOK));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 2), PieceKind.QUEEN));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 1), PieceKind.BISHOP));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 1), PieceKind.KNIGHT));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 1), PieceKind.ROOK));
    expectedMoves.add(new Move(new Position(1, 2), new Position(0, 1), PieceKind.QUEEN));
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(original, new Position(1, 2)));
  }
  
  @Test // 5
  public void testCheckCJF() {
	State original = InitJFC();
	Set<Move> expectedMoves = Sets.newHashSet();
	original.setTurn(WHITE);
	original.setPiece(new Position(2,6),new Piece(BLACK,QUEEN));
	original.setPiece(new Position(1,4), new Piece(WHITE,KNIGHT));
	expectedMoves.add(new Move(new Position(1, 4), new Position(2, 6), null));
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(original, new Position(1, 4)));
  }
  
  @Test // 6
  public void CheckMateCJF() {
	State original = InitJFC();
	original.setTurn(WHITE);
    Set<Move> expectedMoves = Sets.newHashSet();
    original.setPiece(new Position(0,0), new Piece(BLACK,ROOK));
    original.setPiece(new Position(0,7), new Piece(BLACK,ROOK));
    original.setPiece(new Position(2,4), new Piece(BLACK,QUEEN));
    
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMoves(original));
  }
  
  @Test // 7
  public void testPawnAndQueenAndKingCJF() {
	State original = InitJFC();
	original.setTurn(WHITE);
	Set<Move> expectedMoves = Sets.newHashSet();
	original.setPiece(new Position(2,2), new Piece(WHITE,QUEEN));
	original.setPiece(new Position(6,7), new Piece(WHITE,PAWN));
	for (int i=0;i<8;i++) {
		if(i!=2) {
			expectedMoves.add(new Move(new Position(2,2),new Position(i,i),null));
		    if (i<=4&&i>0)expectedMoves.add(new Move(new Position(2,2),new Position(i,4-i),null));
		    expectedMoves.add(new Move(new Position(2,2),new Position(2,i),null));
		    expectedMoves.add(new Move(new Position(2,2),new Position(i,2),null));
		}		
	}
	expectedMoves.add(new Move(new Position(6, 7), new Position(7, 7), PieceKind.BISHOP));
	expectedMoves.add(new Move(new Position(6, 7), new Position(7, 7), PieceKind.KNIGHT));
	expectedMoves.add(new Move(new Position(6, 7), new Position(7, 7), PieceKind.ROOK));
    expectedMoves.add(new Move(new Position(6, 7), new Position(7, 7), PieceKind.QUEEN));
    expectedMoves.add(new Move(new Position(0,4),new Position(1,4),null));
    expectedMoves.add(new Move(new Position(0,4),new Position(1,5),null));
    expectedMoves.add(new Move(new Position(0,4),new Position(1,3),null));
    expectedMoves.add(new Move(new Position(0,4),new Position(0,5),null));
    expectedMoves.add(new Move(new Position(0,4),new Position(0,3),null));
    assertEquals(expectedMoves,
            stateExplorer.getPossibleMoves(original));
  }
  
  @Test // 8
  public void testBishopCJF() {
	State original = InitJFC();
    original.setPiece(new Position(6, 6), new Piece(BLACK, BISHOP));
    Set<Move> expectedMoves = Sets.newHashSet();
    
    for (int i=0;i<8;i++) {
		if(i!=6) {
			expectedMoves.add(new Move(new Position(6,6),new Position(i,i),null));
		    if (i>=5)expectedMoves.add(new Move(new Position(6,6),new Position(i,12-i),null));
		}		
	}
    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(original, new Position(6, 6)));
  }
  
  @Test // 9
  public void StartKnightTestCJF() {
    Set<Move> expectedMoves = Sets.newHashSet();
    
    expectedMoves.add(new Move(new Position(0, 6), new Position(2, 5), null));
    expectedMoves.add(new Move(new Position(0, 6), new Position(2, 7), null));

    assertEquals(expectedMoves,
        stateExplorer.getPossibleMovesFromPosition(start, new Position(0, 6)));
  }
  
  @Test // 10
  public void KingMoveCJF() {
	State original = InitJFC();
	original.setTurn(WHITE);
	original.setCanCastleKingSide(WHITE, true);
	original.setPiece(new Position(0,7),new Piece(WHITE,ROOK));
	Set<Move> expectedMoves = Sets.newHashSet();
    expectedMoves.add(new Move(new Position(0,4), new Position(0,6),null));
    expectedMoves.add(new Move(new Position(0,4), new Position(0,5),null));
    expectedMoves.add(new Move(new Position(0,4), new Position(1,5),null));
    expectedMoves.add(new Move(new Position(0,4), new Position(1,3),null));
    expectedMoves.add(new Move(new Position(0,4), new Position(1,4),null));
    expectedMoves.add(new Move(new Position(0,4), new Position(0,3),null));
	assertEquals(expectedMoves,
	        stateExplorer.getPossibleMovesFromPosition(original, new Position(0, 4)));
  }
  
  
  /*
   * End Tests by Jiangfeng Chen <kanppa@gmail.com>
   */
  
}