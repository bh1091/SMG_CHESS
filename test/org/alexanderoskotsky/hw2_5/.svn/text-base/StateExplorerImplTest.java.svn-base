package org.alexanderoskotsky.hw2_5;

import static org.junit.Assert.assertEquals;

import java.util.HashSet;
import java.util.Set;

import org.junit.Test;
import org.shared.chess.AbstractStateExplorerTest;
import org.shared.chess.Color;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.shared.chess.StateExplorer;

public class StateExplorerImplTest extends AbstractStateExplorerTest {
	@Override
	public StateExplorer getStateExplorer() {
		return new StateExplorerImpl();
	}

	
	
	/*
	 * Begin Tests by Alexander Oskotsky <alex.oskotsky@gmail.com>
	 */
	public void setInitialStateAlex() {
		for (int i = 0; i < State.ROWS; i++) {
			for (int j = 0; j < State.COLS; j++) {
				start.setPiece(i, j, null);
			}
		}
		start.setCanCastleKingSide(Color.WHITE, false);
		start.setCanCastleKingSide(Color.BLACK, false);
		start.setCanCastleQueenSide(Color.WHITE, false);
		start.setCanCastleQueenSide(Color.BLACK, false);

		start.setPiece(0, 0, new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(7, 7, new Piece(Color.BLACK, PieceKind.KING));
	}

	@Test
	public void getPossibleStartPositions_kingMovement() {
		setInitialStateAlex();

		Set<Position> expected = new HashSet<Position>();
		expected.add(new Position(0, 0));

		assertEquals(expected, stateExplorer.getPossibleStartPositions(start));
	}

	@Test
	public void getPossibleMoves_kingMovement() {
		setInitialStateAlex();

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(0, 0), new Position(1, 0), null));
		expected.add(new Move(new Position(0, 0), new Position(1, 1), null));
		expected.add(new Move(new Position(0, 0), new Position(0, 1), null));

		assertEquals(expected, stateExplorer.getPossibleMoves(start));
	}

	@Test
	public void getPossibleMoves_knightMovement() {
		setInitialStateAlex();

		start.setPiece(4, 4, new Piece(Color.WHITE, PieceKind.KNIGHT));

		Set<Move> expected = new HashSet<Move>();

		// white king moves
		expected.add(new Move(new Position(0, 0), new Position(1, 0), null));
		expected.add(new Move(new Position(0, 0), new Position(1, 1), null));
		expected.add(new Move(new Position(0, 0), new Position(0, 1), null));

		// white knight moves
		expected.add(new Move(new Position(4, 4), new Position(5, 2), null));
		expected.add(new Move(new Position(4, 4), new Position(5, 6), null));
		expected.add(new Move(new Position(4, 4), new Position(6, 5), null));
		expected.add(new Move(new Position(4, 4), new Position(6, 3), null));

		expected.add(new Move(new Position(4, 4), new Position(2, 5), null));
		expected.add(new Move(new Position(4, 4), new Position(2, 3), null));
		expected.add(new Move(new Position(4, 4), new Position(3, 2), null));
		expected.add(new Move(new Position(4, 4), new Position(3, 6), null));

		assertEquals(expected, stateExplorer.getPossibleMoves(start));
	}

	@Test
	public void getPossibleMoves_enpassant() {
		setInitialStateAlex();

		start.setPiece(4, 0, new Piece(Color.BLACK, PieceKind.PAWN));
		start.setEnpassantPosition(new Position(4, 0));

		start.setPiece(4, 1, new Piece(Color.WHITE, PieceKind.PAWN));

		Set<Move> expected = new HashSet<Move>();

		// white king moves
		expected.add(new Move(new Position(0, 0), new Position(1, 0), null));
		expected.add(new Move(new Position(0, 0), new Position(1, 1), null));
		expected.add(new Move(new Position(0, 0), new Position(0, 1), null));

		// white pawn moves
		expected.add(new Move(new Position(4, 1), new Position(5, 1), null));
		expected.add(new Move(new Position(4, 1), new Position(5, 0), null));

		assertEquals(expected, stateExplorer.getPossibleMoves(start));
	}

	@Test
	public void getMovesFromPosition_queenSideCastle() {
		setInitialStateAlex();

		start.setPiece(0, 0, new Piece(Color.WHITE, PieceKind.ROOK));
		start.setPiece(0, 4, new Piece(Color.WHITE, PieceKind.KING));
		start.setCanCastleQueenSide(Color.WHITE, true);

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(0, 4), new Position(0, 5), null));
		expected.add(new Move(new Position(0, 4), new Position(0, 3), null));
		expected.add(new Move(new Position(0, 4), new Position(0, 2), null));
		expected.add(new Move(new Position(0, 4), new Position(1, 4), null));
		expected.add(new Move(new Position(0, 4), new Position(1, 5), null));
		expected.add(new Move(new Position(0, 4), new Position(1, 3), null));
		
		assertEquals(expected, stateExplorer.getPossibleMovesFromPosition(start, new Position(0, 4)));
	}
	
	@Test
	public void getMovesFromPosition_kingSideCastle() {
		setInitialStateAlex();

		start.setPiece(0, 0, null);
		start.setPiece(0, 4, new Piece(Color.WHITE, PieceKind.KING));
		start.setPiece(0, 7, new Piece(Color.WHITE, PieceKind.ROOK));
		start.setCanCastleKingSide(Color.WHITE, true);

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(0, 4), new Position(0, 5), null));
		expected.add(new Move(new Position(0, 4), new Position(0, 3), null));
		expected.add(new Move(new Position(0, 4), new Position(0, 6), null));
		expected.add(new Move(new Position(0, 4), new Position(1, 4), null));
		expected.add(new Move(new Position(0, 4), new Position(1, 5), null));
		expected.add(new Move(new Position(0, 4), new Position(1, 3), null));
		
		assertEquals(expected, stateExplorer.getPossibleMovesFromPosition(start, new Position(0, 4)));
	}
	
	@Test
	public void getMovesFromPosition_promotion() {
		setInitialStateAlex();

		start.setPiece(6, 0, new Piece(Color.WHITE, PieceKind.PAWN));

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(6, 0), new Position(7, 0), PieceKind.KNIGHT));
		expected.add(new Move(new Position(6, 0), new Position(7, 0), PieceKind.ROOK));
		expected.add(new Move(new Position(6, 0), new Position(7, 0), PieceKind.QUEEN));
		expected.add(new Move(new Position(6, 0), new Position(7, 0), PieceKind.BISHOP));
		
		
		assertEquals(expected, stateExplorer.getPossibleMovesFromPosition(start, new Position(6, 0)));
	}
	
	@Test
	public void getPossibleMoves_kingInCheck() {
		setInitialStateAlex();

		start.setPiece(6, 1, new Piece(Color.WHITE, PieceKind.PAWN));
		start.setPiece(2, 0, new Piece(Color.BLACK, PieceKind.QUEEN));

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(0, 0), new Position(0, 1), null));
		
		
		assertEquals(expected, stateExplorer.getPossibleMoves(start));
	}
	
	@Test
	public void getPossibleMoves_pawnCaptureRook() {
		setInitialStateAlex();

		start.setPiece(6, 2, new Piece(Color.BLACK, PieceKind.ROOK));
		start.setPiece(5, 1, new Piece(Color.WHITE, PieceKind.PAWN));

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(5, 1), new Position(6, 1), null));
		expected.add(new Move(new Position(5, 1), new Position(6, 2), null));
		
		
		assertEquals(expected, stateExplorer.getPossibleMovesFromPosition(start, new Position(5, 1)));
	}
	
	@Test
	public void getMovesFromPosition_pawnMovement() {
		setInitialStateAlex();

		start.setPiece(1, 0, new Piece(Color.WHITE, PieceKind.PAWN));

		Set<Move> expected = new HashSet<Move>();

		expected.add(new Move(new Position(1, 0), new Position(2, 0), null));
		expected.add(new Move(new Position(1, 0), new Position(3, 0), null));
		
		
		assertEquals(expected, stateExplorer.getPossibleMovesFromPosition(start, new Position(1, 0)));
	}

	/*
	 * End Tests by Alexander Oskotsky <alex.oskotsky@gmail.com>
	 */
	
}