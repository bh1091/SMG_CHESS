package org.chenji.hw3;

import static org.junit.Assert.assertTrue;

import org.chenji.hw2.StateChangerImpl;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.GameResultReason;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.shared.chess.StateChanger;

import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.user.client.History;

/**
 * Tests for the Presenter class.
 */
public class PresenterTest {
  Presenter presenter;
  Presenter.View view;
  
  @Before
  public void setup() {
    presenter = new Presenter();
    view = Mockito.mock(Presenter.View.class); 
    presenter.setView(view);
  }
  
  @Test
  public void testSetState() {
    State state = new State();
    presenter.setState(state);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 0, 
        new Piece(Color.WHITE, PieceKind.ROOK));
    Mockito.verify(view).setPiece(4, 4, null);
  }
  
  @Test
  public void testPawnMakeMove() {
    presenter.onClick(1 + 3, 0);
    presenter.onClick(3 + 3, 0);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(1, 0, null);
    Mockito.verify(view).setPiece(3, 0, new Piece(Color.WHITE, PieceKind.PAWN));
  }
  
  @Test
  public void testRookMakeMove() {
    State state = new State();
    state.setPiece(1, 0, null);
    presenter.changeState(state);
    presenter.onClick(0 + 3, 0);
    presenter.onClick(3 + 3, 0);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 0, null);
    Mockito.verify(view).setPiece(3, 0, new Piece(Color.WHITE, PieceKind.ROOK));
  }
  
  @Test
  public void testKnightMakeMove() {
    presenter.onClick(0 + 3, 1);
    presenter.onClick(2 + 3, 0);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 1, null);
    Mockito.verify(view).setPiece(2, 0, new Piece(Color.WHITE, PieceKind.KNIGHT));
  }
  
  @Test
  public void testBishopMakeMove() {
    State state = new State();
    state.setPiece(1, 3, null);
    presenter.changeState(state);
    presenter.onClick(0 + 3, 2);
    presenter.onClick(3 + 3, 5);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 2, null);
    Mockito.verify(view).setPiece(3, 5, new Piece(Color.WHITE, PieceKind.BISHOP));
  }
  
  @Test
  public void testQueenMakeMove() {
    State state = new State();
    state.setPiece(1, 3, null);
    presenter.changeState(state);
    presenter.onClick(0 + 3, 3);
    presenter.onClick(3 + 3, 3);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 3, null);
    Mockito.verify(view).setPiece(3, 3, new Piece(Color.WHITE, PieceKind.QUEEN));
  }
  
  @Test
  public void testKingMakeMove() {
    State state = new State();
    state.setPiece(1, 4, null);
    presenter.changeState(state);
    presenter.onClick(0 + 3, 4);
    presenter.onClick(1 + 3, 4);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 4, null);
    Mockito.verify(view).setPiece(1, 4, new Piece(Color.WHITE, PieceKind.KING));
  }
  
  @Test
  public void testCapture1() {
    State state = new State();
    state.setPiece(1, 0, null);
    presenter.changeState(state);
    presenter.onClick(0 + 3, 0);
    presenter.onClick(6 + 3, 0);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 0, null);
    Mockito.verify(view).setPiece(6, 0, new Piece(Color.WHITE, PieceKind.ROOK));
  }
  @Test
  public void testCapture2() {
    State state = new State();
    state.setPiece(1, 3, null);
    presenter.changeState(state);
    presenter.onClick(0 + 3, 3);
    presenter.onClick(6 + 3, 3);
    Mockito.verify(view).setWhoseTurn(Color.BLACK);
    Mockito.verify(view).setGameResult(null);
    Mockito.verify(view).setPiece(0, 3, null);
    Mockito.verify(view).setPiece(6, 3, new Piece(Color.WHITE, PieceKind.QUEEN));
  }
  
  @Test
  public void testEndGame_STALEMATE() {
    State state = new State(Color.BLACK, new Piece [State.ROWS][State.COLS], new boolean[]{false, false}, new boolean[]{false, false}, null, 0, null);
    state.setPiece(0, 4, new Piece(Color.WHITE, PieceKind.KING));
    state.setPiece(1, 4, new Piece(Color.BLACK, PieceKind.PAWN));
    state.setPiece(3, 4, new Piece(Color.BLACK, PieceKind.KING));
    presenter.changeState(state);
    presenter.onClick(3 + 3, 4);
    presenter.onClick(2 + 3, 4);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view).setGameResult(new GameResult(null, GameResultReason.STALEMATE));
    Mockito.verify(view).setPiece(3, 4, null);
    Mockito.verify(view).setPiece(2, 4, new Piece(Color.BLACK, PieceKind.KING));
  }
  
  @Test
  public void testEndGame_FIFTY_MOVE_RULE() {
    State state = new State(Color.BLACK, new Piece [State.ROWS][State.COLS], new boolean[]{false, false}, new boolean[]{false, false}, null, 99, null);
    state.setPiece(0, 4, new Piece(Color.WHITE, PieceKind.KING));
    state.setPiece(3, 4, new Piece(Color.BLACK, PieceKind.KING));
    presenter.changeState(state);
    presenter.onClick(3 + 3, 4);
    presenter.onClick(2 + 3, 4);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view).setGameResult(new GameResult(null, GameResultReason.FIFTY_MOVE_RULE));
    Mockito.verify(view).setPiece(3, 4, null);
    Mockito.verify(view).setPiece(2, 4, new Piece(Color.BLACK, PieceKind.KING));
  }
  
  @Test
  public void testEndGame_WIN() {
    State start = new State();
    start.setTurn(Color.BLACK);
    start.setPiece(new Position(6, 4), null);
    start.setPiece(new Position(2, 4), new Piece(Color.BLACK, PieceKind.PAWN));
    start.setPiece(new Position(6, 2), null);
    start.setPiece(new Position(0, 3), null);
    start.setPiece(new Position(0, 2), null);
    start.setPiece(new Position(0, 1), null);
    start.setPiece(new Position(3, 3), new Piece(Color.BLACK, PieceKind.QUEEN));
    start.setPiece(new Position(7, 1), null);
    start.setPiece(new Position(2, 6), new Piece(Color.BLACK, PieceKind.KNIGHT));
    start.setPiece(new Position(1, 4), null);
    start.setPiece(new Position(1, 5), null);
    start.setPiece(new Position(0, 5), null);
    
    presenter.changeState(start);
    presenter.onClick(3 + 3, 3);
    presenter.onClick(1 + 3, 3);
    Mockito.verify(view).setWhoseTurn(Color.WHITE);
    Mockito.verify(view).setGameResult(new GameResult(Color.BLACK, GameResultReason.CHECKMATE));
    Mockito.verify(view).setPiece(3, 3, null);
    Mockito.verify(view).setPiece(1, 3, new Piece(Color.BLACK, PieceKind.QUEEN));
  }
}
