package org.zhihanli.hw2_5;

import org.shared.chess.AbstractStateExplorerTest;
import org.shared.chess.Piece;
import org.shared.chess.State;
import org.shared.chess.StateExplorer;
import org.zhihanli.hw2_5.StateExplorerImpl;
import org.shared.chess.*;
import java.util.Set;
import static org.shared.chess.Color.*;
import static org.shared.chess.PieceKind.*;

import org.junit.*;
import static org.junit.Assert.assertEquals;

import com.google.appengine.labs.repackaged.com.google.common.collect.Sets;

public class StateExplorerImplTest extends AbstractStateExplorerTest {
	@Override
	public StateExplorer getStateExplorer() {
		return new StateExplorerImpl();
	}

	public void initZHL(Color color) {
		Piece[][] board = new Piece[State.ROWS][State.COLS];
		start = new State(color, board, new boolean[2], new boolean[2], null,
				0, null);
	}

	@Test
	public void testStateExplorerGetPossibleStartPositionsBlackInit() {
		Set<Position> expectedStartPos = Sets.newHashSet();
		start.setTurn(BLACK);
		start.setPiece(1, 0, null);
		start.setPiece(3, 0, new Piece(WHITE, PAWN));

		for (int col = 0; col < 8; col++) {
			expectedStartPos.add(new Position(6, col));
		}
		expectedStartPos.add(new Position(7, 1));
		expectedStartPos.add(new Position(7, 6));
		assertEquals(expectedStartPos,
				stateExplorer.getPossibleStartPositions(start));
	}

	@Test
	public void testStateExplorerGetPossibleStartPositionBlackNoPawn() {
		Set<Position> expectedStartPos = Sets.newHashSet();
		start.setPiece(0, 1, null);
		start.setPiece(3, 0, new Piece(WHITE, KNIGHT));
		start.setTurn(BLACK);

		for (int col = 0; col < 8; col++) {
			start.setPiece(6, col, null);
		}

		for (int col = 0; col < 8; col++) {
			expectedStartPos.add(new Position(7, col));
		}
		assertEquals(expectedStartPos,
				stateExplorer.getPossibleStartPositions(start));
	}

	@Test
	public void testStateExplorerGetPossibleStartPositionWhiteKingUnderCheck() {
		Set<Position> expectedStartPos = Sets.newHashSet();
		initZHL(WHITE);
		start.setPiece(3, 0, new Piece(BLACK, ROOK));
		start.setPiece(7, 4, new Piece(BLACK, KING));
		start.setPiece(4, 4, new Piece(WHITE, KNIGHT));
		start.setPiece(0, 0, new Piece(WHITE, KING));

		expectedStartPos.add(new Position(0, 0));

		assertEquals(expectedStartPos,
				stateExplorer.getPossibleStartPositions(start));
	}

	@Test
	public void testStateExplorerGetPossibleMovesBlackKingAndRook() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();

		initZHL(BLACK);
		start.setPiece(0, 0, new Piece(WHITE, KING));
		start.setPiece(4, 4, new Piece(WHITE, KNIGHT));
		start.setPiece(7, 6, new Piece(BLACK, ROOK));
		start.setPiece(7, 4, new Piece(BLACK, KING));

		// Black king
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(7, 3), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(7, 5), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(6, 4), null));

		// Black rook
		expectedPossibleMove.add(new Move(new Position(7, 6),
				new Position(7, 5), null));
		expectedPossibleMove.add(new Move(new Position(7, 6),
				new Position(7, 7), null));
		for (int row = 6; row >= 0; row--)
			expectedPossibleMove.add(new Move(new Position(7, 6), new Position(
					row, 6), null));

		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMoves(start));
	}

	@Test
	public void testStateExplorerGetPossibleMovesWhiteKingAndKnight() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		initZHL(WHITE);
		start.setPiece(0, 0, new Piece(WHITE, KING));
		start.setPiece(4, 4, new Piece(WHITE, KNIGHT));
		start.setPiece(7, 6, new Piece(BLACK, ROOK));
		start.setPiece(7, 4, new Piece(BLACK, KING));

		// WHITE King
		expectedPossibleMove.add(new Move(new Position(0, 0),
				new Position(1, 0), null));
		expectedPossibleMove.add(new Move(new Position(0, 0),
				new Position(1, 1), null));
		expectedPossibleMove.add(new Move(new Position(0, 0),
				new Position(0, 1), null));

		// White Knight
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(6, 3), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(6, 5), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(5, 2), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(5, 6), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(3, 2), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(3, 6), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(2, 3), null));
		expectedPossibleMove.add(new Move(new Position(4, 4),
				new Position(2, 5), null));

		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMoves(start));
	}

	@Test
	public void testStateExplorerGetPossibleMovesWhiteKingUnderCheck() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		initZHL(WHITE);
		start.setPiece(3, 0, new Piece(BLACK, ROOK));
		start.setPiece(7, 4, new Piece(BLACK, KING));
		start.setPiece(4, 4, new Piece(WHITE, KNIGHT));
		start.setPiece(0, 0, new Piece(WHITE, KING));

		expectedPossibleMove.add(new Move(new Position(0, 0),
				new Position(0, 1), null));
		expectedPossibleMove.add(new Move(new Position(0, 0),
				new Position(1, 1), null));

		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMoves(start));
	}
	
	@Test
	public void testStateExplorerGetPossibleMovesInStaleMate(){
		initZHL(WHITE);
		start.setPiece(7, 7, new Piece(WHITE, KING));
		start.setPiece(5, 6, new Piece(BLACK, QUEEN));
		start.setPiece(6, 5, new Piece(BLACK, KING));
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMoves(start));

	}


	@Test
	public void testStateExplorerGetPossibleMovesBlackKingCanCastle() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();

		initZHL(BLACK);
		start.setPiece(7, 4, new Piece(BLACK, KING));
		start.setPiece(7, 7, new Piece(BLACK, ROOK));
		start.setPiece(4, 4, new Piece(WHITE, KNIGHT));
		start.setPiece(0, 0, new Piece(WHITE, KING));
		start.setCanCastleKingSide(BLACK, true);

		// Black rook
		expectedPossibleMove.add(new Move(new Position(7, 7),
				new Position(7, 5), null));
		expectedPossibleMove.add(new Move(new Position(7, 7),
				new Position(7, 6), null));
		for (int row = 6; row >= 0; row--) {
			expectedPossibleMove.add(new Move(new Position(7, 7), new Position(
					row, 7), null));
		}

		// Black King
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(7, 3), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(7, 5), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(6, 4), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(7, 6), null));

		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMoves(start));

	}

	@Test
	public void testStateExplorerGetPossibleMovesFromPositionWhiteKingInit() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();

		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMovesFromPosition(start, new Position(
						0, 4)));
	}

	@Test
	public void testStateExplorerGetPossibleMovesFromPositionFromSquareWithNoPiece() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMovesFromPosition(start, new Position(
						4, 4)));
	}

	@Test
	public void testStateExplorerGetPossibleMovesFromPositionWhiteQueen() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		initZHL(WHITE);
		start.setPiece(0, 0, new Piece(WHITE, KING));
		start.setPiece(1, 2, new Piece(WHITE, PAWN));
		start.setPiece(1, 3, new Piece(WHITE, PAWN));
		start.setPiece(0, 4, new Piece(WHITE, QUEEN));
		start.setPiece(7, 5, new Piece(BLACK, KING));
		start.setPiece(7, 7, new Piece(BLACK, ROOK));

		// White queen
		for (int row = 1; row < 8; row++) {
			expectedPossibleMove.add(new Move(new Position(0, 4), new Position(
					row, 4), null));
		}
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(1, 5), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(2, 6), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(3, 7), null));

		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(0, 1), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(0, 2), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(0, 3), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(0, 5), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(0, 6), null));
		expectedPossibleMove.add(new Move(new Position(0, 4),
				new Position(0, 7), null));
		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMovesFromPosition(start, new Position(
						0, 4)));
	}

	@Test
	public void testStateExplorerGetPossibleMovesFromPositionBlackBishop() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		initZHL(BLACK);
		start.setPiece(0, 0, new Piece(WHITE, KING));
		start.setPiece(5, 2, new Piece(WHITE, ROOK));
		start.setPiece(7, 4, new Piece(BLACK, BISHOP));
		start.setPiece(7, 5, new Piece(BLACK, KING));

		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(5, 2), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(6, 3), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(6, 5), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(5, 6), null));
		expectedPossibleMove.add(new Move(new Position(7, 4),
				new Position(4, 7), null));

		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMovesFromPosition(start, new Position(
						7, 4)));

	}

	@Test
	public void testStateExplorerGetPossibleMovesFromPositionWhitePawnEnpassantCapture() {
		Set<Move> expectedPossibleMove = Sets.newHashSet();
		start.setPiece(6, 1, null);
		start.setPiece(4, 1, new Piece(BLACK, PAWN));
		start.setPiece(1, 2, null);
		start.setPiece(4, 2, new Piece(WHITE, PAWN));
		start.setPiece(6, 6, null);
		start.setPiece(5, 6, new Piece(BLACK, PAWN));
		start.setEnpassantPosition(new Position(4,1));

		expectedPossibleMove.add(new Move(new Position(4, 2),
				new Position(5, 2), null));
		expectedPossibleMove.add(new Move(new Position(4, 2),
				new Position(5, 1), null));
		assertEquals(expectedPossibleMove,
				stateExplorer.getPossibleMovesFromPosition(start, new Position(
						4, 2)));

	}
	
	}
