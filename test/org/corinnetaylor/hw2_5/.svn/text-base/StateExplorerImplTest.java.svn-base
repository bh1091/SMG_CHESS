package org.corinnetaylor.hw2_5;

import static org.junit.Assert.assertEquals;
import static org.shared.chess.Color.BLACK;
import static org.shared.chess.Color.WHITE;
import static org.shared.chess.PieceKind.QUEEN;
import static org.shared.chess.PieceKind.KNIGHT;
import static org.shared.chess.PieceKind.ROOK;
import static org.shared.chess.PieceKind.BISHOP;

import java.util.Set;

import org.junit.Test;
import org.shared.chess.AbstractStateExplorerTest;
import org.shared.chess.Color;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.StateExplorer;
import org.corinnetaylor.hw2_5.StateExplorerImpl;

import com.google.common.collect.Sets;


public class StateExplorerImplTest extends AbstractStateExplorerTest{
	  public StateExplorer getStateExplorer() {
		    return new StateExplorerImpl();
		  }

	  
	  /*
	   * Begin Tests by Corinne Taylor <corinnetaylor858@gmail.com>
	   */
	  
	  private void clearBoard(){
		  for (int rows = 0; rows < 8; rows++){
			  for (int cols = 0; cols < 8; cols++){
				  start.setPiece(rows, cols, null);
			  }
		  }
			start.setCanCastleKingSide(WHITE, false);
			start.setCanCastleKingSide(BLACK, false);
			start.setCanCastleQueenSide(WHITE, false);
			start.setCanCastleQueenSide(BLACK, false);

	  }
	  
	  private void setUpPawnPromotion(){
			start.setPiece(new Position(0, 7), new Piece(Color.WHITE,
					PieceKind.KING));
			start.setPiece(new Position(7, 7), new Piece(Color.BLACK,
					PieceKind.KING));
			start.setPiece(new Position(6, 0), new Piece(Color.WHITE,
					PieceKind.PAWN));
			start.setPiece(new Position(1, 0), new Piece(Color.BLACK,
					PieceKind.PAWN));
	  }
	  
	  private void setUpCastling(){
			start.setPiece(new Position(0, 4), new Piece(Color.WHITE,
					PieceKind.KING));
			start.setPiece(new Position(0, 7), new Piece(Color.WHITE,
					PieceKind.ROOK));
			start.setCanCastleKingSide(WHITE, true);
			start.setPiece(new Position(7, 4), new Piece(Color.BLACK,
					PieceKind.KING));
	  }
	  
	  @Test
	  public void testGetPossibleStartPositions_MissingWhitePawn() {
		  start.setPiece(1, 0, null);
	    Set<Position> expectedPositions = Sets.newHashSet();
	    //pawn positions
	    for (int i = 1; i < 8; i++)
	      expectedPositions.add(new Position(1, i));
	    //knight positions
	    expectedPositions.add(new Position(0, 1));
	    expectedPositions.add(new Position(0, 6));
	    //rook position
	    expectedPositions.add(new Position(0, 0));
	    assertEquals(expectedPositions,
	        stateExplorer.getPossibleStartPositions(start));
	    }
	  
	  @Test
	  public void testGetPossibleMoves_MissingWhitePawn() {
		  start.setPiece(1, 0, null);
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // pawn moves
	    for (int i = 1; i < 8; i++) {
	      expectedMoves.add(new Move(new Position(1, i), new Position(2, i), null));
	      expectedMoves.add(new Move(new Position(1, i), new Position(3, i), null));
	    }
	    // knight moves
	    expectedMoves.add(new Move(new Position(0, 1), new Position(2, 0), null));
	    expectedMoves.add(new Move(new Position(0, 1), new Position(2, 2), null));
	    expectedMoves.add(new Move(new Position(0, 6), new Position(2, 5), null));
	    expectedMoves.add(new Move(new Position(0, 6), new Position(2, 7), null));
	    //rook moves
	    for (int i = 1; i < 7; i++){
	    	expectedMoves.add(new Move(new Position(0, 0), new Position(i, 0), null));
	    }
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  @Test
	  public void testGetPossibleStartPositions_PawnPromotion() {
		  clearBoard();
		  setUpPawnPromotion();
	    Set<Position> expectedPositions = Sets.newHashSet();
	    //pawn positions
	    expectedPositions.add(new Position(6, 0));
	    //king positions
	    expectedPositions.add(new Position(0, 7));
	    
	    assertEquals(expectedPositions,
	        stateExplorer.getPossibleStartPositions(start));
	    }
	  
	  @Test
	  public void testGetPossibleMoves_WhitePromotion() {
		  clearBoard();
		  setUpPawnPromotion();
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // pawn moves
	    expectedMoves.add(new Move(new Position(6, 0), new Position(7, 0), ROOK));
	    expectedMoves.add(new Move(new Position(6, 0), new Position(7, 0), BISHOP));
	    expectedMoves.add(new Move(new Position(6, 0), new Position(7, 0), KNIGHT));
	    expectedMoves.add(new Move(new Position(6, 0), new Position(7, 0), QUEEN));
	    // king moves
	    expectedMoves.add(new Move(new Position(0, 7), new Position(0, 6), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 7), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 6), null));
	    
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  @Test
	  public void testGetPossibleMoves_BlackPromotion() {
		  clearBoard();
		  setUpPawnPromotion();
		  start.setTurn(BLACK);
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // pawn moves
	    expectedMoves.add(new Move(new Position(1, 0), new Position(0, 0), ROOK));
	    expectedMoves.add(new Move(new Position(1, 0), new Position(0, 0), BISHOP));
	    expectedMoves.add(new Move(new Position(1, 0), new Position(0, 0), KNIGHT));
	    expectedMoves.add(new Move(new Position(1, 0), new Position(0, 0), QUEEN));
	    // king moves
	    expectedMoves.add(new Move(new Position(7, 7), new Position(7, 6), null));
	    expectedMoves.add(new Move(new Position(7, 7), new Position(6, 7), null));
	    expectedMoves.add(new Move(new Position(7, 7), new Position(6, 6), null));
	    
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  @Test
	  public void testGetPossibleStartPositions_Castling() {
		  clearBoard();
		  setUpCastling();
	    Set<Position> expectedPositions = Sets.newHashSet();
	    //rook positions
	    expectedPositions.add(new Position(0, 7));
	    //king positions
	    expectedPositions.add(new Position(0, 4));
	    
	    assertEquals(expectedPositions,
	        stateExplorer.getPossibleStartPositions(start));
	    }
	  
	  @Test
	  public void testGetPossibleMoves_WhiteCastleKingSide() {
		  clearBoard();
		  setUpCastling();
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // Rook moves
	    for (int i = 5; i < 7; i++){
	    	expectedMoves.add(new Move(new Position(0, 7), new Position(0, i), null));
	    }
	    for (int i = 1; i < 8; i++){
	    	expectedMoves.add(new Move(new Position(0, 7), new Position(i, 7), null));
	    }
	    
	    // king moves
	    expectedMoves.add(new Move(new Position(0, 4), new Position(0, 3), null));
	    expectedMoves.add(new Move(new Position(0, 4), new Position(0, 5), null));
	    expectedMoves.add(new Move(new Position(0, 4), new Position(1, 3), null));
	    expectedMoves.add(new Move(new Position(0, 4), new Position(1, 4), null));
	    expectedMoves.add(new Move(new Position(0, 4), new Position(1, 5), null));
	    expectedMoves.add(new Move(new Position(0, 4), new Position(0, 6), null));
	    
	    
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  @Test
	  public void testGetPossibleMoves_WhiteBishop() {
		  clearBoard();
		  start.setPiece(new Position(0, 0), new Piece(Color.WHITE,
					PieceKind.BISHOP));
		  start.setPiece(new Position(0, 7), new Piece(Color.WHITE,
					PieceKind.KING));
		  start.setPiece(new Position(7, 0), new Piece(Color.BLACK,
					PieceKind.KING));
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // Bishop moves
	    for (int i = 1; i < 8; i++){
	    	expectedMoves.add(new Move(new Position(0, 0), new Position(i, i), null));
	    }

	    // king moves
	    expectedMoves.add(new Move(new Position(0, 7), new Position(0, 6), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 7), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 6), null));
	    
	    
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  @Test
	  public void testGetPossibleMoves_WhiteKnight() {
		  clearBoard();
		  start.setPiece(new Position(0, 0), new Piece(Color.WHITE,
					PieceKind.KNIGHT));
		  start.setPiece(new Position(0, 7), new Piece(Color.WHITE,
					PieceKind.KING));
		  start.setPiece(new Position(7, 0), new Piece(Color.BLACK,
					PieceKind.KING));
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // Knight moves
	    expectedMoves.add(new Move(new Position(0, 0), new Position(2, 1), null));
	    expectedMoves.add(new Move(new Position(0, 0), new Position(1, 2), null));

	    // king moves
	    expectedMoves.add(new Move(new Position(0, 7), new Position(0, 6), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 7), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 6), null));
	    
	    
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  @Test
	  public void testGetPossibleMoves_WhiteQueen() {
		  clearBoard();
		  start.setPiece(new Position(0, 0), new Piece(Color.WHITE,
					PieceKind.QUEEN));
		  start.setPiece(new Position(0, 7), new Piece(Color.WHITE,
					PieceKind.KING));
		  start.setPiece(new Position(7, 1), new Piece(Color.BLACK,
					PieceKind.KING));
	    Set<Move> expectedMoves = Sets.newHashSet();
	    // Queen moves
	    for (int i = 1; i < 8; i++){
	    	expectedMoves.add(new Move(new Position(0, 0), new Position(i, 0), null));
	    	expectedMoves.add(new Move(new Position(0, 0), new Position(i, i), null));
	    }
	    for (int i = 1; i < 7; i++){
	    	expectedMoves.add(new Move(new Position(0, 0), new Position(0, i), null));
	    }
	    // king moves
	    expectedMoves.add(new Move(new Position(0, 7), new Position(0, 6), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 7), null));
	    expectedMoves.add(new Move(new Position(0, 7), new Position(1, 6), null));
	    
	    
	    assertEquals(expectedMoves,
	        stateExplorer.getPossibleMoves(start));
	  }
	  
	  /*
	   * end tests by Corinne Taylor <corinnetaylor858@gmail.com>
	   */
}
