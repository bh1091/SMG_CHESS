package org.bohouli.hw3;

import org.bohouli.hw2.StateChangerImpl;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.GameResultReason;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.shared.chess.StateChanger;

/**
 * Tests for the Presenter class.
 */
public class PresenterTest {
	Presenter presenter;
	Presenter.View view;

	@Before
	public void setup() {
		presenter = new Presenter();
		view = Mockito.mock(Presenter.View.class);
		presenter.setView(view);
	}

	@Test
	public void testSetState() {
		State state = new State();
		presenter.setState(state);
		Mockito.verify(view).setWhoseTurn(Color.WHITE);
		Mockito.verify(view).setGameResult(null);
		Mockito.verify(view).setPiece(7, 0,
				new Piece(Color.WHITE, PieceKind.ROOK));
		Mockito.verify(view).setPiece(4, 4, null);
	}

	@Test
	public void testPawnMoveTwoSteps() {
		State state = new State();
		StateChanger stateChanger = new StateChangerImpl();
		stateChanger.makeMove(state, new Move(new Position(1, 0), new Position(
				3, 0), null));
		presenter.setState(state);
		Mockito.verify(view).setPiece(6, 0, null);
		Mockito.verify(view).setPiece(4, 0,
				new Piece(Color.WHITE, PieceKind.PAWN));
	}

	@Test
	public void testPawnMoveOneStep() {
		State state = new State();
		StateChanger stateChanger = new StateChangerImpl();
		stateChanger.makeMove(state, new Move(new Position(1, 0), new Position(
				2, 0), null));
		presenter.setState(state);
		Mockito.verify(view).setPiece(6, 0, null);
		Mockito.verify(view).setPiece(5, 0,
				new Piece(Color.WHITE, PieceKind.PAWN));
	}
	
	@Test
	public void testLeftKnightMove() {
		State state = new State();
		StateChanger stateChanger = new StateChangerImpl();
		stateChanger.makeMove(state, new Move(new Position(0, 1), new Position(
				2, 2), null));
		presenter.setState(state);
		Mockito.verify(view).setPiece(7, 1, null);
		Mockito.verify(view).setPiece(5, 2,
				new Piece(Color.WHITE, PieceKind.KNIGHT));
	}
	
	@Test
	public void testRightKnightMove() {
		State state = new State();
		StateChanger stateChanger = new StateChangerImpl();
		stateChanger.makeMove(state, new Move(new Position(0, 6), new Position(
				2, 7), null));
		presenter.setState(state);
		Mockito.verify(view).setPiece(7, 6, null);
		Mockito.verify(view).setPiece(5, 7,
				new Piece(Color.WHITE, PieceKind.KNIGHT));
	}

	@Test
	public void testHighlightingPawn() {
		State state = new State();
		presenter.setState(state);

		presenter.clickCheck(7 - 6, 4);
		Mockito.verify(view).setHighlighted(5, 4, true);
		Mockito.verify(view).setHighlighted(4, 4, true);
	}

	@Test
	public void testHighlightingKnight() {
		State state = new State();
		presenter.setState(state);

		presenter.clickCheck(7 - 7, 6);
		Mockito.verify(view).setHighlighted(5, 7, true);
		Mockito.verify(view).setHighlighted(5, 5, true);
	}

	@Test
	public void testHighlightingBishop() {
		State state = new State();
		state.setPiece(1, 4, null);
		presenter.setState(state);

		presenter.clickCheck(7 - 7, 5);
		Mockito.verify(view).setHighlighted(6, 4, true);
		Mockito.verify(view).setHighlighted(5, 3, true);
		Mockito.verify(view).setHighlighted(4, 2, true);
		Mockito.verify(view).setHighlighted(3, 1, true);
	}

	@Test
	public void testCheckMate() {
		State state = new State();
		state.setGameResult(new GameResult(Color.WHITE,
				GameResultReason.CHECKMATE));

		presenter.setState(state);
		Mockito.verify(view).setGameResult(
				new GameResult(Color.WHITE, GameResultReason.CHECKMATE));
	}

	@Test
	public void testTurn() {
		State state = new State();
		state.setTurn(Color.BLACK);

		presenter.setState(state);
		Mockito.verify(view).setWhoseTurn(Color.BLACK);
	}
}