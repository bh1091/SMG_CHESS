package org.zhaohuizhang.hw3;

import static org.shared.chess.Color.BLACK;
import static org.shared.chess.Color.WHITE;
import static org.shared.chess.PieceKind.BISHOP;
import static org.shared.chess.PieceKind.KING;
import static org.shared.chess.PieceKind.KNIGHT;
import static org.shared.chess.PieceKind.PAWN;
import static org.shared.chess.PieceKind.ROOK;
import static org.shared.chess.PieceKind.QUEEN;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.GameResultReason;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.State;

public class PresenterTest {
	Presenter presenter;
	Presenter.View view;
	
	@Before
	public void initialize(){
		presenter = new Presenter();
		view = Mockito.mock(Presenter.View.class);
		presenter.setView(view);
	}
	
	@Test
	public void testSetState(){
		State state = new State();
		presenter.setState(state);
		Mockito.verify(view).setWhoseTurn(Color.WHITE);
		Mockito.verify(view).setGameResult(null);
		Mockito.verify(view).setPiece(2, 2, null);
		Mockito.verify(view).setPiece(7, 4, new Piece(Color.BLACK, PieceKind.KING));
	}
	
	@Test
	public void testCleanPromotion(){
		State state = new State();
		presenter.setState(state);
		presenter.clearPromotion();
		Mockito.verify(view).setPromotionGrid(false, Color.WHITE);
		Mockito.verify(view).setPromotionGrid(false, Color.BLACK);
	}
	
	@Test
	public void testdraggedItem(){
		State state = new State();
		presenter.setState(state);
		presenter.draggedItem(1, 0);
		Mockito.verify(view).setHighlighted(2, 0, true);
		Mockito.verify(view).setHighlighted(3, 0, true);
	}
	
	@Test
	public void testClearHightlights(){
		State state = new State();
		presenter.setState(state);
		presenter.draggedItem(1, 0);
		presenter.clearHighlights();
		Mockito.verify(view).setHighlighted(2, 0, false);
		Mockito.verify(view).setHighlighted(3, 0, false);
	}
	
	@Test
	public void testDrop(){
		State state = new State();
		presenter.setState(state);
		presenter.draggedItem(1, 0);
		presenter.handleDrop(2, 0);
		Mockito.verify(view).setPiece(1, 0, null);
		Mockito.verify(view).setPiece(2, 0, new Piece(Color.WHITE, PieceKind.PAWN));
		Mockito.verify(view).setWhoseTurn(BLACK);
	}
	
	@Test
	public void testDraggedOver(){
		State state = new State();
		presenter.setState(state);
		presenter.draggedItem(1, 0);
		presenter.handleDragOver(2, 0);
		Mockito.verify(view).setDragOverHighlighted(2, 0, true);
	}
	
	@Test
	public void testGameResult(){
		State start = new State(WHITE, new Piece[State.ROWS][State.COLS], new boolean[2], new boolean[2],
				null, 0, null);
		start.setPiece(0, 7, new Piece(WHITE, KING));
		start.setPiece(7, 3, new Piece(BLACK, KING));
		start.setPiece(2, 4, new Piece(BLACK, QUEEN));
		start.setPiece(2, 5, new Piece(BLACK, PAWN));
		start.setPiece(7, 7, new Piece(BLACK, ROOK));
		start.setPiece(4, 6, new Piece(BLACK, ROOK));
		presenter.setState(start);
		Mockito.verify(view).setGameResult(new GameResult(BLACK, GameResultReason.CHECKMATE));
	}
	
	@Test
	public void testSecondDrag(){
		State state = new State();
		presenter.setState(state);
		presenter.draggedItem(1, 0);
		presenter.draggedItem(1, 3);
		Mockito.verify(view).setHighlighted(2, 3, true);
		Mockito.verify(view).setHighlighted(3, 3, true);
	}
	
	@Test
	public void testSecondDrop(){
		State state = new State();
		presenter.setState(state);
		presenter.draggedItem(1, 0);
		presenter.draggedItem(1, 3);
		presenter.handleDrop(2, 3);
		Mockito.verify(view).setPiece(1, 3, null);
		Mockito.verify(view).setPiece(2, 3, new Piece(Color.WHITE, PieceKind.PAWN));
		Mockito.verify(view).setWhoseTurn(BLACK);
	}
	
	@Test
	public void testAnotherGameResult(){
		State start = new State(BLACK, new Piece[State.ROWS][State.COLS], new boolean[2], new boolean[2],
				null, 0, null);
		
		start.setNumberOfMovesWithoutCaptureNorPawnMoved(99);
		start.setPiece(4, 6, new Piece(BLACK, KING));
		start.setPiece(6, 4, new Piece(BLACK, BISHOP));
		start.setPiece(6, 5, new Piece(BLACK, ROOK));
		start.setPiece(0, 5, new Piece(WHITE, KING));
		start.setPiece(2, 3, new Piece(WHITE, KNIGHT));
		start.setPiece(1, 7, new Piece(WHITE, ROOK));
		
		presenter.setState(start);
		presenter.draggedItem(6, 4);
		presenter.handleDrop(5, 3);
		
		Mockito.verify(view).setGameResult(
				new GameResult(null, GameResultReason.FIFTY_MOVE_RULE));
	}
	
}
