package org.kanwang.hw3;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.GameResultReason;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.State;

/**
 * Tests for the Presenter class.
 */
public class PresenterTest {
	Presenter presenter;
	Presenter.View view;

	@Before
	public void setup() {
		presenter = new Presenter();
		view = Mockito.mock(Presenter.View.class);
		presenter.setView(view);
	}


	@Test
	public void test1() {
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[7][6] = new Piece(Color.BLACK, PieceKind.ROOK);
		board[6][5] = new Piece(Color.BLACK, PieceKind.KNIGHT);
		board[6][1] = new Piece(Color.WHITE, PieceKind.ROOK);
		board[5][6] = new Piece(Color.WHITE, PieceKind.PAWN);
		board[4][5] = new Piece(Color.WHITE, PieceKind.KING);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0, null);

		presenter.setState(state);
		Mockito.verify(view).setWhoseTurn(Color.BLACK);
		Mockito.verify(view).setGameResult(null);
		Mockito.verify(view).setPiece(6, 5,
				new Piece(Color.BLACK, PieceKind.KNIGHT));
		Mockito.verify(view).setPiece(0, 0, null);
	}

	@Test
	public void test2() {
		Piece[][] board = new Piece[8][8];
		board[7][0] = new Piece(Color.BLACK, PieceKind.KING);
		board[0][0] = new Piece(Color.WHITE, PieceKind.KING);
		board[6][1] = new Piece(Color.WHITE, PieceKind.QUEEN);

		State state = new State(Color.WHITE, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0,
				new GameResult(Color.WHITE, GameResultReason.CHECKMATE));

		presenter.setState(state);
		Mockito.verify(view).setPiece(7, 0,
				new Piece(Color.BLACK, PieceKind.KING));
		Mockito.verify(view).setPiece(6, 1,
				new Piece(Color.WHITE, PieceKind.QUEEN));
		Mockito.verify(view).setWhoseTurn(Color.WHITE);
		Mockito.verify(view).setGameResult(
				new GameResult(Color.WHITE, GameResultReason.CHECKMATE));
	}

	@Test
	public void test3() {
		Piece[][] board = new Piece[8][8];
		board[7][0] = new Piece(Color.BLACK, PieceKind.KING);
		board[0][0] = new Piece(Color.WHITE, PieceKind.KING);
		board[1][1] = new Piece(Color.WHITE, PieceKind.QUEEN);

		State state = new State(Color.WHITE, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0,
				new GameResult(null, GameResultReason.FIFTY_MOVE_RULE));

		presenter.setState(state);
		Mockito.verify(view).setPiece(7, 0,
				new Piece(Color.BLACK, PieceKind.KING));
		Mockito.verify(view).setPiece(1, 1,
				new Piece(Color.WHITE, PieceKind.QUEEN));
		Mockito.verify(view).setWhoseTurn(Color.WHITE);
		Mockito.verify(view).setGameResult(
				new GameResult(null, GameResultReason.FIFTY_MOVE_RULE));

	}

	@Test
	public void test4() {
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[6][5] = new Piece(Color.WHITE, PieceKind.QUEEN);
		board[5][6] = new Piece(Color.WHITE, PieceKind.KING);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0,
				new GameResult(null, GameResultReason.STALEMATE));

		presenter.setState(state);
		Mockito.verify(view).setPiece(7, 7,
				new Piece(Color.BLACK, PieceKind.KING));
		Mockito.verify(view).setPiece(6, 5,
				new Piece(Color.WHITE, PieceKind.QUEEN));
		Mockito.verify(view).setWhoseTurn(Color.BLACK);
		Mockito.verify(view).setGameResult(
				new GameResult(null, GameResultReason.STALEMATE));
	}
	
	@Test
	public void test5() {
		
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[7][6] = new Piece(Color.BLACK, PieceKind.ROOK);
		board[6][5] = new Piece(Color.BLACK, PieceKind.KNIGHT);
		board[6][1] = new Piece(Color.WHITE, PieceKind.ROOK);
		board[5][6] = new Piece(Color.WHITE, PieceKind.PAWN);
		board[4][5] = new Piece(Color.WHITE, PieceKind.KING);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0, null);

		presenter.setState(state);
		presenter.selectPiece(0, 6);
		presenter.selectPiece(1, 5);

		Mockito.verify(view).setSelected(0, 6, true);
		Mockito.verify(view).setSelected(0, 6, false);
		Mockito.verify(view).setSelected(1, 5, true);
	}
	
	@Test
	public void test6() {
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[7][6] = new Piece(Color.BLACK, PieceKind.ROOK);
		board[6][5] = new Piece(Color.BLACK, PieceKind.KNIGHT);
		board[6][1] = new Piece(Color.WHITE, PieceKind.ROOK);
		board[5][6] = new Piece(Color.WHITE, PieceKind.PAWN);
		board[4][5] = new Piece(Color.WHITE, PieceKind.KING);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0, null);

		presenter.setState(state);
		presenter.selectPiece(0, 6);

		Mockito.verify(view).setSelected(0, 6, true);
		Mockito.verify(view).showEndOnBoard(1, 6, true);
		Mockito.verify(view).showEndOnBoard(2, 6, true);
		Mockito.verify(view).showEndOnBoard(0, 3, true);
	}
	
	@Test
	public void test7() {
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[7][6] = new Piece(Color.BLACK, PieceKind.ROOK);
		board[6][5] = new Piece(Color.BLACK, PieceKind.KNIGHT);
		board[6][1] = new Piece(Color.WHITE, PieceKind.ROOK);
		board[5][6] = new Piece(Color.WHITE, PieceKind.PAWN);
		board[4][5] = new Piece(Color.WHITE, PieceKind.KING);
		board[1][5] = new Piece(Color.BLACK, PieceKind.PAWN);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0, null);

		presenter.setState(state);
		presenter.selectPiece(6, 5);
		presenter.selectPiece(7, 5);

		Mockito.verify(view).setSelected(6, 5, true);
		Mockito.verify(view).showEndOnBoard(7, 5, true);
		Mockito.verify(view).showPromotionOnBoard(true);
	}
	
	@Test
	public void test8() {
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[7][6] = new Piece(Color.BLACK, PieceKind.ROOK);
		board[6][5] = new Piece(Color.BLACK, PieceKind.KNIGHT);
		board[6][1] = new Piece(Color.WHITE, PieceKind.ROOK);
		board[5][6] = new Piece(Color.WHITE, PieceKind.PAWN);
		board[4][5] = new Piece(Color.WHITE, PieceKind.KING);
		board[1][5] = new Piece(Color.BLACK, PieceKind.PAWN);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0, null);

		presenter.setState(state);
		presenter.selectPiece(6, 5);
		presenter.selectPiece(7, 5);
		
		presenter.handlePromotion(0, 1);
		Mockito.verify(view).setSelected(6, 5, false);
		Mockito.verify(view).setPiece(0, 5, new Piece(Color.BLACK, PieceKind.QUEEN));
	}
	
	
	@Test
	public void test9() {
		Piece[][] board = new Piece[8][8];
		board[7][7] = new Piece(Color.BLACK, PieceKind.KING);
		board[7][6] = new Piece(Color.BLACK, PieceKind.ROOK);
		board[6][5] = new Piece(Color.BLACK, PieceKind.KNIGHT);
		board[6][1] = new Piece(Color.WHITE, PieceKind.ROOK);
		board[5][6] = new Piece(Color.WHITE, PieceKind.PAWN);
		board[4][5] = new Piece(Color.WHITE, PieceKind.KING);
		board[1][5] = new Piece(Color.BLACK, PieceKind.PAWN);

		State state = new State(Color.BLACK, board, new boolean[] { false,
				false }, new boolean[] { false, false }, null, 0, null);

		presenter.setState(state);
		presenter.selectPiece(1, 5);
		Mockito.verify(view).showEndOnBoard(2, 7, true);
		Mockito.verify(view).showEndOnBoard(2, 3, true);
		Mockito.verify(view).showEndOnBoard(3, 6, true);
		
	}

	@Test
	public void testSetState10() {
		State state = new State();
		presenter.setState(state);
		Mockito.verify(view).setWhoseTurn(Color.WHITE);
		Mockito.verify(view).setPiece(0, 4,
				new Piece(Color.WHITE, PieceKind.KING));
		Mockito.verify(view).setPiece(5, 4, null);
		Mockito.verify(view).setGameResult(null);
	}
}