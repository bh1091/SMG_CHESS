package org.shitianren.hw3;

import java.util.Set;

import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.shitianren.hw2.StateChangerImpl;
import org.shitianren.hw2_5.StateExplorerImpl;
import org.shitianren.hw6.client.ChessGameService;
import org.shitianren.hw6.client.ChessGameServiceAsync;

import com.google.gwt.animation.client.Animation;
import com.google.gwt.appengine.channel.client.Channel;
import com.google.gwt.appengine.channel.client.ChannelError;
import com.google.gwt.appengine.channel.client.ChannelFactory;
import com.google.gwt.appengine.channel.client.ChannelFactoryImpl;
import com.google.gwt.appengine.channel.client.Socket;
import com.google.gwt.appengine.channel.client.SocketListener;
import com.google.gwt.core.shared.GWT;
import com.google.gwt.dom.client.AudioElement;
import com.google.gwt.dom.client.MediaElement;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.dom.client.HasDragOverHandlers;
import com.google.gwt.event.dom.client.HasDragStartHandlers;
import com.google.gwt.event.dom.client.HasDropHandlers;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.media.client.Audio;
import com.google.gwt.storage.client.Storage;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextBox;

public class Presenter implements ValueChangeHandler<String> {
	public interface View {
		/**
		 * Renders the piece at this position. If piece is null then the
		 * position is empty.
		 */
		void setPiece(int row, int col, Piece piece);

		/**
		 * Turns the highlighting on or off at this cell. Cells that can be
		 * clicked should be highlighted.
		 */
		void setHighlighted(int row, int col, boolean highlighted);

		/**
		 * Indicate whose turn it is.
		 */
		void setWhoseTurn(Color color);

		/**
		 * Indicate whether the game is in progress or over.
		 */
		void setGameResult(GameResult gameResult);

		/**
		 * get the image object for [row][col] to set event handler
		 */
		HasClickHandlers getImageClickHandler(int row, int col);

		/**
		 * clear all the highlighted in the board
		 */
		void clearHighlighted();

		/**
		 * set the gamestatus
		 */
		void setGameStatus(String status);

		/**
		 * get image1 from the promotionGrid
		 */
		HasClickHandlers getPromotionImage(int row, int col);

		/**
		 * set the promotion image
		 * 
		 * @param color
		 */
		void setPromotion(Color color);

		/**
		 * remove the promotion image
		 */
		void removePromotion();

		/**
		 * create restart button when the game is over
		 */
		void setRestartButton();

		/**
		 * get the restartButton
		 * 
		 * @return
		 */
		HasClickHandlers getRestartButton();

		/**
		 * remove the hightligted of promotion image when the user click on one
		 * piece to promote
		 */
		void removePromotionHighlishted();

		void setCaptureAudio(Audio audio);

		void setGameEndAudio(Audio audio);
		
		void setClickAudio(Audio audio);

		HasDragStartHandlers getImageDragStartHandlers(int row, int col);

		HasDragOverHandlers getImageDragOverHandlers(int row, int col);

		HasDropHandlers getImageDropHandlers(int row, int col);

		Image getImage(int row, int col);

		void removeRestartButton();

		HasClickHandlers getLoadButton();

		HasClickHandlers getSaveButton();

		ListBox getStorageList();

		TextBox getNameText();
		
		void setSaveStatus(String str);
		
		void setLoadStatus(String str);
		
		void setDraggable();
		void showConnectPanel();
		void hideConnectPanel();
		void showGamePanel();
		void hideGamePanel();
	}

	private View view;
	private State state;
	private StateChangerImpl stateChanger = new StateChangerImpl();
	private StateExplorerImpl stateExplorer = new StateExplorerImpl();
	private Position fromPosition = null;
	private Set<Move> currentPossible2Position = null;
	private boolean choosePromotion = false;
	private Audio captureAudio;
	private Audio gameEndAudio;
	private Audio clickAudio;
	private Storage storage = Storage.getLocalStorageIfSupported();
	private boolean doAnimation = true;
	public String userID;
	public Color userColor;
	public ChessGameServiceAsync chessGameService = GWT.create(ChessGameService.class);
	private Socket socket;
	public void initialize() {

		/*
		 * create channel and socket
		 */
		chessGameService.createChannel(new  AsyncCallback<String>(){

			@Override
			public void onFailure(Throwable caught) {
				Window.alert("Failure create channel");
			}

			@Override
			public void onSuccess(String result) {				
				/* 
				 * result is userID+"|"+color
				 */
				String returnedString = result;
				System.out.println("createChannel result:"+returnedString+" length:"+returnedString.length());
				returnedString.trim();
				String[] temp = returnedString.split("&");
				System.out.println("temp.length"+temp.length);
				userID = temp[0];
				String colorStr = temp[1];
				userColor = getUserColor(colorStr);
				System.out.println("userID:"+userID+"colorStr:"+colorStr);

				if(userColor==null)
					Window.alert("Unknown Color");
				ChannelFactory chaFactory = new ChannelFactoryImpl();
				Channel channel = chaFactory.createChannel(userID);
				Socket socket = channel.open(new SocketListener(){

					@Override
					public void onOpen() {
						/*
						 * call getReady to check whether the opponent is find,
						 * if it is found, the server will send message back which is dealt in onMessage
						 * only when the second user call getReady the server will send message to both users
						 */
						System.out.println("on open");

						chessGameService.getReady(new  AsyncCallback<String>(){

							@Override
							public void onFailure(Throwable caught) {								
							}

							@Override
							public void onSuccess(String result) {
								System.out.println("on get ready success"+result);
								String temp = result.trim();
								if(temp.equals("gameReady")){
									view.hideConnectPanel();
									//view.showGamePanel();
									initChessGame();									
								}
							}
							
						});
					}

					@Override
					public void onMessage(String message) {
						String stateMess = message;
						System.out.println("on message user:"+userColor.toString());
						System.out.println("message"+stateMess);

						if(stateMess.contains("gameReady")){
							System.out.println("inside ready");
							view.hideConnectPanel();
							//view.showGamePanel();
							initChessGame();
						}
						else{
							System.out.println("inside else");
							/*
							 * on message about state, update state and set state
							 */
							System.out.println("inside else:"+stateMess);
							String input = stateMess.trim();
							state = HistoryParser.history2State(input);
							System.out.println("after parser");
							setState(state);
							showPossibleStartPosition();
						}
					}

					@Override
					public void onError(ChannelError error) {
						System.out.println("on error"+error.getDescription());
						Window.alert("Error create SocketListener "+error.getDescription());
					}

					@Override
					public void onClose() {
						/*
						 * disconnect 
						 */
						Window.alert("socket on close");
					}
					
				});
				
			}
		});
	}
	/*
	private void closeSocket(){
		socket.close();
	}
	*/
	public void initChessGame(){
		/*
		 * initialize chess game
		 */
		captureAudio = createCaptureAudio();
		view.setCaptureAudio(captureAudio);
		gameEndAudio = createGameEndAudio();
		view.setGameEndAudio(gameEndAudio);
		clickAudio = createClickAudio();
		view.setClickAudio(clickAudio);
		doAnimation = true;
		if (History.getToken().isEmpty())
			state = new State();
		else {
			state = HistoryParser.history2State(History.getToken());
		}

		setState(state);
		showPossibleStartPosition();

		addRestartButtonListener();
		view.setRestartButton();

		addSaveButtonListener();
		view.setSaveStatus("Type name to save game: ");
		addLoadButtonListener();
		view.setLoadStatus("Choose game to load: ");
		addStorageListItems();

		History.addValueChangeHandler(this);

		History.newItem(HistoryParser.state2History(state), false);
		showPossibleStartPosition();
		
		
	}
	
	public void setView(View view) {
		this.view = view;
	}

	public void setStateVar(State state) {
		this.state = state;
	}

	public void setState(State state) {
		System.out.println("set state to user:"+userColor.toString());
		System.out.println("state is:"+state.toString());
		if (state.getGameResult() == null)
			view.setWhoseTurn(state.getTurn());
		else
			view.setGameResult(state.getGameResult());

		for (int r = 0; r < 8; r++) {
			for (int c = 0; c < 8; c++) {
				view.setPiece(r, c, state.getPiece(r, c));
			}
		}
		if (state.getGameResult() != null) {
			view.setRestartButton();
		}
		view.setDraggable();
		addImageHandlers();
	}

	private void addDragStartHandlers() {
		if (state == null)
			return;
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final int i = row;
				final int j = col;
				view.getImageDragStartHandlers(row, col).addDragStartHandler(
						new DragStartHandler() {
							@Override
							public void onDragStart(DragStartEvent event) {
								dragStart(i, j);
							}
						});
			}
		}
	}

	private void addDropHandler() {
		addDragOverHandler();
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final int i = row;
				final int j = col;
				view.getImageDropHandlers(row, col).addDropHandler(
						new DropHandler() {

							@Override
							public void onDrop(DropEvent event) {
								event.preventDefault();
								dropOn(i, j);
							}
						});
			}
		}
	}

	private void dropOn(int row, int col) {
		/*
		 * deal with not user turn
		 */
		if(!state.getTurn().equals(userColor)){
			fromPosition = null;
			currentPossible2Position = null;
			tempCurrentPosition = null;
			return;
		}
		
		dealDropMove(row, col);
	}

	private void dealDropMove(int row, int col) {
		
		
		if (fromPosition == null)
			return;
		if (state == null)
			return;

		
		tempCurrentPosition = new Position(row, col);
		currentPossible2Position = stateExplorer.getPossibleMovesFromPosition(
				state, fromPosition);

		if (fromPosition.getRow() == 6
				&& state.getPiece(fromPosition).equals(
						new Piece(Color.WHITE, PieceKind.PAWN))) {
			if (currentPossible2Position.contains(new Move(fromPosition,
					tempCurrentPosition, PieceKind.QUEEN))) {
				view.setPromotion(Color.WHITE);
				addPromotionListener();
				return;
			}
		} else if (fromPosition.getRow() == 1
				&& state.getPiece(fromPosition).equals(
						new Piece(Color.BLACK, PieceKind.PAWN))) {
			if (currentPossible2Position.contains(new Move(fromPosition,
					tempCurrentPosition, PieceKind.QUEEN))) {
				view.setPromotion(Color.BLACK);
				addPromotionListener();
				return;
			}
		} else {
			doAnimation = false;
			movePieceInBoard(tempCurrentPosition, null);
		}
	}

	private void addDragOverHandler() {
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				view.getImageDragOverHandlers(row, col).addDragOverHandler(
						new DragOverHandler() {
							@Override
							public void onDragOver(DragOverEvent event) {
							}
						});
			}
		}
	}

	private void dragStart(int row, int col) {
		fromPosition = new Position(row, col);
		Set<Move> possibleDragMove = stateExplorer
				.getPossibleMovesFromPosition(state, fromPosition);
		view.clearHighlighted();

		for (Move p : possibleDragMove) {
			view.setHighlighted(p.getTo().getRow(), p.getTo().getCol(), true);
		}
	}

	private void addRestartButtonListener() {
		view.getRestartButton().addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				view.setGameStatus("restart game");
				restartTheGame();
			}

		});
	}

	private void restartTheGame() {

		currentPossible2Position = null;
		fromPosition = null;
		promotionTo = null;
		tempCurrentPosition = null;
		choosePromotion = false;
		doAnimation = true;
		state = new State();
		History.newItem(HistoryParser.state2History(state), false);
		view.setGameStatus("restart game color: " + state.getTurn());
		setState(state);
		showPossibleStartPosition();
	}
	
	
	public void addImageHandlers(){
		addDragStartHandlers();
		addDropHandler();
		
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final int i = row;
				final int j = col;
				view.getImageClickHandler(row, col).addClickHandler(
						new ClickHandler() {
							@Override
							public void onClick(ClickEvent event) {
								clickOn(i, j);
							}
						});
			}
		}	
	}
	

	private void addStorageListItems() {
		for (int i = 0; i < storage.getLength(); i++) {
			view.getStorageList().addItem(storage.key(i));
		}
	}

	private void addLoadButtonListener() {
		view.getLoadButton().addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				loadStorage();
			}
		});
	}

	private void addSaveButtonListener() {
		view.getSaveButton().addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				saveStorage();
			}

		});
	}

	private void saveStorage() {
		if (storage != null) {
			String name = view.getNameText().getText();
			if (name != null && name != "") {
				boolean flag = false;
				for (int i = 0; i < storage.getLength(); i++) {
					if(storage.key(i).equals(name)){
						flag = true;
						break;
					}
				}
				if(flag){
					view.setSaveStatus("Name already exits, please type in another name to save: ");
				}
				else{
					String storedState = HistoryParser.state2History(state);
					storage.setItem(name, storedState);
					view.getStorageList().addItem(name);
					view.setSaveStatus("Type name to save game: ");
				}
			}
			else{
				view.setSaveStatus("There is no name. Type in a name to save game: ");
			}
		}
	}

	private void loadStorage() {
		if (storage != null) {
			ListBox temp = view.getStorageList();
			String name = temp.getItemText(temp.getSelectedIndex());
			if (name != null && name != "") {
				String loadState = storage.getItem(name);
				state = HistoryParser.history2State(loadState);
				setState(state);
				showPossibleStartPosition();
				History.newItem(HistoryParser.state2History(state), false);
			}
		}
	}

	PieceKind promotionTo = null;
	Set<Move> possibleMoveFromPosition = null;

	Position tempCurrentPosition = null;

	public void clickOn(int row, int col) {
		/*
		 * deal with not user turn
		 */
		if(!state.getTurn().equals(userColor)){
			tempCurrentPosition = null;
			fromPosition=null;
			currentPossible2Position = null;
			return;
		}
		clickAudio.play();
		tempCurrentPosition = new Position(row, col);
		Set<Position> possibleStartPosition = stateExplorer
				.getPossibleStartPositions(state);

		if (possibleStartPosition.contains(tempCurrentPosition)) {
			possibleMoveFromPosition = stateExplorer
					.getPossibleMovesFromPosition(state, tempCurrentPosition);
			view.clearHighlighted();
			for (Move p : possibleMoveFromPosition) {
				view.setHighlighted(p.getTo().getRow(), p.getTo().getCol(),
						true);
			}
			currentPossible2Position = possibleMoveFromPosition;
			fromPosition = tempCurrentPosition;
			promotionTo = null;
			tempCurrentPosition = null;
			return;
		} else if (!possibleStartPosition.contains(tempCurrentPosition)
				&& (currentPossible2Position == null)) {
			fromPosition = null;
			promotionTo = null;
			tempCurrentPosition = null;
			showPossibleStartPosition();
			choosePromotion = false;
			view.removePromotion();
			return;

		} else if (!possibleStartPosition.contains(tempCurrentPosition)
				&& currentPossible2Position != null) {

			if (fromPosition.getRow() == 6
					&& state.getPiece(fromPosition).equals(
							new Piece(Color.WHITE, PieceKind.PAWN))) {
				if (currentPossible2Position.contains(new Move(fromPosition,
						tempCurrentPosition, PieceKind.QUEEN))) {
					view.setPromotion(Color.WHITE);
					addPromotionListener();
				}
			} else if (fromPosition.getRow() == 1
					&& state.getPiece(fromPosition).equals(
							new Piece(Color.BLACK, PieceKind.PAWN))) {
				if (currentPossible2Position.contains(new Move(fromPosition,
						tempCurrentPosition, PieceKind.QUEEN))) {
					view.setPromotion(Color.BLACK);
					addPromotionListener();
				}
			}

			else {
				movePieceInBoard(tempCurrentPosition, null);
			}
		}
	}

	public void promotionClickOn(int row, int col) {

		if (row == 0 && col == 0)
			promotionTo = PieceKind.BISHOP;
		else if (row == 0 && col == 1)
			promotionTo = PieceKind.KNIGHT;
		else if (row == 1 && col == 0)
			promotionTo = PieceKind.QUEEN;
		else if (row == 1 && col == 1)
			promotionTo = PieceKind.ROOK;

		view.removePromotionHighlishted();
		movePieceInBoard(tempCurrentPosition, promotionTo);
	}

	public void movePieceInBoard(Position tempCurrentPosition,
			PieceKind promotionKind) {

		if (currentPossible2Position.contains(new Move(fromPosition,
				tempCurrentPosition, promotionKind))) {

			if (state.getPiece(tempCurrentPosition) != null
					|| (state.getEnpassantPosition() != null && tempCurrentPosition
							.equals(state.getEnpassantPosition()))) {
				captureAudio.play();
			}

			stateChanger.makeMove(state, new Move(fromPosition,
					tempCurrentPosition, promotionKind));
			/*
			 * send state to server
			 */
			chessGameService.sendState(HistoryParser.state2History(state), new  AsyncCallback<String>(){
				@Override
				public void onFailure(Throwable caught) {
				}

				@Override
				public void onSuccess(String result) {
				}
				
			});
			
			if(doAnimation){
			Image from = view.getImage(fromPosition.getRow(),
					fromPosition.getCol());
			Image to = view.getImage(tempCurrentPosition.getRow(),
					tempCurrentPosition.getCol());

			int fromTop = from.getElement().getAbsoluteTop();
			int fromLeft = from.getElement().getAbsoluteLeft();
			int toTop = to.getElement().getAbsoluteTop();
			int toLeft = to.getElement().getAbsoluteLeft();

			MakeAnimation animation = new MakeAnimation(fromTop, fromLeft,
					toTop, toLeft, from);
			animation.run(1000);
			}
			else{
				//setState(state);
				showPossibleStartPosition();
				History.newItem(HistoryParser.state2History(state), false);
				doAnimation = true;
			}
			
			if (state.getGameResult() != null)
				gameEndAudio.play();

			fromPosition = null;
			currentPossible2Position = null;
			tempCurrentPosition = null;
			showPossibleStartPosition();
			view.removePromotion();
			return;

		} else {
			fromPosition = null;
			currentPossible2Position = null;
			tempCurrentPosition = null;
			showPossibleStartPosition();
			view.removePromotion();
			return;
		}
	}

	public void showPossibleStartPosition() {
		view.clearHighlighted();
		stateExplorer = new StateExplorerImpl();
		Set<Position> possibleStartPosition = stateExplorer
				.getPossibleStartPositions(state);
		if (!possibleStartPosition.isEmpty()) {
			for (Position start : possibleStartPosition) {
				view.setHighlighted(start.getRow(), start.getCol(), true);
			}
		}

	}

	@Override
	public void onValueChange(ValueChangeEvent<String> event) {
		if (event.getValue().isEmpty())
			state = new State();
		else {
			String historyToken = event.getValue();

			String temp = historyToken.trim();
			state = HistoryParser.history2State(temp);
		}
		setState(state);
		currentPossible2Position = null;
		fromPosition = null;
		promotionTo = null;
		if (choosePromotion)
			view.removePromotion();
		choosePromotion = false;
		showPossibleStartPosition();

	}

	private void addPromotionListener() {
		for (int row = 0; row < 2; row++) {
			for (int col = 0; col < 2; col++) {
				final int i = row;
				final int j = col;
				view.getPromotionImage(row, col).addClickHandler(
						new ClickHandler() {
							@Override
							public void onClick(ClickEvent event) {
								promotionClickOn(i, j);
							}
						});
			}
		}
	}
	
	
	private Color getUserColor(String colorStr){
		if(colorStr.equals("W")){
			return Color.WHITE;
		}
		else if(colorStr.equals("B")){
			return Color.BLACK;
		}
		else
			return null;
	}
	

	private Audio createCaptureAudio() {
		Audio audio = Audio.createIfSupported();
		if (audio == null) {
			return null;
		}
		if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_MP3))) {
			audio.setSrc("shitianrenAudio/captureAudio.mp3");
		} else if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_WAV))) {
			audio.setSrc("shitianrenAudio/captureAudio.wav");
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_MP3))) {
			audio.setSrc("shitianrenAudio/captureAudio.mp3");
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_WAV))) {
			audio.setSrc("shitianrenAudio/captureAudio.wav");
		}
		audio.load();
		return audio;

	}
	private Audio createClickAudio() {
		Audio audio = Audio.createIfSupported();
		if (audio == null) {
			return null;
		}
		if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_MP3))) {
			audio.setSrc("shitianrenAudio/button_click.mp3");
		} else if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_WAV))) {
			audio.setSrc("shitianrenAudio/button_click.wav");
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_MP3))) {
			audio.setSrc("shitianrenAudio/button_click.mp3");
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_WAV))) {
			audio.setSrc("shitianrenAudio/button_click.wav");
		}
		audio.load();
		return audio;
	}
	private Audio createGameEndAudio() {
		Audio audio = Audio.createIfSupported();
		if (audio == null)
			return null;
		else {
			if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
					.canPlayType(AudioElement.TYPE_MP3))) {
				audio.setSrc("shitianrenAudio/gameend.mp3");
			} else if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
					.canPlayType(AudioElement.TYPE_WAV))) {
				audio.setSrc("shitianrenAudio/gameend.wav");
			} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
					.canPlayType(AudioElement.TYPE_MP3))) {
				audio.setSrc("shitianrenAudio/gameend.mp3");
			} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
					.canPlayType(AudioElement.TYPE_WAV))) {
				audio.setSrc("shitianrenAudio/gameend.wav");
			}
			audio.load();
			return audio;
		}
	}

	class MakeAnimation extends Animation {
		private int fromTop;
		private int fromLeft;
		private int toTop;
		private int toLeft;
		private final Image fromItem;

		public MakeAnimation(int fromTop, int fromLeft, int toTop, int toLeft,
				Image fromItem) {
			this.fromLeft = fromLeft;
			this.fromTop = fromTop;
			this.toLeft = toLeft;
			this.toTop = toTop;
			this.fromItem = fromItem;
		}

		@Override
		protected void onUpdate(double progress) {
			double x = fromLeft + ((toLeft - fromLeft) * progress);
			double y = fromTop + ((toTop - fromTop) * progress);

			fromItem.getElement().getStyle()
					.setProperty("position", "absolute");
			fromItem.getElement().getStyle().setProperty("top", y + "px");
			fromItem.getElement().getStyle().setProperty("left", x + "px");
		}

		protected void onComplete() {
			fromItem.getElement().getStyle()
					.setProperty("position", "absolute");
			fromItem.getElement().getStyle().setProperty("top", fromTop + "px");
			fromItem.getElement().getStyle()
					.setProperty("left", fromLeft + "px");
			
			//setState(state);
			showPossibleStartPosition();
			History.newItem(HistoryParser.state2History(state), false);
		}

	}

}
