package org.longjuntan.hw3;

import java.util.List;

import org.longjuntan.hw3.Presenter.View;
import org.longjuntan.hw5.MoveAnimation;
import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.media.client.Audio;
import com.google.gwt.storage.client.Storage;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.Widget;

public class Graphics extends Composite implements View {
	private static GameImages gameImages = GWT.create(GameImages.class);
	private static GraphicsUiBinder uiBinder = GWT
			.create(GraphicsUiBinder.class);

	interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
	}
//
//	@UiField 
//	VerticalPanel loginPanel;
//	@UiField
//	Anchor signInLink = new Anchor("Sign In");
	@UiField
	GameCss css;
	@UiField
	Label gameStatus;
	@UiField
	Label colorStatus;	
	@UiField
	Grid gameGrid;
	@UiField
	TextBox matchBox;
	@UiField
	Button matchButton;
	@UiField
	ListBox matchList;
	@UiField
	Button autoMatch;
	@UiField
	Button restart;
	@UiField
	Button delete;
//	@UiField
//	Button save;
//	@UiField
//	Button load;
	@UiField
	Grid promoteGrid;

	private final int DURATION = 2000;

	private Image[][] board = new Image[8][8];
	private Presenter presenter;
	private Image[] promote = new Image[4];
	private Audio move;
	private Audio gameover;
	private Storage storage = Storage.getLocalStorageIfSupported();


	public Graphics() {
		initWidget(uiBinder.createAndBindUi(this));

		move = GameAudioFactory.createAudio("move");
		gameover = GameAudioFactory.createAudio("gameover");

		gameGrid.resize(8, 8);
		gameGrid.setCellPadding(0);
		gameGrid.setCellSpacing(0);
		gameGrid.setBorderWidth(0);
		promoteGrid.resize(0, 0);

//		if (storage == null) {
//			load.setVisible(false);
//			save.setVisible(false);
//		}
//		
	

		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final Image image = new Image();
				board[row][col] = image;

				image.setWidth("100%");
				image.setResource(gameImages.blank());
				image.addDragOverHandler(new DragOverHandler() {

					@Override
					public void onDragOver(DragOverEvent event) {
						image.getElement().getStyle().clearBackgroundColor();
					}
				});
				if (row % 2 == 0 && col % 2 == 1 || row % 2 == 1
						&& col % 2 == 0) {
					gameGrid.getCellFormatter().addStyleName(row, col,
							css.blacktile());

				} else {
					gameGrid.getCellFormatter().addStyleName(row, col,
							css.whitetile());
				}

				final int i = State.ROWS-1-row;
				final int j = col;

				image.addClickHandler(new ClickHandler() {
					@Override
					public void onClick(ClickEvent event) {
						for (int m = 0; m <= 50; m++) {
							image.setPixelSize(m, m);
						}
						promoteGrid.resize(0, 0);
						presenter.selectCell(i, j);
					}
				});

				gameGrid.setWidget(row, col, image);
			}
		}

		restart.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				presenter.init();
				History.newItem(presenter.getHistory());
			}
		});

/*		save.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				if (storage != null) {
					storage.setItem("state", presenter.getHistory());
				}
			}
		});

		load.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				if (storage != null) {
					String value = storage.getItem("state");
					presenter.setState(Utils.setStateByHistory(value));
				}
			}
		});*/

		History.addValueChangeHandler(new ValueChangeHandler<String>() {
			@Override
			public void onValueChange(ValueChangeEvent<String> event) {
				String token = event.getValue();
				if (token.isEmpty()) {
					presenter.setState(new State());
				} else {
					presenter.setState(Utils.setStateByHistory(token));
				}
			}
		});
		
		matchButton.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				final String opponent = matchBox.getText();
				presenter.createMatch(opponent);

			}
		});
		
		matchList.addChangeHandler(new ChangeHandler() {

			@Override
			public void onChange(ChangeEvent event) {
				
				presenter.load(getMatchFromList());

		/*		if (view.getSelectedMatch().isEmpty()) {
					setState(null);
				} else {
					loadMatch(view.getSelectedMatch());
				}*/
			}
		});
	}
	
	public String getMatchFromList(){
		return matchList.getItemText(matchList.getSelectedIndex());
	}

	@Override
	public void setPiece(int row, int col, Piece piece) {
		final int i = row;
		final int j = col;
		final Piece p = piece;
		if (piece == null) {
			board[row][col].setResource(gameImages.blank());
			return;
		}
		final Image image = board[row][col];
		image.getElement().setDraggable(Element.DRAGGABLE_TRUE);

		// Add a DragStartHandler.
		image.addDragStartHandler(new DragStartHandler() {
			public void onDragStart(DragStartEvent event) {
				promoteGrid.resize(0, 0);
				presenter.selectCell(State.ROWS-1-i, j);
				// Required: set data for the event.
				event.setData("text", p.toString());

				int offsetX = event.getNativeEvent().getClientX()
						- image.getAbsoluteLeft();
				int offsetY = event.getNativeEvent().getClientY()
						- image.getAbsoluteTop();

				Element e = image.getElement();
				// Optional: show a copy of the widget under cursor.
				event.getDataTransfer().setDragImage(e, offsetX, offsetY);
			}
		});

		if (piece.getColor().isWhite()) {
			switch (piece.getKind()) {
			case PAWN:
				image.setResource(gameImages.whitePawn());
				break;
			case BISHOP:
				image.setResource(gameImages.whiteBishop());
				break;
			case KING:
				image.setResource(gameImages.whiteKing());
				break;
			case KNIGHT:
				image.setResource(gameImages.whiteKnight());
				break;
			case QUEEN:
				image.setResource(gameImages.whiteQueen());
				break;
			case ROOK:
				image.setResource(gameImages.whiteRook());
				break;
			default:
				break;
			}
		} else {
			switch (piece.getKind()) {
			case PAWN:
				image.setResource(gameImages.blackPawn());
				break;
			case BISHOP:
				image.setResource(gameImages.blackBishop());
				break;
			case KING:
				image.setResource(gameImages.blackKing());
				break;
			case KNIGHT:
				image.setResource(gameImages.blackKnight());
				break;
			case QUEEN:
				image.setResource(gameImages.blackQueen());
				break;
			case ROOK:
				image.setResource(gameImages.blackRook());
				break;
			default:
				break;
			}
		}
	}

	/**
	 * Set highlight for the selected position
	 */
	@Override
	public void setHighlighted(int row, int col, boolean highlighted) {
		Element element = board[State.ROWS-1-row][col].getElement();
		if (highlighted) {
			element.setClassName(css.highlighted());
		} else {
			element.removeClassName(css.highlighted());
		}
	}

	/**
	 * Highlight the possible moves for selected position
	 */
	@Override
	public void setPossibleMoves(Position p, boolean possible) {
		final int row = State.ROWS - 1 - p.getRow();
		final int col = p.getCol();
		final Image image = board[row][col];

		image.addDropHandler(new DropHandler() {
			@Override
			public void onDrop(DropEvent event) {
				// Prevent the native text drop.
				event.preventDefault();
				presenter.selectCell(State.ROWS-1-row, col);
			}
		});

		Element element = board[row][col].getElement();
		if (possible) {
			element.setClassName(css.possible());
		} else {
			element.removeClassName(css.possible());
		}
	}

//	@Override
//	public void setWhoseTurn(Color color) {
//		gameStatus.setText((color.isWhite() ? "White" : "Black") + "'s turn!");
//	}
	@Override
	public void setColor(Color color) {
		colorStatus.setText("You are "+ (color.isWhite() ? "White" : "Black") + "!");
	}
	
	@Override
	public void setWhoseTurn(Boolean bool) {
		gameStatus.setText((bool? "Your" : "Other's") + " turn!");
	}

	@Override
	public void setGameResult(GameResult gameResult) {
		if (gameResult != null) {
			gameover.play();
			if (gameResult.getWinner() == null) {
				gameStatus.setText("Draw by "
						+ gameResult.getGameResultReason() + "!");
			} else {
				gameStatus.setText((gameResult.getWinner().isWhite() ? "White"
						: "Black")
						+ " win by "
						+ gameResult.getGameResultReason() + "!");
			}
		}
	}

	@Override
	public void updateHistory() {
		History.newItem(presenter.getHistory());
		move.play();
	}

	@Override
	public void animation(Position p) {
		Image i = board[State.ROWS-1-p.getRow()][p.getCol()];
		MoveAnimation ma = new MoveAnimation(i);
		ma.run(DURATION);
	}

	public void setHistory(String state) {
		presenter.setState(Utils.setStateByHistory(state));
	}

	/**
	 * Show the promotion grid
	 */
	@Override
	public void setPromotion(Color c) {
		promoteGrid.resize(2, 4);
		promoteGrid.setText(0, 0, "Promote");
		promoteGrid.setText(0, 1, "to:");

		int col = 0;
		for (final PieceKind k : new PieceKind[] { PieceKind.QUEEN,
				PieceKind.BISHOP, PieceKind.KNIGHT, PieceKind.ROOK }) {
			final Image image = new Image();
			promote[col] = image;
			image.setWidth("100%");
			if (c == Color.BLACK) {
				switch (k) {
				case QUEEN:
					image.setResource(gameImages.blackQueen());
					break;
				case KNIGHT:
					image.setResource(gameImages.blackKnight());
					break;
				case BISHOP:
					image.setResource(gameImages.blackBishop());
					break;
				case ROOK:
					image.setResource(gameImages.blackRook());
					break;
				default:
					image.setResource(gameImages.blank());
					break;
				}
			} else {
				switch (k) {
				case QUEEN:
					image.setResource(gameImages.whiteQueen());
					break;
				case KNIGHT:
					image.setResource(gameImages.whiteKnight());
					break;
				case BISHOP:
					image.setResource(gameImages.whiteBishop());
					break;
				case ROOK:
					image.setResource(gameImages.whiteRook());
					break;
				default:
					image.setResource(gameImages.blank());
					break;
				}
			}

			/**
			 * Set click handler for promotion selection
			 */
			image.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					presenter.setPromotionKind(k);
					presenter.promote();
					promoteGrid.resize(0, 0);
				}
			});
			promoteGrid.setWidget(1, col, image);
			col++;
		}
	}

	public void setPresenter(Presenter p) {
		this.presenter = p;
	}

	@Override
	public void setMatchList(List<String> list) {
		
		matchList.clear();
		
		
		for(String s:list){
			String[] entries = s.split(">");
			matchList.addItem(entries[1], entries[0]);
		}
		// TODO Auto-generated method stub		
	}
	

}
