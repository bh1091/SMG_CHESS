package org.wenjiechen.hw3;

import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.State;

import org.wenjiechen.hw3.Presenter.View;
import org.wenjiechen.hw5.FadeAnimation;
import org.wenjiechen.hw5.ResizeAnimation;
import org.wenjiechen.hw5.SlowMoveAnimation;
import org.wenjiechen.hw6.client.ChessGameService;
import org.wenjiechen.hw6.client.ChessGameServiceAsync;

import com.google.gwt.appengine.channel.client.Channel;
import com.google.gwt.appengine.channel.client.ChannelError;
import com.google.gwt.appengine.channel.client.ChannelFactoryImpl;
import com.google.gwt.appengine.channel.client.Socket;
import com.google.gwt.appengine.channel.client.SocketListener;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.dom.client.HasAllDragAndDropHandlers;
import com.google.gwt.event.dom.client.HasChangeHandlers;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.logical.shared.CloseEvent;
import com.google.gwt.event.logical.shared.CloseHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.media.client.Audio;
import com.google.gwt.storage.client.Storage;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

public class Graphics extends Composite implements View {
	private static GameImages gameImages = GWT.create(GameImages.class);
	private static GraphicsUiBinder uiBinder = GWT.create(GraphicsUiBinder.class);
	private static ChessGameServiceAsync CGService = GWT.create(ChessGameService.class);

	interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
	}

	@UiField
	GameCss css;
	@UiField
	Label gameStatus;
	@UiField
	Label gameTurn;
	@UiField
	Label gameResult;
	@UiField
	Label promotionPromt;
	@UiField
	Grid gameGrid;
	@UiField
	Grid promotionGrid;
//	@UiField
//	Button save;
//	@UiField
//	Button load;
//	@UiField
//	Button restart;
	@UiField
	static VerticalPanel boardPanel;
	
	@UiField
	Label userStatus;
	@UiField
	Label opponentStatus;
	@UiField
	Anchor logOutLink;
	@UiField
	Button Match;
	@UiField
	Button DeleteMatch;
	
	//hw7
	@UiField
	ListBox matchList;
	@UiField
	TextBox inputEmail;
	@UiField
	Button emailMatch;//invite button
	
	private Image[][] board = new Image[8][8];
	private Image[] promotionImage = new Image[4];
	private Presenter presenter;
	private Audio dropPiece = creatDropAudio();

	private Socket socket;
	private SocketListener socketListener = null;
	
	private AsyncCallback<Void> nullCallback = new AsyncCallback<Void>() {
		@Override
		public void onFailure(Throwable caught){}
		
		@Override
		public void onSuccess(Void result){}		
	};	
	
	public Graphics() {
		initWidget(uiBinder.createAndBindUi(this));

		gameGrid.resize(8, 8);
		gameGrid.setCellPadding(0);
		gameGrid.setCellSpacing(0);
		gameGrid.setBorderWidth(0);
		gameStatus.setText("Game Start!");
		gameTurn.setText("WHITE's Turn");
		
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final Image image = new Image();
				board[row][col] = image;
				image.setWidth("100%");
				final int r = row;
				final int c = col;
				image.getElement().setDraggable(Element.DRAGGABLE_TRUE);
				image.addClickHandler(new ClickHandler() {
					@Override
					public void onClick(ClickEvent event) {
						presenter.dealWithClick(r,c);
					}
				});
				
				if (row % 2 == 0 && col % 2 == 1 || row % 2 == 1
						&& col % 2 == 0) {
					image.setResource(gameImages.blackTile());
				} else {
					image.setResource(gameImages.whiteTile());
				}
				gameGrid.setWidget(row, col, image);
			}
		}
		
		promotionGrid.resize(1, 4);
		promotionGrid.setCellPadding(0);
		promotionGrid.setCellSpacing(0);
		promotionGrid.setBorderWidth(0);

		for (int i = 0; i < 4; ++i) {
			final Image image = new Image();
			promotionImage[i] = image;
			image.setWidth("100%");
			final int pos = i;
			image.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					presenter.getPromotionKind(pos);
				}
			});
			image.setResource(gameImages.whiteTile());
			promotionGrid.setWidget(0, i, image);
		}// for
		
		AsyncCallback<String> connectCallback = new AsyncCallback<String>() {
			@Override
			public void onFailure(Throwable caught) {
				Window.alert("Error: Cannot log in server!");
			}
			
			@Override
			public void onSuccess(String result) {
//				System.out.println("onSuccess() result" + result );
				String[] tokenAndPlayerInfo = result.split(">");
				String token = tokenAndPlayerInfo[0];
				if (token != null) {
					Channel channel = new ChannelFactoryImpl().createChannel(token);
					socket = channel.open(socketListener);
				}
				presenter.parseMessageForLoginPlayer(tokenAndPlayerInfo[1]);
			}
		};		
		
		CGService.creatChannelForLoggedInUser(connectCallback);
		
//		CGService.getLoginPlayerInfo(nullCallback);
		
		Match.addClickHandler(new ClickHandler(){
		@Override
				public void onClick(ClickEvent event) {
			CGService.matchUsers(nullCallback);
		}
	});
		
		logOutLink.addClickHandler(new ClickHandler(){
			@Override
			public void onClick(ClickEvent event){
				CGService.deleteCurrentUser(nullCallback);
				CGService.removeUserFromWaitinglist(nullCallback);
				Window.alert("remove user from waiting list");
				socket.close();
			}
		});
		
		DeleteMatch.addClickHandler(new ClickHandler(){
			@Override
			public void onClick(ClickEvent event){
			   CGService.deleteCurrentUser(nullCallback);
			   System.out.println("deleteMatch()");
			}
		});

		emailMatch.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				String email = inputEmail.getText();
				CGService.emailMatch(email,new AsyncCallback<Void>() {
					@Override
					public void onFailure(Throwable caught) {
						Window.alert("Error: Cannot input email invite player!");
					}

					@Override
					public void onSuccess(Void result) {
						presenter.updateMatchList();
					}
				});
			}

		});
	}
	
	public void setPresenter(Presenter presenter){
		this.presenter = presenter;
	}
	
	@Override
	public void setPiece(int row, int col, Piece piece) {
		
		if (piece != null) {
			switch (piece.getKind()) {
			case KING:
				if (piece.getColor() == Color.WHITE) {
					board[row][col].setResource(gameImages.whiteKing());
				} else {
					board[row][col].setResource(gameImages.blackKing());
				}
				break;
			case ROOK:
				if (piece.getColor() == Color.WHITE) {
					board[row][col].setResource(gameImages.whiteRook());
				} else {
					board[row][col].setResource(gameImages.blackRook());
				}
				break;
			case BISHOP:
				if (piece.getColor() == Color.WHITE) {
					board[row][col].setResource(gameImages.whiteBishop());
				} else {
					board[row][col].setResource(gameImages.blackBishop());
				}
				break;
			case KNIGHT:
				if (piece.getColor() == Color.WHITE) {
					board[row][col].setResource(gameImages.whiteKnight());
				} else {
					board[row][col].setResource(gameImages.blackKnight());
				}
				break;
			case QUEEN:
				if (piece.getColor() == Color.WHITE) {
					board[row][col].setResource(gameImages.whiteQueen());
				} else {
					board[row][col].setResource(gameImages.blackQueen());
				}
				break;
			case PAWN:
				if (piece.getColor() == Color.WHITE) {
					board[row][col].setResource(gameImages.whitePawn());
				} else {
					board[row][col].setResource(gameImages.blackPawn());
				}
				break;
			}// switch
		}// if
		else {
			if (row % 2 == 0 && col % 2 == 1 || row % 2 == 1 && col % 2 == 0) {
				board[row][col].setResource(gameImages.blackTile());
			} else {
				board[row][col].setResource(gameImages.whiteTile());
			}
		}// else
	}

	@Override
	public HasAllDragAndDropHandlers addDnDListener(int row, int col){
		return board[row][col];
	}
	
	@Override
	public void setHighlighted(int row, int col, boolean highlighted) {
		Element element = board[row][col].getElement();
		if (highlighted) {
			element.setClassName(css.highlighted());
		} else {
			element.removeClassName(css.highlighted());
		}		
	}

	@Override
	public void setLastMove(int row, int col, boolean lastmove) {
		Element elem = board[row][col].getElement();
		if (lastmove) {
			elem.setClassName(css.lastmove());
		} else {
			elem.removeClassName(css.lastmove());
		}
	}

	@Override
	public void setWhoseTurn(Color color) {
		if (color != null) {
			if (color == Color.WHITE) {
				gameTurn.setText("WHITE's turn");
			} else {
				gameTurn.setText("BLACK's turn");
			}
		}
	}

	@Override
	public void setGameResult(GameResult gameResult) {
		if (gameResult != null) {
			this.gameResult.setText("Game is Over. Winner is " + gameResult.getWinner() + ", reason: " + gameResult.getGameResultReason());
		}
	}

	@Override
	public void setPromotionChoice(Color color) {
		promotionPromt.setText("You must first choose a piece kind for promotion");
//		gameGrid.setWidget(2, 3, promotionGrid);
		promotionGrid.setVisible(true);

		if (color == Color.WHITE) {
			promotionImage[0].setResource(gameImages.whiteBishop());
			promotionImage[1].setResource(gameImages.whiteKnight());
			promotionImage[2].setResource(gameImages.whiteRook());
			promotionImage[3].setResource(gameImages.whiteQueen());
		} else {
			promotionImage[0].setResource(gameImages.blackBishop());
			promotionImage[1].setResource(gameImages.blackKnight());
			promotionImage[2].setResource(gameImages.blackRook());
			promotionImage[3].setResource(gameImages.blackQueen());
		}
		for (int i = 0; i < 4; ++i) {
			Element element = promotionImage[i].getElement();
			element.setClassName(css.highlighted());
		}
	}
	
	@Override
	public void setPromotionPromt(String str){
		promotionPromt.setText(str);	
	}
	
	@Override
	public void cleanPromotionPanel(){
		promotionPromt.setText(" ");
		gameGrid.remove(promotionGrid);
		promotionGrid.setVisible(false);
		for (int i = 0; i < 4; ++i) {
			Element element = promotionImage[i].getElement();
			element.removeClassName(css.highlighted());
		}
	}
	
	@Override
	public void saveHistory(String state) {
		History.newItem(state);
	}
	
	@Override
	public void audioPlay(){
		dropPiece.play();
	}
	
//	@Override
//	public HasClickHandlers getSaveButton(){
//		return save;
//	}
//	
//	@Override
//	public HasClickHandlers getLoadButton(){
//		return load;
//	}
//	
//	@Override
//	public HasClickHandlers getRestartButton(){
//		return restart;
//	}
	
	@Override
	public Widget getImage(int r, int c){
		return gameGrid.getWidget(r, c);
	}

	@Override
	public Grid getGameBoard(){
		return gameGrid;
	}
	
	@Override
	public void newGridBoard(){
		gameGrid = new Grid();
		gameGrid.resize(8, 8);
		gameGrid.setCellPadding(0);
		gameGrid.setCellSpacing(0);
		gameGrid.setBorderWidth(0);
	}
	
	@Override
	public void playFadeAnimation(Move move){
		Widget image = gameGrid.getWidget(move.getTo().getRow(), move.getTo().getCol());
		final Move mv = move;
		FadeAnimation fadeAni = new FadeAnimation(image){
			@Override
			protected void onStart(){
				super.onStart();
				presenter.refreshState(mv);
			}
		};
		fadeAni.run(800);
	}
	
	@Override
	public void playSlowMoveAnimation(Move move) {
		final Move mv = move;
		SlowMoveAnimation slowMoveAni = new SlowMoveAnimation(board, move) {
			@Override
			protected void onComplete() {
				super.onComplete();
				presenter.refreshState(mv);
			}
		};
		slowMoveAni.run(800);
	}
	
	public Audio creatDropAudio() {
		Audio audio = Audio.createIfSupported();
		if (audio == null) {
			return null;
		}
		audio.addSource("wenjiechn_audio/drop.mp3");
		audio.setControls(true);
		return audio;
	}
	
	@Override
	public void playMoveSound(){
		if(dropPiece != null){
			System.out.println("playmovesound()");
			dropPiece.play();
		}		
	}
	
	@Override
	public void addSocketListener(SocketListener listener) {
		socketListener = listener;
	}

	@Override
	public void MatchPlayer() {
		CGService.matchUsers(nullCallback);
	}

	@Override
	public void sendMove(String move) {
		CGService.sendMove(move, nullCallback);
	}

	@Override
	public void setPlayer(String name,String color){
//		System.out.println("setPlayer()");
		userStatus.setText("You are "+ name + ", color is " + color);
	}
	
	@Override
	public void setOpponentPlayer(String name,String color, String email){
		opponentStatus.setText("Opponent is "+ name + ", color is " + color + "email: " + email);
	}
	
	@Override
	public void setLogoutURL(String logoutLink){
		logOutLink.setHref(logoutLink);
	}
	
	@Override
	public void cleanMatchList(){
		matchList.clear();
	}
	
	@Override
	public void addItemToMatchList(String str){
		matchList.addItem(str);
		matchList.setVisibleItemCount(1);		
	}
	
	@Override
	public HasChangeHandlers getMatchList() {
		return matchList;
	}
	
	@Override
	public int getIndexofSelectionFromMatchList() {
		int idx =  matchList.getSelectedIndex();
		System.out.println(idx);
		return idx;
	}
	
	@Override
	public void fetchMatchList(AsyncCallback<String> matchListCallback) {
		CGService.fetchMatchList(matchListCallback);
	}
	
}