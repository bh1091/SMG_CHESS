package org.peigenyou.hw2_5;

import java.util.Set;

import org.peigenyou.hw2_5.StateChangerImpl;
import org.shared.chess.GameResult;
import org.shared.chess.GameResultReason;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.shared.chess.StateExplorer;

import com.google.common.collect.Sets;

public class StateExplorerImpl implements StateExplorer {

  @Override
  public Set<Move> getPossibleMoves(State state) {
    Set<Move> moves = Sets.newHashSet();
    for (int r = 0; r < 8; r ++){
      for (int c = 0; c < 8; c ++) {
        Piece piece = state.getPiece(r, c);
        if (piece != null && piece.getColor() == state.getTurn()) {
          moves.addAll(getPossibleMovesFromPosition(state, new Position(r, c)));
        }
      }
    }
    return moves;
  }

  @Override
  public Set<Move> getPossibleMovesFromPosition(State state, Position start) {
    Set<Move> moves = Sets.newHashSet();
    StateChangerImpl stateChanger=new StateChangerImpl();
    if (state.getNumberOfMovesWithoutCaptureNorPawnMoved() >= 100){
			state.setGameResult(new GameResult(null, GameResultReason.FIFTY_MOVE_RULE));// check fifty moves rule
			return moves;
		}
    for(int r=0;r<8;++r){
			for(int l=0;l<8;++l){
				Move move=new Move(start,new Position(r,l),null);
				if (stateChanger.isLegalMove(state,move)&& !stateChanger.isCheckedAfterMove(state,move))	
				{
					moves.add(move);
				}
				for(PieceKind k:PieceKind.values()){
					move=new Move(start,new Position(r,l),k);
					if (stateChanger.isLegalMove(state,move)&& !stateChanger.isCheckedAfterMove(state,move))	
					{
						moves.add(move);
					}
				}
			}
		}
    return moves;
  }

  @Override
  public Set<Position> getPossibleStartPositions(State state) {
    Set<Move> moves = getPossibleMoves(state);
    Set<Position> positions = Sets.newHashSet();
    for (Move move:moves) {
      positions.add(move.getFrom());
    }
    return positions;
  }
}
