package org.haoxiangzuo.hw3;

import java.util.ArrayList;

import org.shared.chess.Color;

import org.shared.chess.GameResult;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.haoxiangzuo.hw3.Presenter.View;
import org.haoxiangzuo.hw6.client.ChessService;
import org.haoxiangzuo.hw6.client.ChessServiceAsync;
import org.haoxiangzuo.hw6.client.MyConstant;
import org.haoxiangzuo.hw6.client.MyMessages;
import org.haoxiangzuo.hw6.client.UserInfos;

import com.google.gwt.animation.client.Animation;
import com.google.gwt.appengine.channel.client.ChannelError;
import com.google.gwt.appengine.channel.client.ChannelFactoryImpl;
import com.google.gwt.appengine.channel.client.Socket;
import com.google.gwt.appengine.channel.client.SocketListener;
import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.AudioElement;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.media.client.Audio;
import com.google.gwt.resources.client.ImageResource;
import com.google.gwt.storage.client.Storage;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.History;
import com.sun.tools.internal.xjc.generator.bean.field.Messages;

public class Graphics extends Composite implements View {
  private static GameImages gameImages = GWT.create(GameImages.class);
  private static GraphicsUiBinder uiBinder = GWT.create(GraphicsUiBinder.class);

  interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
  }

  @UiField GameCss css;
  @UiField Label gameStatus;
  @UiField Grid gameGrid;
  @UiField Grid promotion;
  @UiField Grid promotion2;
  @UiField Button show;
  @UiField Button reset;
  @UiField Button save;
  @UiField Button load;
  @UiField TextBox saveStatus;
  @UiField FlexTable flex;
  
  @UiField VerticalPanel mainPanel;
  @UiField HorizontalPanel loginPanel;
  @UiField Label welcome;
  @UiField Anchor signout;
  @UiField Button autoMatch;
  @UiField Label opponentStatus;
  @UiField HorizontalPanel emailGamePanel;
  @UiField Button findThisUser;
  @UiField TextBox emailAddress;
  @UiField HorizontalPanel MatchListPanel;
  @UiField ListBox matchesList;
  @UiField Button loadMatch;
  @UiField Button deleteMatch;
  @UiField Button showRank;
  @UiField Button playAi;
  private Image[][] board = new Image[8][8];
  public Presenter presenter = new Presenter();
  private Audio audio = createAudioClick();
  private UserInfos currentUser = null;
  private Color myColor;
  private Socket socket;
  private State thisState;
  private ChessServiceAsync chessService = GWT.create(ChessService.class);
  private MyConstant constants = GWT.create(MyConstant.class);
  private MyMessages messages = GWT.create(MyMessages.class);
  public Graphics() {
    initWidget(uiBinder.createAndBindUi(this));
    addGraphics();
    gameGrid.resize(8, 8);
    gameGrid.setCellPadding(0);
    gameGrid.setCellSpacing(0);
    gameGrid.setBorderWidth(0);
    Draw();
    State state;
//    if (!History.getToken().isEmpty())
//		state = presenter.stringToState(History.getToken().substring(4));
//	else
		state = new State();
    thisState = state;
    presenter.setView(this);
  }
  public void setUser(UserInfos user)
  {
	  currentUser = user;
	  welcome.setText("Welcome: "+currentUser.getNickname()+" "+currentUser.getEmailAddress());
	  signout.setHref(currentUser.getLogoutUrl());
	  loginPanel.add(welcome);
	  loginPanel.add(signout);
	  mainPanel.add(loginPanel);
	  opponentStatus.setText("No opponent, please find one");
	  mainPanel.add(opponentStatus);
	  emailGamePanel.add(findThisUser);
	  emailGamePanel.add(emailAddress);
	  mainPanel.add(emailGamePanel);
	  matchesList.setWidth("500px");
	  MatchListPanel.add(matchesList);
	  MatchListPanel.add(loadMatch);
	  MatchListPanel.add(deleteMatch);
	  MatchListPanel.add(showRank);
	  mainPanel.add(MatchListPanel);
	  newSocketListner(currentUser.getToken());
	  addListeners();
  }
  public void addListeners()
  {
	  autoMatch.addClickHandler(new ClickHandler(){

		@Override
		public void onClick(ClickEvent event) {
			// TODO Auto-generated method stub
			chessService.autoMatch(currentUser, new AsyncCallback<String>(){

				@Override
				public void onFailure(Throwable caught) {
					// TODO Auto-generated method stub
					Window.alert("error auto Match");
				}

				@Override
				public void onSuccess(String result) {
					// TODO Auto-generated method stub
					if (result.charAt(0)=='0')
					{
						Window.alert(result.substring(1));
					}
					else if (result.charAt(0)=='1')
					{
						Window.alert(result.substring(1));
					}
					else
					{
						String[] re = result.split("#");
						opponentStatus.setText(re[0]+" Match id:"+re[1]);
						presenter.setId(Long.valueOf(re[1]));
						matchesList.addItem(result);
						if (re[2].equals("w"))
						{
							presenter.setAi(false);
							setWhite();
						}
						else
						{
							presenter.setAi(false);
							setBlack();
						}
					}
				}});
		}});
	  findThisUser.addClickHandler(new ClickHandler(){

		@Override
		public void onClick(ClickEvent event) {
			// TODO Auto-generated method stub
			String email = emailAddress.getText();
			if (email.equals("")||email==null||email.equals(currentUser.getEmailAddress()))
				Window.alert("Please enter right emailAddress");
			else
			{
				chessService.findOpponent(email, currentUser, new AsyncCallback<String>(){

					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}

					@Override
					public void onSuccess(String result) {
						// TODO Auto-generated method stub
						String[] re = result.split("#");
						opponentStatus.setText(re[0]+" Match id:"+re[1]);
						presenter.setId(Long.valueOf(re[1]));
						matchesList.addItem(result);
						matchesList.setSelectedIndex(matchesList.getItemCount()-1);
						if (re[2].equals("w"))
						{	
							thisState = new State();
							presenter.setAi(false);
							setWhite();
						}
						else
						{
							thisState = new State();
							presenter.setAi(false);
							setBlack();
						}
					}});
			}
		}});
	  loadMatch.addClickHandler(new ClickHandler(){

		@Override
		public void onClick(ClickEvent event) {
			// TODO Auto-generated method stub
			String matchMessage = matchesList.getValue(matchesList.getSelectedIndex());
			if (matchMessage.equals("")||matchMessage==null)
				Window.alert("No such Game");
			else
			{
				String infos ="";
				String[] in = matchMessage.split("#");
				infos = currentUser.getEmailAddress()+"#"+in[1];
				chessService.loadMatch(infos, new AsyncCallback<String>(){

					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}

					@Override
					public void onSuccess(String result) {
						// TODO Auto-generated method stub
						String[] messages = result.split("#");
						State state = presenter.stringToState(messages[0]);
						presenter.setId(Long.valueOf(messages[2]));
						opponentStatus.setText("Opponent: "+messages[3]+" Match id: "+messages[2]);
						myColor = messages[1].equals("w")?Color.WHITE:Color.BLACK;
						thisState = state;
						presenter.setAi(false);
						presenter.setColor(myColor);
						presenter.setNewState(thisState);
						presenter.setHistory();
					}});
			}
		}});
	  deleteMatch.addClickHandler(new ClickHandler(){

		@Override
		public void onClick(ClickEvent event) {
			// TODO Auto-generated method stub
			String matchMessage = matchesList.getValue(matchesList.getSelectedIndex());
			if (matchMessage.equals("")||matchMessage==null)
				Window.alert("No such Game");
			else
			{
				String infos ="";
				String[] in = matchMessage.split("#");
				Long thisId = Long.valueOf(in[1]);
				if (presenter.getId()==null||presenter.getId().equals(thisId))
				{
					thisState = null;
					presenter.setNewState(thisState);
					gameStatus.setText("delete!");
					Draw();
				}
				infos = currentUser.getEmailAddress()+"#"+thisId;
				chessService.deleteMatch(infos, new AsyncCallback<Void>(){

					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}

					@Override
					public void onSuccess(Void result) {
						// TODO Auto-generated method stub
						Window.alert("Success!");
						matchesList.removeItem(matchesList.getSelectedIndex());
					}});
			}
		}});
	  showRank.addClickHandler(new ClickHandler(){

		@Override
		public void onClick(ClickEvent event) {
			// TODO Auto-generated method stub
			chessService.showRank(currentUser.getEmailAddress(), new AsyncCallback<String>(){

				@Override
				public void onFailure(Throwable caught) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void onSuccess(String result) {
					// TODO Auto-generated method stub
					Window.alert("My Rank: "+result);
				}});
		}});
	  playAi.addClickHandler(new ClickHandler(){

		@Override
		public void onClick(ClickEvent event) {
			// TODO Auto-generated method stub
			opponentStatus.setText("Play with Ai, You are white");
			thisState = new State();
			setWhite();
			presenter.setAi(true);
		}});
  }
  public void newSocketListner(String token)
	{
//		socket.close();
		socket = new ChannelFactoryImpl().createChannel(token).open(new SocketListener(){

			@Override
			public void onOpen() {
				// TODO Auto-generated method stub
				Window.alert(messages.welcomeYou(currentUser.getEmailAddress()));
				chessService.getMatches(currentUser, new AsyncCallback<ArrayList<String>>(){

					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}

					@Override
					public void onSuccess(ArrayList<String> result) {
						// TODO Auto-generated method stub
						for (int i=0; i<result.size(); i++)
						{
							matchesList.addItem(result.get(i));
						}
					}});
			}

			@Override
			public void onMessage(String message) {
				// TODO Auto-generated method stub
				if (message.charAt(0)=='1')
				{
					String[] re = message.substring(1).split("#");
					opponentStatus.setText(re[0]+" Match id: "+re[1]);
					presenter.setId(Long.valueOf(re[1]));
					matchesList.addItem(message.substring(1));
					if (re[2].equals("w"))
						setWhite();
					else
						setBlack();
				}
				else if (message.charAt(0)=='0')
				{
					String[] re = message.substring(1).split(",");
					Long id = presenter.getId();
					if (Long.valueOf(re[5]).equals(id))
					{
						otherMoves(re);
					}
				}
				else if (message.charAt(0)=='2')
				{
					Window.alert("Some one start a new game with you, please click load to switch to that game. "+message.substring(1));
					matchesList.addItem(message.substring(1));
				}
			}

			@Override
			public void onError(ChannelError error) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onClose() {
				// TODO Auto-generated method stub
				
			}});
	}
  public void setWhite()
  {
	  myColor = Color.WHITE;	    
	  presenter.setColor(myColor);
	  presenter.setNewState(thisState);
	  presenter.setHistory();
  }
  public void setBlack()
  {
	  myColor = Color.BLACK;
	  presenter.setColor(myColor);
	  presenter.setNewState(thisState);
	  presenter.setHistory();
  }
  @Override
  public void otherMoves(String[] moves)
  {
	  audio.play();
	  presenter.setLastPos(new Position(Integer.valueOf(moves[0]),Integer.valueOf(moves[1])));
	  if (Integer.valueOf(moves[4])!=5)
		  presenter.setProPos(new Position(Integer.valueOf(moves[2]),Integer.valueOf(moves[3])));
	  Element element = board[7-Integer.valueOf(moves[2])][Integer.valueOf(moves[3])].getElement();
	  CustomAnimation animation = new CustomAnimation(board[7-Integer.valueOf(moves[0])][Integer.valueOf(moves[1])],7-Integer.valueOf(moves[2]),Integer.valueOf(moves[3]),Integer.valueOf(moves[4]));
	  animation.scrollTo(element.getAbsoluteLeft(), element.getAbsoluteTop(), 1000);
  }
  
  
  private void addGraphics() {
	// TODO Auto-generated method stub
	  flex.setWidget(0, 0, new Label("SavedName"));
//	    final Storage storage = Storage.getLocalStorageIfSupported();
//	    storage.clear();
//	    save.addClickHandler(new ClickHandler() {
//			
//			@Override
//			public void onClick(ClickEvent event) {
//				// TODO Auto-generated method stub
//				if (storage!=null){
//					if (storage.getItem(saveStatus.getText())==null)
//						flex.setWidget(flex.getRowCount(), 0, new Label(saveStatus.getText()));
//					
//					storage.setItem(saveStatus.getText(), presenter.stateToString(presenter.getState()));
//				}
//			}
//		});
//	    load.addClickHandler(new ClickHandler() {
//			
//			@Override
//			public void onClick(ClickEvent event) {
//				// TODO Auto-generated method stub
//				if (storage!=null)
//				{
//					final String value = storage.getItem(saveStatus.getText());
//					State state = presenter.stringToState(value);
//					presenter.setNewState(state);
//					presenter.setStates();
//				}
//			}
//		});
	    reset.setVisible(false);
	    reset.addClickHandler(new ClickHandler(){

			@Override
			public void onClick(ClickEvent event) {
				// TODO Auto-generated method stub
				reset.setVisible(false);
				presenter.resetGame();
			}
	    	
	    });
	    
	    show.addClickHandler(new ClickHandler(){

			@Override
			public void onClick(ClickEvent event) {
				// TODO Auto-generated method stub
				presenter.getPosPos();
			}
	    	
	    });
	    promotion.resize(1, 5);
	    promotion.setCellPadding(0);
	    promotion.setCellSpacing(0);
	    promotion.setBorderWidth(0);
	    promotion.setText(0, 0, "Promotion To");
	    for (int i=1; i<5; i++)
	    {
	    	final Image image = new Image();
	    	image.setWidth("100%");
	    	switch(i-1)
	    	{
	    	case 0: image.setResource(gameImages.whiteQueen());break;
	    	case 1: image.setResource(gameImages.whiteKnight());break;
	    	case 2: image.setResource(gameImages.whiteRook());break;
	    	case 3: image.setResource(gameImages.whiteBishop());break;
	    	}
	    	final int p = i-1;
	    	image.addClickHandler(new ClickHandler(){

				@Override
				public void onClick(ClickEvent event) {
					// TODO Auto-generated method stub
					Position pos = presenter.getLastPos();
					Position pro = presenter.getProPos();
					Element element = board[7-pro.getRow()][pro.getCol()].getElement();
					CustomAnimation animation = new CustomAnimation(board[7-pos.getRow()][pos.getCol()],0,0,p);
					animation.scrollTo(element.getAbsoluteLeft(), element.getAbsoluteTop(), 1000);
				}
	    	});
	    	promotion.setWidget(0, i, image);
	    }
	    promotion.setVisible(false);
	    ////
	    
	    promotion2.resize(1, 5);
	    promotion2.setCellPadding(0);
	    promotion2.setCellSpacing(0);
	    promotion2.setBorderWidth(0);
	    promotion2.setText(0, 0, "Promotion To");
	    for (int i=1; i<5; i++)
	    {
	    	final Image image = new Image();
	    	image.setWidth("100%");
	    	switch(i-1)
	    	{
	    	case 0: image.setResource(gameImages.blackQueen());break;
	    	case 1: image.setResource(gameImages.blackKnight());break;
	    	case 2: image.setResource(gameImages.blackRook());break;
	    	case 3: image.setResource(gameImages.blackBishop());break;
	    	}
	    	final int p = i-1;
	    	image.addClickHandler(new ClickHandler(){

				@Override
				public void onClick(ClickEvent event) {
					// TODO Auto-generated method stub
					Position pos = presenter.getLastPos();
					Position pro = presenter.getProPos();
					Element element = board[7-pro.getRow()][pro.getCol()].getElement();
					CustomAnimation animation = new CustomAnimation(board[7-pos.getRow()][pos.getCol()],0,0,p);
					animation.scrollTo(element.getAbsoluteLeft(), element.getAbsoluteTop(), 1000);
				}
	    	});
	    	promotion2.setWidget(0, i, image);
	    }
	    promotion2.setVisible(false);
	    
}

@Override
  public void movePiece(int row, int col)
  {
	for (int r = 0; r < 8; r++) {
	      for (int c = 0; c < 8; c++) {
	        this.setHighlighted(r, c, false);
	      }
	  }
	 presenter.movePiece(row,col);
  }
  @Override
  public void setPiece(final int row, final int col,final  Piece piece) {
    // TODO
	  if (piece!=null)
	  {
		  final Image image = new Image();
		  board[row][col] = image;
      			switch(piece.getKind())
      			{
      				case PAWN:
      					image.setResource(piece.getColor()==Color.WHITE?gameImages.whitePawn():gameImages.blackPawn());
      					break;
      				case KING:
      					image.setResource(piece.getColor()==Color.WHITE?gameImages.whiteKing():gameImages.blackKing());
      					break;
      				case QUEEN:
      					image.setResource(piece.getColor()==Color.WHITE?gameImages.whiteQueen():gameImages.blackQueen());
      					break;
      				case KNIGHT:
      					image.setResource(piece.getColor()==Color.WHITE?gameImages.whiteKnight():gameImages.blackKnight());
      					break;
      				case ROOK:
      					image.setResource(piece.getColor()==Color.WHITE?gameImages.whiteRook():gameImages.blackRook());
      					break;
      				case BISHOP:
      					image.setResource(piece.getColor()==Color.WHITE?gameImages.whiteBishop():gameImages.blackBishop());
      					break;
      			}
		  image.addClickHandler(new ClickHandler(){

			@Override
			public void onClick(ClickEvent event) {
				// TODO Auto-generated method stub
				if (myColor.equals(presenter.getState().getTurn()))
				{
				audio.play();
				Element element = board[row][col].getElement();
				
				
				if (element.getClassName()==css.highlighted())
				{
					Position p = presenter.getLastPos();
					if (presenter.getState().getPiece(p).getKind()!=PieceKind.PAWN||(row!=7&&row!=0)){
						CustomAnimation animation = new CustomAnimation(board[7-p.getRow()][p.getCol()],row,col,-1);
						animation.scrollTo(element.getAbsoluteLeft(), element.getAbsoluteTop(), 1000);
					}
					else
						movePiece(row,col);
				}
				else
					presenter.selected(row,col,piece);
				}
				}
		  });
		  
		  board[row][col].getElement().setDraggable("DRAGGABLE_TRUE");
		  image.addDragStartHandler(new DragStartHandler() {
			
			@Override
			public void onDragStart(DragStartEvent event) {
				// TODO Auto-generated method stub
				if (myColor.equals(presenter.getState().getTurn()))
				{
				audio.play();
				Element element = board[row][col].getElement();
				if (element.getClassName()==css.highlighted())
					movePiece(row, col);
				else
					presenter.selected(row,col,piece);
				}
			}
		  });
		  image.addDragOverHandler(new DragOverHandler() {
				
				@Override
				public void onDragOver(DragOverEvent event) {
					// TODO Auto-generated method stub
					
				}
	          });
	          image.addDropHandler(new DropHandler() {
				
				@Override
				public void onDrop(DropEvent event) {
					// TODO Auto-generated method stub
					audio.play();
					Element element = board[row][col].getElement();
					if (element.getClassName()==css.highlighted())
						movePiece(row, col);
				}
	          });
		  gameGrid.setWidget(row, col, image);
	  }
	  
  }

  @Override
  public void setHighlighted(int row, int col, boolean highlighted) {
    Element element = board[row][col].getElement();
    if (highlighted) {
      element.setClassName(css.highlighted());
    } else {
      element.removeClassName(css.highlighted());
    }
  }
  @Override
  public void setAiWaiting()
  {
	  gameStatus.setText("Ai Thinking....");
  }
  @Override
  public void setWhoseTurn(Color color) {
    // TODO
	  gameStatus.setText("Status: Color: "+(color==Color.WHITE?"White":"Black")+" Result: ");
  }

  @Override
  public void setGameResult(GameResult gameResult) {
    // TODO
	  if (gameResult==null)
		  gameStatus.setText(gameStatus.getText()+"keep moving! ");
	  else
	  {
		  String result = "";
		  if (gameResult.getWinner()==null)
			  result = "No Winner! Because of "+gameResult.getGameResultReason().toString();
		  else
			  result = "Checkmate! Winner is "+(gameResult.getWinner()==Color.WHITE?"White":"Black");
		  gameStatus.setText(result);
//		  reset.setVisible(true);
	  }
  }
  @Override
  public void Draw()
  {
	  for (int row = 0; row < 8; row++) {
	        for (int col = 0; col < 8; col++) {
	          final Image image = new Image();
	          board[row][col] = image;
	          image.setWidth("100%");
	          final int i = row;
	    	  final int j = col;
	          if (row % 2 == 0 && col % 2 == 1 || row % 2 == 1 && col % 2 == 0) {
	            image.setResource(gameImages.blackTile());
	          } else {
	            image.setResource(gameImages.whiteTile()); 
	          }
	          image.addClickHandler(new ClickHandler(){
	        	  
					@Override
					public void onClick(ClickEvent event) {
						// TODO Auto-generated method stub
						audio.play();
						Element element = board[i][j].getElement();
						if (element.getClassName()==css.highlighted())
						{
							
							Position p = presenter.getLastPos();
							if (presenter.getState().getPiece(p).getKind()!=PieceKind.PAWN||(i!=7&&i!=0)){
								CustomAnimation animation = new CustomAnimation(board[7-p.getRow()][p.getCol()],i,j,-1);
								animation.scrollTo(element.getAbsoluteLeft(), element.getAbsoluteTop(), 1000);
							}
							else
								movePiece(i,j);
						}
					}
		        	  
		          });
	          image.addDragOverHandler(new DragOverHandler() {
				
				@Override
				public void onDragOver(DragOverEvent event) {
					// TODO Auto-generated method stub
					
				}
	          });
	          image.addDropHandler(new DropHandler() {
				
				@Override
				public void onDrop(DropEvent event) {
					// TODO Auto-generated method stub
					audio.play();
					Element element = board[i][j].getElement();
					if (element.getClassName()==css.highlighted())
						movePiece(i, j);
				}
	          });
	          gameGrid.setWidget(row, col, image);
	        }
	    }
  }
  @Override
  public void reDraw()
  {
//	  History.newItem("page"+presenter.stateToString(presenter.getState()));
	  Draw();
  }
  @Override
  public void callHistoryChanger(String x)
  {
	State state = this.presenter.stringToState(x);
	this.reset.setVisible(false);
	this.presenter.setNewState(state);
	this.presenter.setHistory();
  }
  @Override
  public void setPromotion(boolean t)
  {
	  promotion.setVisible(t);
  }
  @Override
  public void setPromotion2(boolean t)
  {
	  promotion2.setVisible(t);
  }
  @Override
  public void showPosPos()
  {
	  presenter.getPosPos();
  }
  @Override
  public void setPosHighlighted(int row, int col, boolean highlighted) {
    Element element = board[row][col].getElement();
    if (highlighted) {
      element.setClassName(css.showMoveHL());
    } else {
      element.removeClassName(css.showMoveHL());
    }
  }

  public Audio createAudioClick()
  {
	  Audio audio = Audio.createIfSupported();
	  if (audio==null)
		  return null;
	  
	  audio.addSource("haoxiangzuo_audio/click.mp3", AudioElement.TYPE_MP3);
	  
	  audio.setControls(true);
	  audio.load();
	  return audio;
  }
  public class CustomAnimation extends Animation
  {
	  private final Image element;
	    private int startL;
	    private int startT;
	    private int finalL;
	    private int finalT;
	    private int x;
	    private int y;
	    private int normalMoveOrPromotion;
	 
	    public CustomAnimation(Image element,int i, int j, int normalMoveOrPromotion)
	    {
	        this.element = element;
	        this.x = i;
	        this.y = j;
	        this.normalMoveOrPromotion = normalMoveOrPromotion;
	    }
	 
	    public void scrollTo(int x, int y, int milliseconds)
	    {
	        this.finalL = x;
	        this.finalT = y;
	 
	        startL = element.getElement().getAbsoluteLeft();
	        
	        startT = element.getElement().getAbsoluteTop();
	        
	        run(milliseconds);
	    }
	 
	    @Override
	    protected void onUpdate(double progress)
	    {
	        double offset_left = (progress * (this.finalL - startL));
	        double offset_top = (progress * (this.finalT - startT));
	        this.element.getElement().getStyle().setProperty("position", "absolute");
	        this.element.getElement().getStyle().setProperty("left", (startL+offset_left)+"px");
	        this.element.getElement().getStyle().setProperty("top", (startT+offset_top)+"px");
	    }
	    
	    @Override
	    protected void onComplete()
	    {
	    	if (normalMoveOrPromotion==-1||normalMoveOrPromotion==5)
	    		movePiece(x, y);
	    	else
	    	{
	    		for (int r = 0; r < 8; r++) {
	    		      for (int c = 0; c < 8; c++) {
	    		        setHighlighted(r, c, false);
	    		      }
	    		  }
	    		presenter.promotion(normalMoveOrPromotion);
	    	}
	    }
  }
@Override
public void setLogs(String log) {
	// TODO Auto-generated method stub
	gameStatus.setText(gameStatus.getText()+" "+log);
}
}
