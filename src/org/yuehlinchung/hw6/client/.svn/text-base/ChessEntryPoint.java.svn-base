package org.yuehlinchung.hw6.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.shared.chess.State;
import org.yuehlinchung.hw6.shared.Cell;
import org.yuehlinchung.hw6.shared.LoginInfo;
import org.yuehlinchung.hw6.shared.Match;

import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.user.cellview.client.CellList;
import com.google.gwt.user.cellview.client.HasKeyboardPagingPolicy.KeyboardPagingPolicy;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.cell.client.AbstractCell;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.TextArea;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.view.client.SelectionChangeEvent;
import com.google.gwt.view.client.SingleSelectionModel;
import com.google.gwt.appengine.channel.client.Channel;
import com.google.gwt.appengine.channel.client.ChannelError;
import com.google.gwt.appengine.channel.client.ChannelFactoryImpl;
import com.google.gwt.appengine.channel.client.Socket;
import com.google.gwt.appengine.channel.client.SocketListener;

public class ChessEntryPoint implements EntryPoint {
	
  private static ChessMessages messages = GWT.create(ChessMessages.class);
  private LoginInfo loginInfo = null;
  VerticalPanel loginPanel = new VerticalPanel();
  Label rankLabel = new Label();
  Label loginLabel = new Label(messages.autoSignIn());
  Anchor signInLink = new Anchor(messages.signIn());
  Anchor signOutLink = new Anchor(messages.signOut());
  Anchor englishLabel = new Anchor(messages.english());
  Anchor chineseLabel = new Anchor(messages.chinese());
  Label nameLabel = new Label();
  Label emailLabel = new Label();
  HorizontalPanel languageRow = new HorizontalPanel();
  HorizontalPanel firstRow = new HorizontalPanel();
  HorizontalPanel secondRow = new HorizontalPanel();
  HorizontalPanel thirdRow = new HorizontalPanel();
  HorizontalPanel mainRow = new HorizontalPanel();
  VerticalPanel list = new VerticalPanel();
  Button findGameButton = new Button(messages.autoMatchingGame());
  Button cancelButton = new Button(messages.cancelMatchingGame());
  Button deleteButton = new Button(messages.delete());
  Label statusText  = new Label();
  TextBox emailBox = new TextBox();
  Button sendButton = new Button(messages.startMatchGame());
  Button aiButton = new Button(messages.playWithAI());
  TextArea notification = new TextArea();
  Label listLabel = new Label(messages.friendsMatching());
  Graphics graphics = new Graphics();
  GameServiceAsync chessService;
  Socket socket;
  State emptyState;  //Empty State
  Map<Long, String> existMatchList = new HashMap<Long, String>(); // Match Game ID List
  CellList<Cell> matchList;
  List<Cell> playerList;
  Long selectId; 
    	
  public void onModuleLoad() {
	chessService = (GameServiceAsync) GWT.create(GameService.class);
	chessService.login(GWT.getHostPageBaseURL() + "yuehlinchung.html", new AsyncCallback<LoginInfo>() {
		public void onFailure(Throwable error) {
		}
			
		public void onSuccess(LoginInfo result) {
			loginInfo = result;
			if (loginInfo.isLoggedIn()) {
				RootPanel.get().add(languageRow);
				languageRow.setSpacing(5);
				englishLabel.setHref(GWT.getHostPageBaseURL()+"yuehlinchung.html");
				chineseLabel.setHref(GWT.getHostPageBaseURL()+"yuehlinchung.html?locale=cn");
				languageRow.add(englishLabel);
				languageRow.add(chineseLabel);
				// Player Information
				RootPanel.get().add(nameLabel);
			    RootPanel.get().add(emailLabel);
			    RootPanel.get().add(rankLabel);
			    RootPanel.get().add(signOutLink);
				nameLabel.setText(messages.name(loginInfo.getEmailAddress()));
				emailLabel.setText(messages.email(loginInfo.getNickname()));
				rankLabel.setText(messages.rank((int) loginInfo.getRank()));
				signOutLink.setHref(loginInfo.getLogoutUrl());
			    // Find Game
				RootPanel.get().add(firstRow);
				findGameButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						findGame();
						findGameButton.setEnabled(false);
						cancelButton.setEnabled(true);
					}
				});
				cancelButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						cancelFindGame();
						findGameButton.setEnabled(true);
						cancelButton.setEnabled(false);
					}
				});
				cancelButton.setEnabled(false);
				firstRow.add(findGameButton);
				firstRow.add(cancelButton);
				// Find Game Status
				RootPanel.get().add(secondRow);
				statusText.setText(messages.or());
				secondRow.add(statusText);
				// Email Matching Game
				RootPanel.get().add(thirdRow);
				emailBox.setText(messages.enterEmail());
				emailBox.setWidth("270px");
				emailBox.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						emailBox.setText("");
						sendButton.setEnabled(true);
					}
				});
				sendButton.setEnabled(false);
				sendButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						if (!loginInfo.getEmailAddress().equals(emailBox.getText())) {
							graphics.presenter.setAi(false);
							graphics.presenter.setId(null);
							graphics.presenter.setKey(loginInfo.getEmailAddress(), emailBox.getText());
							graphics.presenter.setSide('W');
							graphics.presenter.setState(new State());
							graphics.presenter.setGameService(chessService);
							graphics.presenter.uploadState(StateHistory.encode(new State()));
							graphics.presenter.checkFunction();
						} else {
							Window.alert(messages.error());
						}
					}
				});
				thirdRow.setHeight("50px");
				thirdRow.add(emailBox);
				thirdRow.add(sendButton);
				// AI
				aiButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						graphics.presenter.setAi(true);
						graphics.presenter.setId(null);
						graphics.presenter.setKey("Player", "Computer");
						graphics.presenter.setSide('W');
						graphics.presenter.setState(new State());
						graphics.presenter.checkFunction();
					}
				});
				RootPanel.get().add(aiButton);
				// Main Game
				RootPanel.get().add(mainRow);
				// Match List
				notification.setCharacterWidth(30);
				notification.setVisibleLines(5);
				notification.setReadOnly(true);
				list.setWidth("200px");
				updateLoginInfo();
				deleteButton.setEnabled(false);
				deleteButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						Long id = selectId;
						deleteButton.setEnabled(false);
						graphics.presenter.setState(emptyState);
						graphics.setGameResult(messages.gr());
						chessService.deleteState(id, loginInfo.getEmailAddress(), new AsyncCallback<Object>() {
							public void onFailure(Throwable error) {
								//Window.alert("Delete Game Error: " + error.getMessage());
							}
							public void onSuccess(Object result) {
								updateLoginInfo();
							}
						});
					}
				});
				// Set Graphics
				emptyState();
				graphics.presenter.setView(graphics);
				graphics.presenter.setState(emptyState);
				graphics.setGameResult(messages.gr());

				mainRow.add(list);
				mainRow.add(graphics);
				listenToChannel();
			} else {
				loadLogin();
			}
		}
	});
  }
  
  public void emptyState() {
	  emptyState = new State();
	  for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++)
				emptyState.setPiece(i, j, null);
  }
	
  private void loadLogin() {
	// Assemble login panel.
	signInLink.setHref(loginInfo.getLoginUrl());
	loginPanel.add(loginLabel);
	loginPanel.add(signInLink);
	RootPanel.get().add(loginPanel);
  }
  
  private void listenToChannel() {
	  String channelId = loginInfo.getChannelId();
	  Channel channel = new ChannelFactoryImpl().createChannel(channelId);
	  socket = channel.open(new SocketListener() {
	    @Override
	    public void onOpen() {
	      //Window.alert("Channel opened!");
	    }
	    @Override
	    public void onMessage(String message) {
	      //Window.alert("Received: " + message);
	      handleMessage(message);
	    }
	    @Override
	    public void onError(ChannelError error) {
	      //Window.alert("Channel error: " + error.getCode() + " : " + error.getDescription());
	    }
	    @Override
	    public void onClose() {
	      //Window.alert("Channel closed!");
	    }
	  });
  }
  
  private void handleMessage(String msg) {
	  String[] keyValueArr = msg.split(":");
	  String operation = keyValueArr[0];
	  String detail = keyValueArr[1];
	  String[] tmpArr;
	  String id;
	  String opponent;
	  String tmpText;
	  Long l;
	  int type = 0;
	  if (operation.equals("State")) {
		  type = 1;
	  } else if (operation.equals("Auto")) {
		  type = 2;
	  } else if (operation.equals("Refresh")) {
		  type = 3;
	  } else if (operation.equals("Update")) {
		  type = 4;
	  } else {
		  type = 0;
	  }
	  switch(type) {
	  case 1:
		  stepOccurred(detail);
		  break;
	  case 2:
		  statusText.setText(messages.or());
		  findGameButton.setEnabled(true);
		  cancelButton.setEnabled(false);
		  tmpArr = detail.split(",");
		  id = tmpArr[0];
		  opponent = tmpArr[1];
		  tmpText = notification.getText();
		  notification.setText(messages.notificationMatchText(opponent, tmpText));
		  updateLoginInfo();
		  l = Long.parseLong(id);
		  graphics.presenter.setId(l);
		  chessService.getGame(l, new AsyncCallback<Match>() {
			  public void onFailure(Throwable error) {
				  //Window.alert("Get Game Error: " + error.getMessage());
			  }
			  public void onSuccess(Match result) {
				  setGetState(result);
			  }
		  });
		  break;
	  case 3:
		  updateLoginInfo();
		  break;
	  case 4:
		  tmpArr = detail.split(",");
		  id = tmpArr[0];
		  opponent = tmpArr[1];
		  tmpText = notification.getText();
		  notification.setText(messages.notificationUpdateText(opponent, id, tmpText));
		  updateLoginInfo();
		  rankLabel.setText(messages.rank((int) loginInfo.getRank()));
		  l = Long.parseLong(id);
		  graphics.presenter.setId(l);
		  chessService.getGame(l, new AsyncCallback<Match>() {
			  public void onFailure(Throwable error) {
				  //Window.alert("Get Game Error: " + error.getMessage());
			  }
			  public void onSuccess(Match result) {
				  setGetState(result);
			  }
		  });
		  break;
	  case 0:
		  startGame(msg);
		  break;
	  }
  }
    
  private void startGame(String msg) {
	  graphics.setVisible(true);
	  statusText.setText(messages.or());
	  findGameButton.setEnabled(true);
	  cancelButton.setEnabled(false);
	  sendButton.setEnabled(false);
	  char side = msg.charAt(0);
	  String value = msg.substring(1);
	  graphics.presenter.setAi(false);
	  graphics.presenter.setKey(loginInfo.getEmailAddress(), value);
	  graphics.presenter.setSide(side);
	  graphics.presenter.setState(new State());
	  graphics.presenter.setGameService(chessService);
	  graphics.presenter.checkFunction();
  }
  
  private void stepOccurred(String msg) {
	  graphics.presenter.setState(StateHistory.decode(msg));
  }
  
  private void findGame() {
	  statusText.setText(messages.lookinForGame());
	  chessService.findGame(loginInfo, StateHistory.encode(new State()), new AsyncCallback<Object>() {
		  public void onFailure(Throwable error) {
			  //Window.alert("Finding Game Error: " + error.getMessage());
		  }
		  public void onSuccess(Object result) {
		  }
	  });
  }
  private void cancelFindGame() {
	  statusText.setText(messages.or());
	  chessService.cancelFindGame(loginInfo, new AsyncCallback<Object>() {
		  public void onFailure(Throwable error) {
			  //Window.alert("Cancel Game Error: " + error.getMessage());
		  }
		  public void onSuccess(Object result) {
		  }
	  });
  }
  
  private void setMatchList() {
	  list.clear();
	  existMatchList = loginInfo.getMatch();
	  playerList = new ArrayList<Cell>();
	  for (Long key: existMatchList.keySet()) {
		  chessService.getGame(key, new AsyncCallback<Match>() {
			  public void onFailure(Throwable error) {
				  //Window.alert("Get Game Error: " + error.getMessage());
			  }
			  public void onSuccess(Match result) {
				  Cell tmpCell = new Cell(result.getId(), result.getPlayer1(), result.getPlayer2(), result.turn, loginInfo.getEmailAddress(), result.over, result.getStartDate());
				  playerList.add(tmpCell);
				  matchList.setRowData(0, playerList);
			  }
		  });
	  }
	  ContentCell contentCell = new ContentCell();
	  matchList = new CellList<Cell>(contentCell);
	  VerticalPanel verticalPanel = new VerticalPanel();
	  matchList.setHeight("300px");
	  matchList.setWidth("210px");
	  ScrollPanel scrollPanel = new ScrollPanel(matchList);
	  scrollPanel.setAlwaysShowScrollBars(false);
	  verticalPanel.add(scrollPanel);
	  
	  matchList.setKeyboardPagingPolicy(KeyboardPagingPolicy.INCREASE_RANGE);
	  matchList.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.BOUND_TO_SELECTION);
	  final SingleSelectionModel<Cell> selectionModel = new SingleSelectionModel<Cell>();
	  matchList.setSelectionModel(selectionModel);
	  selectionModel.addSelectionChangeHandler(new SelectionChangeEvent.Handler() {
		  public void onSelectionChange(SelectionChangeEvent event) {
			  selectId = selectionModel.getSelectedObject().getId();
			  if (selectId != null) {
				  deleteButton.setEnabled(true);
				  graphics.presenter.setId(selectId);
				  chessService.getGame(selectId, new AsyncCallback<Match>() {
					  public void onFailure(Throwable error) {
						  //Window.alert("Get Game Error: " + error.getMessage());
					  }
					  public void onSuccess(Match result) {
						  setGetState(result);
					  }
				  });
			  }
		  }
	  });
	  //matchList.setRowCount(playerList.size(), true);
	  
	  list.setSpacing(10);
	  list.add(notification);
	  list.add(listLabel);
	  list.add(verticalPanel);
	  //list.add(matchList);
	  list.add(deleteButton);
  }
  
  static class ContentCell extends AbstractCell<Cell> {
	  @Override
	  public void render(Context context, Cell value, SafeHtmlBuilder sb) {
		  if (value == null) {
		        return;
		  }
		  sb.appendHtmlConstant("<table>");
		  sb.appendHtmlConstant("<td>");
		  sb.appendEscaped(messages.gameId(value.getId()));
		  sb.appendHtmlConstant("</td></tr><tr><td>");
		  DateTimeFormat format = DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM);
		  sb.appendEscaped(format.format(value.getStartDate()));
		  if (value.getOpponent() != null) {
			  sb.appendHtmlConstant("</td></tr><tr><td>");
			  sb.appendEscaped(value.getOpponent());
		  }
		  sb.appendHtmlConstant("</td></tr><tr><td>");
		  if (value.getOver() == true) {
			  if (value.getTurn() == null) {
				  sb.appendEscaped(messages.setNoWin());
			  } else {
				  sb.appendEscaped(messages.setWon(value.getTurn()));
			  }
		  } else {
			  sb.appendEscaped(messages.setTurn(value.getTurn()));
		  }
		  sb.appendHtmlConstant("</td></tr></table>");
	  }
  }
  
  private void setGetState(Match tmpGame) {
	  String opponent;
	  if (tmpGame.getPlayer1().equals(loginInfo.getEmailAddress())) {
		  opponent = tmpGame.getPlayer2();
		  graphics.presenter.setSide('W');
	  } else {
		  opponent = tmpGame.getPlayer1();
		  graphics.presenter.setSide('B');
	  }
	  graphics.presenter.setAi(false);
	  graphics.presenter.setKey(loginInfo.getEmailAddress(), opponent);
	  graphics.presenter.setState(StateHistory.decode(tmpGame.state));
	  graphics.presenter.setGameService(chessService);
	  graphics.presenter.checkFunction();
  }
  
  private void updateLoginInfo() {
	  chessService.updateInfo(loginInfo.getEmailAddress(), new AsyncCallback<LoginInfo>() {
		  public void onFailure(Throwable error) {
			  //Window.alert("Cancel Game Error: " + error.getMessage());
		  }
		  public void onSuccess(LoginInfo result) {
			  loginInfo.setMatch(result.getMatch());
			  loginInfo.setRank(result.getRank());
			  rankLabel.setText(messages.rank((int) loginInfo.getRank()));
			  setMatchList();
		  }
	  });
  }
}
