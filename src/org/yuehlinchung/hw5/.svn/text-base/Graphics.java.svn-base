package org.yuehlinchung.hw5;

import org.shared.chess.Color;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.yuehlinchung.hw5.Presenter.View;

import com.google.gwt.animation.client.Animation;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DragLeaveHandler;
import com.google.gwt.event.dom.client.DragLeaveEvent;
import com.google.gwt.resources.client.ImageResource;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.ui.FlowPanel;

import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.user.client.History;



public class Graphics extends Composite implements View {
  private static GameImages gameImages = GWT.create(GameImages.class);
  private static GraphicsUiBinder uiBinder = GWT.create(GraphicsUiBinder.class);

  interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
  }

  @UiField GameCss css;
  @UiField Label gameStatus;
  @UiField AbsolutePanel aP;
  //@UiField Grid gameGrid;
  @UiField Button startButton;
  @UiField Button backButton;
  @UiField Button forwardButton;
  @UiField Button saveButton;
  @UiField ListBox saveList;
  @UiField Label text;
  @UiField Button loadButton;
  @UiField Button clearButton;
  @UiField Label promote;
  @UiField Button queen;
  @UiField Button knight;
  @UiField Button rook;
  @UiField Button bishop;
  private Image[][] board = new Image[8][8];
  public Presenter presenter;

  @UiField Label toLabel;
  @UiField Label fromLabel;
  private final int DURATION = 500;
  private Grid gameGrid = new Grid();
  
  public Graphics() {
	this.presenter = new Presenter();
    initWidget(uiBinder.createAndBindUi(this));
    // Initial gameGrid
    gameGrid.resize(8, 8);
    gameGrid.setCellPadding(0);
    gameGrid.setCellSpacing(0);
    gameGrid.setBorderWidth(1);
    for (int row = 0; row < 8; row++) {
        for (int col = 0; col < 8; col++) {
        	int r = presenter.reverseR(row);
        	final Image image = new Image();
	        board[r][col] = image;
	        final int rowId = r;
	        final int colId = col;
    		image.setWidth("100%");
    		image.setHeight("100%");
    		final FlowPanel panel = new FlowPanel();
			if (row % 2 == 0 && col % 2 == 1 || row % 2 == 1 && col % 2 == 0) {
				panel.setStylePrimaryName("gray-square");
			} else {
				panel.setStylePrimaryName("white-square");
			}
			// Click Handle
			panel.addDomHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					presenter.clickedOn(rowId, colId);
				}
			}, ClickEvent.getType()); 
	        // Drag Over Effect
	     	panel.addDomHandler(new DragOverHandler() {
	     		public void onDragOver(DragOverEvent event) {
	     			panel.getElement().getStyle().setBackgroundColor("#ffa");
	     			}
	     	}, DragOverEvent.getType());
			// Clear Drag Over Effect
	     	panel.addDomHandler(new DragLeaveHandler() {
	     		public void onDragLeave(DragLeaveEvent event) {
	     			panel.getElement().getStyle().clearBackgroundColor();
	     		}
	     	}, DragLeaveEvent.getType());
			// Drop Handler
	     	panel.addDomHandler(new DropHandler() {
	     		public void onDrop(DropEvent event) {
	     			event.preventDefault();
	     			panel.getElement().getStyle().clearBackgroundColor();
	     			presenter.clickedOn(rowId, colId);
	     		}
	     	}, DropEvent.getType());
			panel.add(image);
	        gameGrid.setWidget(r, col, panel);
        }
    }
    startButton.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.initState();
    	}
    });
    queen.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.pawnPromoteMove(PieceKind.QUEEN);
    	}
    });
    knight.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.pawnPromoteMove(PieceKind.KNIGHT);
    	}
    });
    rook.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.pawnPromoteMove(PieceKind.ROOK);
    	}
    });
    bishop.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.pawnPromoteMove(PieceKind.BISHOP);
    	}
    });
    backButton.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		History.back();
    	}
    });
    forwardButton.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		History.forward();
    	}
    });
    saveButton.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.saveData();
    	}
    });
    loadButton.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.loadData();
    	}
    });   
    clearButton.addClickHandler(new ClickHandler() {
    	@Override
    	public void onClick(ClickEvent event) {
    		presenter.clearStorage();
    	}
    });   
    History.addValueChangeHandler(new ValueChangeHandler<String>() {
    	public void onValueChange(ValueChangeEvent<String> event) {
    		String historyToken = event.getValue();
    		if (historyToken.isEmpty()) {
    			presenter.initState();
    		} else {
    			presenter.callHistoryState(historyToken);
    		}
    		hidePromoteOption();
    	}
    });
    aP.setSize("420px", "420px");
    aP.add(gameGrid);
    presenter.setView(this);
  }
  @Override
  public void addHistoryToken(String token) {
	  History.newItem(token);
  }
  @Override
  public void setPiece(int row, int col, Piece piece) {
    // TODO
	int r = presenter.reverseR(row);	
	ImageResource img = getImgPiece(piece);
	
	if (img == null) {
		board[r][col].setUrl("");
		board[r][col].setWidth("100%");
		board[r][col].setHeight("100%");
		final Element element = board[r][col].getElement();
		element.setDraggable(Element.DRAGGABLE_FALSE);
	} else {
		board[r][col].setResource(getImgPiece(piece));
		final Element element = board[r][col].getElement();
		element.setDraggable(Element.DRAGGABLE_TRUE);
		
		// Drag Handler
		final int rowId = r, colId = col;
		board[r][col].addDragStartHandler(new DragStartHandler() {
			@Override
			public void onDragStart(DragStartEvent event) {
				element.setClassName(css.bigger());
				event.setData("text", "Drag Start");
				event.getDataTransfer().setDragImage(element, 25, 25);
				presenter.currentMove = 0;
				presenter.dragTag = 1;
				presenter.clickedOn(rowId, colId);
			}
		});
	}
  }
  // Get Piece Image
  private ImageResource getImgPiece(Piece piece) {
	if (piece == null) {
		return null;
	} else {
		if (piece.getColor().isBlack()) {
			switch (piece.getKind()) {
			case PAWN:
				return gameImages.blackPawn();
			case KING:
				return gameImages.blackKing();
			case QUEEN:
				return gameImages.blackQueen();
			case BISHOP:
				return gameImages.blackBishop();
			case ROOK:
				return gameImages.blackRook();
			case KNIGHT:
				return gameImages.blackKnight();
			}
		} else if (piece.getColor().isWhite()) {
			switch (piece.getKind()) {
			case PAWN:
				return gameImages.whitePawn();
			case KING:
				return gameImages.whiteKing();
			case QUEEN:
				return gameImages.whiteQueen();
			case BISHOP:
				return gameImages.whiteBishop();
			case ROOK:
				return gameImages.whiteRook();
			case KNIGHT:
				return gameImages.whiteKnight();
			}
		}
		return null;
	}
  }
  // Set Highlight
  @Override
  public void setHighlighted(int row, int col, boolean highlighted) {
	int r = presenter.reverseR(row);
    Element element = board[r][col].getElement();
    if (highlighted) {
      element.setClassName(css.highlighted());
    } else {
      element.removeClassName(css.highlighted());
    }
  }
  // Animation Class
  private class moveAnimation extends Animation {
	private int toRow;
	private int toCol;
	private int fromRow;
	private int fromCol;
	private Widget animate;
	private int tRR, fRR, fC;
	
	public moveAnimation(int tR, int tC, int fR, int fC, Piece piece) {
		tRR = presenter.reverseR(tR);
		fRR = presenter.reverseR(fR);
		this.fC = fC;
		toRow = gameGrid.getWidget(tRR, tC).getAbsoluteTop()-gameGrid.getAbsoluteTop();
		toCol = gameGrid.getWidget(tRR, tC).getAbsoluteLeft()-gameGrid.getAbsoluteLeft();
		fromRow = gameGrid.getWidget(fRR, fC).getAbsoluteTop()-gameGrid.getAbsoluteTop();
		fromCol = gameGrid.getWidget(fRR, fC).getAbsoluteLeft()-gameGrid.getAbsoluteLeft();
		animate = new Image(getImgPiece(piece));
		aP.add(animate);
	}
	@Override
	protected void onStart() {
		board[fRR][fC].setUrl("");
	}
	@Override
	protected void onUpdate (double progress) {
		double positionX = fromCol + (progress * (this.toCol - fromCol));
        double positionY = fromRow + (progress * (this.toRow - fromRow));
        aP.setWidgetPosition(animate, (int)positionX, (int)positionY);
	}
	@Override
	protected void onComplete() {
		aP.remove(animate);
	}
  }
  // Animation of Piece Move
  @Override
  public void moveAnimation(int tR, int tC, int fR, int fC, Piece piece) {
	  moveAnimation moveAction = new moveAnimation(tR, tC, fR, fC, piece);
	  moveAction.run(DURATION);
  }
  @Override
  public void setWhoseTurn(Color color) {
    // TODO
	if (color == Color.BLACK) {
		gameStatus.setText("Black's Turn");
	} else if (color == Color.WHITE) {
		gameStatus.setText("White's Turn");
	} else {
		gameStatus.setText("Unknown Color! Error!");
	}
  }
  @Override
  public void setGameResult(String str) {
    // TODO
	  gameStatus.setText(str);
  }
  @Override
  public void displayPromoteOption() {
	  promote.setVisible(true);
	  queen.setVisible(true);
	  knight.setVisible(true);
	  rook.setVisible(true);
	  bishop.setVisible(true);
  }
  @Override
  public void hidePromoteOption() {
	  promote.setVisible(false);
	  queen.setVisible(false);
	  knight.setVisible(false);
	  rook.setVisible(false);
	  bishop.setVisible(false);
  }
  @Override
  public void hideSaveLoad() {
	  saveButton.setVisible(false);
	  loadButton.setVisible(false);
	  text.setVisible(false);
	  saveList.setVisible(false);
	  clearButton.setVisible(false);
  }
  // Add Save File Time to List
  @Override
  public void addFileToList(String str) {
	  saveList.addItem(str);
  }
  // Clear Storage
  @Override
  public void clearSaveFileList() {
	  saveList.clear();
  }
  // Get Save File
  @Override
  public String getSaveFile() {
	  return saveList.getValue(saveList.getSelectedIndex());
  }
}
