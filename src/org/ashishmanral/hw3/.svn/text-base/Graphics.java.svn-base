package org.ashishmanral.hw3;

import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.ashishmanral.hw3.Presenter.View;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.Widget;

/**
 * Graphics Class
 * @author Ashish Manral
 *
 */
public class Graphics extends Composite implements View {
  private static GameImages gameImages = GWT.create(GameImages.class);
  private static GraphicsUiBinder uiBinder = GWT.create(GraphicsUiBinder.class);

  interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
  }

  @UiField GameCss css;
  @UiField Label gameStatus;
  @UiField Grid gameGrid;
  @UiField Grid whitePromotionGrid;
  @UiField Grid blackPromotionGrid;
  @UiField Button newGameButton;
  private Image[][] board = new Image[8][8];
  public Presenter presenter;

  /**
   * This method is used to initialize the promotion grid for white pieces.
   */
  public void initializeWhiteGrid(){
	whitePromotionGrid.setBorderWidth(1);
	whitePromotionGrid.resize(1,4);
    Image[] imageArr={new Image(gameImages.whiteRook()),
    				  new Image(gameImages.whiteKnight()),
    				  new Image(gameImages.whiteBishop()),
    				  new Image(gameImages.whiteQueen())};
    final PieceKind[] pieceKind={PieceKind.ROOK,PieceKind.KNIGHT,PieceKind.BISHOP,PieceKind.QUEEN};
    for(int i=0;i<4;i++){
      final int j=i;
      whitePromotionGrid.setWidget(0,i,imageArr[i]);
      //Adding click handler.
      imageArr[i].addClickHandler(new ClickHandler() {
        @Override
        public void onClick(ClickEvent event) {
          presenter.clickedOn(presenter.promotionPos.getRow(),presenter.promotionPos.getCol(),pieceKind[j]);
        }
      });
    }
    whitePromotionGrid.setVisible(false);
  }
  
  /**
   * This method is used to initialize the promotion grid for black pieces.
   */
  public void initializeBlackGrid(){
	blackPromotionGrid.setBorderWidth(1);
    blackPromotionGrid.resize(1,4);
    Image[] imageArr={new Image(gameImages.blackRook()),
    				  new Image(gameImages.blackKnight()),
    				  new Image(gameImages.blackBishop()),
    				  new Image(gameImages.blackQueen())};
    final PieceKind[] pieceKind={PieceKind.ROOK,PieceKind.KNIGHT,PieceKind.BISHOP,PieceKind.QUEEN};
    for(int i=0;i<4;i++){
      final int j=i;
      blackPromotionGrid.setWidget(0,i,imageArr[i]);
      //Adding click handler
      imageArr[i].addClickHandler(new ClickHandler() {
        @Override
        public void onClick(ClickEvent event) {
          presenter.clickedOn(presenter.promotionPos.getRow(),presenter.promotionPos.getCol(),pieceKind[j]);
        }
      });
    }
    blackPromotionGrid.setVisible(false);
  }
  
  /**
   * Graphics constructor that takes state as argument and passes that to Presenter.
   */
  public Graphics(){
    initWidget(uiBinder.createAndBindUi(this));
    gameGrid.resize(8, 8);
    gameGrid.setCellPadding(0);
    gameGrid.setCellSpacing(0);
    gameGrid.setBorderWidth(10);
    for (int row = 0; row < 8; row++) {
      for (int col = 0; col < 8; col++) {
        final Image image = new Image();
        board[row][col] = image;
        image.setWidth("100%");
        final int rowId=row;
        final int colId=col;
        image.addClickHandler(new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            presenter.clickedOn(rowId, colId, null);
          }
        });
        gameGrid.setWidget(row, col, image);
      }
    }
    initializeWhiteGrid();
    initializeBlackGrid();
    presenter = new Presenter(this);
    //Adding click handler for new button.
    newGameButton.addClickHandler(new ClickHandler() {
      @Override
	  public void onClick(ClickEvent event) {
		History.newItem("WR$WG$WB$WQ$WK$WB$WG$WR$WP$WP$WP$WP$WP$WP$WP$WP$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$N$BP$BP$BP$BP$BP$BP$BP$BP$BR$BG$BB$BQ$BK$BB$BG$BR$W$T$T$T$T$0$88$N");
      }
	});
  }
  
  /**
   * Restore the state using string. Used to provide History support.
   * @param historyState This is the state that needs to be restored.
   */
  public void restoreState(String historyState){
    presenter.restoreState(historyState);
  }
 
  /**
   * This method is in View interface contract. It sets the grid as the game state changes.
   */
  @Override
  public void setPiece(final int row, final int col, Piece piece) {
    if(piece==null){
      if(row % 2 == 0 && col % 2 == 1 || row % 2 == 1 && col % 2 == 0) board[row][col].setResource(gameImages.blackTile());
      else 													           board[row][col].setResource(gameImages.whiteTile());
    }
    else{
    Color pieceColor=piece.getColor();
    switch(piece.getKind()){
      case PAWN    : if(pieceColor==Color.WHITE) board[row][col].setResource(gameImages.whitePawn());   	
                     else 						 board[row][col].setResource(gameImages.blackPawn());
      				 break;
      case ROOK    : if(pieceColor==Color.WHITE) board[row][col].setResource(gameImages.whiteRook());   	
      				 else 						 board[row][col].setResource(gameImages.blackRook());
		 			 break;
      case KNIGHT  : if(pieceColor==Color.WHITE) board[row][col].setResource(gameImages.whiteKnight());   	
      				 else 						 board[row][col].setResource(gameImages.blackKnight());
		 			 break;
      case BISHOP  : if(pieceColor==Color.WHITE) board[row][col].setResource(gameImages.whiteBishop());   	
		 			 else 						 board[row][col].setResource(gameImages.blackBishop());
		 			 break;
      case QUEEN   : if(pieceColor==Color.WHITE) board[row][col].setResource(gameImages.whiteQueen());   	
		 			 else 						 board[row][col].setResource(gameImages.blackQueen());
		 			 break;
      case KING    : if(pieceColor==Color.WHITE) board[row][col].setResource(gameImages.whiteKing());   	
		 			 else 						 board[row][col].setResource(gameImages.blackKing());
		 			 break;	 			 
    }}
  }

  /**
   * This method is in View interface contract. It highlights a particular cell/block..
   */
  @Override
  public void setHighlighted(int row, int col, boolean highlighted) {
    Element element = board[row][col].getElement();
    if (highlighted) {
      element.setClassName(css.highlighted());
    } else {
      element.removeClassName(css.highlighted());
    }
  }

  /**
   * This method is used to highlight the selected piece.
   */
  @Override
  public void highlightSelectedPiece(int row,int col,boolean highlighted){
	  Element element = board[row][col].getElement();
	    if (highlighted) {
	      element.setClassName(css.highlightSelected());
	    } else {
	      element.removeClassName(css.highlightSelected());
	    }
  }
  
  /**
   * This method is in View interface contract. It sets the gameStatus to display whose turn it is.
   */
  @Override
  public void setWhoseTurn(Color color) {
    if (color == Color.BLACK) {
	  gameStatus.setText("Black's Turn");
    } else if (color == Color.WHITE) {
	  gameStatus.setText("White's Turn");
	} else {
	  gameStatus.setText("Unknown Color!");
	}
  }

  /**
   * This method is in View interface contract. It sets gameStatus to display if the game result if it has ended.
   */
  @Override
  public void setGameResult(GameResult gameResult) {
    if(gameResult==null) return;
	if (gameResult.getWinner() == null) gameStatus.setText("Game has drawn because of " + gameResult.getGameResultReason());
	else{
	  if(gameResult.getWinner()==Color.BLACK) gameStatus.setText("BLACK has won because of " + gameResult.getGameResultReason());
	  else                                    gameStatus.setText("WHITE has won because of " + gameResult.getGameResultReason());
	}
  }
  
  /**
   * This mehod is in View contract. It sets the promotion grid visibility.
   * @param color Color of the promotion grid.
   * @param value Indicates the visibility of grid.
   */
  @Override
  public void setPromoteDisplay(Color color,boolean value){
    if(color==Color.WHITE) whitePromotionGrid.setVisible(value);
    else                   blackPromotionGrid.setVisible(value);
  }
  
  /**
   * This method is in View interface contract. This method is for testing purposes.
   */
  @Override
  public void print(String str){
	gameStatus.setText(str);
  }
}

