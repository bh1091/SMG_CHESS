package org.kuangchelee.hw6;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;
//import java.util.logging.Logger;

import org.kuangchelee.hw7.MatchInfo;

import com.google.appengine.api.channel.ChannelMessage;
import com.google.appengine.api.channel.ChannelService;
import com.google.appengine.api.channel.ChannelServiceFactory;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;

@SuppressWarnings("serial")
public class ChessServiceImpl extends RemoteServiceServlet implements ChessService{
	private ArrayList<UserInfo> queue = new ArrayList<UserInfo>();
	ChannelService CS = ChannelServiceFactory.getChannelService();
	static Objectify ofy = ObjectifyService.ofy();
	//private static final Logger log = Logger.getLogger(ChessServiceImpl.class.getName());
	static{
		ObjectifyService.register(MatchInfo.class);
		ObjectifyService.register(UserInfo.class);
	}
	public UserInfo logIn(String curURL){
		UserService userService = UserServiceFactory.getUserService();
		User user = userService.getCurrentUser();
		String User;
		String ChID;
		String URL;
		if(user == null){
			return new UserInfo(null, null, userService.createLoginURL(curURL));
		}
		else{
			UserInfo ui = ofy.load().type(UserInfo.class).id(user.getEmail()).get();
			if(ui == null){
				User = user.getEmail();
				ChID = CS.createChannel(user.getEmail());
				URL = userService.createLogoutURL(curURL);
				ui = new UserInfo(User, ChID, URL);

			}
			else{
				ui.setChID(CS.createChannel(user.getEmail()));
			}
			ofy.save().entity(ui).now();
			return ui;
		}
	}
	public String join(UserInfo userinfo, String Opponent, String newState){
		if(Opponent.equals("")){
			queue.add(userinfo);
			if(queue.size() >= 2){
				Random g = new Random();
				int r = g.nextInt() % queue.size();
				UserInfo User1 = queue.remove(r);
				User1 = ofy.load().type(UserInfo.class).id(User1.getUser()).get();
				r = g.nextInt() % queue.size();
				UserInfo User2 = queue.remove(r);
				User2 = ofy.load().type(UserInfo.class).id(User2.getUser()).get();
				matchUp(User1, User2, newState);
			}
			// Matching user...
			return "0";
		}
		UserInfo opp = ofy.load().type(UserInfo.class).id(Opponent).get();
		if(opp == null){
			// Invalid UID
			return "1";
		}
		else{
			matchUp(userinfo, opp, newState);
			// Choosing opponent
			return "2_" + Opponent;
		}
	}
	public void matchUp(UserInfo User1, UserInfo User2, String state){
		MatchInfo matchinfo = new MatchInfo(User1.getUser(), 
											User2.getUser(), 
											User1.getChID(), 
											User2.getChID(),
											state);
		ofy.save().entity(matchinfo).now();
		User1.addMatch(matchinfo.getMatchID(), User2.getUser());
		User2.addMatch(matchinfo.getMatchID(), User1.getUser());
		ofy.save().entity(User1).now();
		ofy.save().entity(User2).now();

		// Sending User1 User2's CH token
		CS.sendMessage(new ChannelMessage(User1.getUser(), User2.getUser()));
		// Sending User2 User1's CH token
		CS.sendMessage(new ChannelMessage(User2.getUser(), User1.getUser()));
	}
	public MatchInfo loadState(Long MID){
		MatchInfo mi = ofy.load().type(MatchInfo.class).id(MID).get();
		return mi;
	}
	/* winner:
	 *		0 = in process
	 * 		1 = draw
	 * 		2 = white wins
	 * 		3 = black wins
	 */
	public String saveState(Long MID, String state, int winner){
		MatchInfo mi = ofy.load().type(MatchInfo.class).id(MID).get();
		mi.setState(state);
		ofy.save().entity(mi).now();
		if(winner > 0){
			calculateRating(mi.getWhiteUID(), mi.getBlackUID(), winner);
		}
		return "Successfully saved the state!";
	}
	public void sendState(String state, String opponentID){
		//String oID = opponentID.substring(0, opponentID.length() - 1);
		//log.info(":"+oID);
		CS.sendMessage(new ChannelMessage(opponentID, state));
	}
	public HashMap<Long, String> updateMatchList(UserInfo User){
		UserInfo UI = ofy.load().type(UserInfo.class).id(User.getUser()).get();
		UI.setLastMatch(new Date());
		ofy.save().entity(UI).now();
		return UI.getHashMap();
	}
	public String deleteMatch(String UID, Long MID){
		UserInfo ui = ofy.load().type(UserInfo.class).id(UID).get();
		ui.removeMatch(MID);
		ofy.save().entity(ui).now();
		
		MatchInfo mi = ofy.load().type(MatchInfo.class).id(MID).get();
		if(mi.isDelete()){
			ofy.delete().entity(mi).now();
			// Successfully deleted from the database
			return "0";
		}
		else{
			mi.setDeleteFlag(true);
			ofy.save().entity(mi).now();
			// Pending from other opponent
			return "1";
		}
	}
	public void calculateRating(String WhiteUID, String BlackUID, int winner){
		UserInfo White = ofy.load().type(UserInfo.class).id(WhiteUID).get();
		UserInfo Black = ofy.load().type(UserInfo.class).id(BlackUID).get();
		Date today = new Date();
		double whiteS, blackS;
		if(winner == 1){
			whiteS = blackS = 1 / 2;
		}
		else if(winner == 2){
			whiteS = 1;
			blackS = 0;
		}
		else{
			whiteS = 0;
			blackS = 1;
		}	
		// Calculate White
		White = ratingEquation(White, Black, today, whiteS);
		// Calculate Black
		Black = ratingEquation(Black, White, today, blackS);
		ofy.save().entity(White).now();
		ofy.save().entity(Black).now();
	}
	public UserInfo ratingEquation(UserInfo self, UserInfo opp, Date today, double S){
		int dayDeviation = (int)(today.getTime() - self.getLastMatch().getTime()) / (1000 * 60 * 60 * 24);
		double newRD = Math.min(Math.sqrt(Math.pow(self.getRD(), 2) + 1225 * dayDeviation), 350);
		double q = 0.0057;
		double g = 1 / Math.sqrt(1 + 3 * Math.pow(q, 2) * Math.pow(newRD, 2) / Math.pow(Math.PI, 2));
		double E_exp = g * (self.getRating() - opp.getRating()) / -400;
		double E = 1 / (1 + Math.pow(10, E_exp));
		double dsquare = 1 / Math.pow(q, 2) * Math.pow(g, 2) * E * (1 - E);
		double newRating = self.getRating() +  (q / (1 / Math.pow(newRD, 2)) + (1 / dsquare)) * g * (S - E); 
		newRD = Math.sqrt(1 / ((1 / Math.pow(newRD, 2)) + (1 / dsquare)));
		self.setRating(newRating);
		self.setRD(newRD);
		
		return self;
	}
	public MatchInfo getState(Long MID){
		MatchInfo mi = ofy.load().type(MatchInfo.class).id(MID).get();
		return mi;
	}
}