package org.zhaohuizhang.hw3;

import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;
import org.zhaohuizhang.hw3.Presenter.View;
import org.zhaohuizhang.hw5.GameAnimation;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.dom.client.HasDragLeaveHandlers;
import com.google.gwt.event.dom.client.HasDragOverHandlers;
import com.google.gwt.event.dom.client.HasDragStartHandlers;
import com.google.gwt.event.dom.client.HasDropHandlers;
import com.google.gwt.event.dom.client.HasKeyPressHandlers;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.Widget;

public class Graphics extends Composite implements View {
	private static GameImages gameImages = GWT.create(GameImages.class);
	private static GraphicsUiBinder uiBinder = GWT
			.create(GraphicsUiBinder.class);

	interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
	}

	@UiField
	GameCss css;
	@UiField
	Label gameStatus;
	@UiField
	Grid gameGrid;
	@UiField
	Grid whitePromotionGrid;
	@UiField
	Grid blackPromotionGrid;
	@UiField
	Button save;
	@UiField
	Button load;
	@UiField
	Button startGame;
	@UiField
	Label playerInfo;
	@UiField
	Button makeMatch;
	@UiField
	Label opponent;
	@UiField
	Label FindOpponent;
	@UiField
	TextBox desiredOpponent;
	@UiField
	Button searchOpponent;
	@UiField
	Label playerColor;

	// private SocketListener socketListener = null;
	private Image[][] board = new Image[8][8];
	private Image[][] promotionWhite = new Image[1][4];
	private Image[][] promotionBlack = new Image[1][4];
	private Presenter presenter;

	private static final int DURATION = 800;

	public Graphics() {
		initWidget(uiBinder.createAndBindUi(this));

		save.setText("Save");
		load.setText("Load");
		startGame.setText("Start");
		makeMatch.setText("Find your opponent!");
		//makeMatch.setVisible(false);
		FindOpponent.setText("Enter the player email:");
		searchOpponent.setText("Start a match/game");
		
		gameGrid.resize(8, 8);
		gameGrid.setCellPadding(0);
		gameGrid.setCellSpacing(0);
		gameGrid.setBorderWidth(0);
		gameGrid.setWidth("50px");
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final Image image = new Image();
				board[row][col] = image;
				image.setWidth("100%");
				image.setResource(gameImages.empty());
				gameGrid.setWidget(row, col, image);

			}
		}

		whitePromotionGrid.resize(1, 4);
		whitePromotionGrid.setCellPadding(0);
		whitePromotionGrid.setCellSpacing(0);
		whitePromotionGrid.setBorderWidth(0);
		whitePromotionGrid.setWidth("50px");
		for (int row = 0; row < 4; row++) {
			final Image image = new Image();
			promotionWhite[0][row] = image;
			image.setWidth("100%");
			image.setResource(gameImages.empty());
			whitePromotionGrid.setWidget(0, row, image);
		}

		blackPromotionGrid.resize(1, 4);
		blackPromotionGrid.setCellPadding(0);
		blackPromotionGrid.setCellSpacing(0);
		blackPromotionGrid.setBorderWidth(0);
		blackPromotionGrid.setWidth("50px");
		for (int row = 0; row < 4; row++) {
			final Image image = new Image();
			promotionBlack[0][row] = image;
			image.setWidth("100%");
			image.setResource(gameImages.empty());
			blackPromotionGrid.setWidget(0, row, image);
		}

		whitePromotionGrid.setVisible(false);
		blackPromotionGrid.setVisible(false);

	}

	public Presenter getPresenter() {
		return this.presenter;
	}

	public void setPresenter(Presenter presenter) {
		this.presenter = presenter;
	}

	@Override
	public void setPiece(int row, int col, Piece piece) {
		int r = State.ROWS - row - 1;
		int c = col;
		if (piece == null) {
			board[r][c].setResource(gameImages.empty());
		} else {
			PieceKind pieceKind = piece.getKind();
			switch (pieceKind) {
			case PAWN:
				if (piece.getColor() == Color.WHITE) {
					board[r][c].setResource(gameImages.whitePawn());
				} else {
					board[r][c].setResource(gameImages.blackPawn());
				}
				break;
			case ROOK:
				if (piece.getColor() == Color.WHITE) {
					board[r][c].setResource(gameImages.whiteRook());
				} else {
					board[r][c].setResource(gameImages.blackRook());
				}
				break;
			case BISHOP:
				if (piece.getColor() == Color.WHITE) {
					board[r][c].setResource(gameImages.whiteBishop());
				} else {
					board[r][c].setResource(gameImages.blackBishop());
				}
				break;
			case KNIGHT:
				if (piece.getColor() == Color.WHITE) {
					board[r][c].setResource(gameImages.whiteKnight());
				} else {
					board[r][c].setResource(gameImages.blackKnight());
				}
				break;
			case QUEEN:
				if (piece.getColor() == Color.WHITE) {
					board[r][c].setResource(gameImages.whiteQueen());
				} else {
					board[r][c].setResource(gameImages.blackQueen());
				}
				break;
			case KING:
				if (piece.getColor() == Color.WHITE) {
					board[r][c].setResource(gameImages.whiteKing());
				} else {
					board[r][c].setResource(gameImages.blackKing());
				}
				break;
			default:
				break;
			}
		}
	}

	@Override
	public void setPromotionPiece() {
		promotionWhite[0][0].setResource(gameImages.whiteRook());
		promotionWhite[0][1].setResource(gameImages.whiteBishop());
		promotionWhite[0][2].setResource(gameImages.whiteKnight());
		promotionWhite[0][3].setResource(gameImages.whiteQueen());

		promotionBlack[0][0].setResource(gameImages.blackQueen());
		promotionBlack[0][1].setResource(gameImages.blackKnight());
		promotionBlack[0][2].setResource(gameImages.blackBishop());
		promotionBlack[0][3].setResource(gameImages.blackRook());

	}

	@Override
	public void setHighlighted(int row, int col, boolean highlighted) {
		Element element = board[State.ROWS - row - 1][col].getElement();
		if (highlighted) {
			element.setClassName(css.highlighted());
		} else {
			element.removeClassName(css.highlighted());
		}
	}

	@Override
	public void setDragOverHighlighted(int row, int col, boolean dragged) {
		Element element = board[State.ROWS - row - 1][col].getElement();
		if (dragged) {
			element.getStyle().clearBackgroundColor();
		} else {
			element.getStyle().clearBackgroundColor();
		}

	}

	@Override
	public void setWhoseTurn(Color color) {
		String colorStr = color == Color.WHITE ? "White" : "Black";
		gameStatus.setText("Turn:" + colorStr);
	}

	@Override
	public void setGameResult(GameResult gameResult) {
		if (gameResult != null) {
			Color color = gameResult.getWinner();
			if (color == null) {
				gameStatus.setText("Draw:due to "
						+ gameResult.getGameResultReason());
			} else {
				String colorStr = color == Color.WHITE ? "White" : "Black";
				gameStatus.setText("Winner:" + colorStr);
			}
		}
	}

	@Override
	public HasClickHandlers getClickCellOnChessBoard(int row, int col) {
		return board[State.ROWS - row - 1][col];
	}

	@Override
	public HasDragStartHandlers getDraggedCellOnChessBoard(int row, int col) {
		return board[State.ROWS - row - 1][col];
	}

	@Override
	public HasDropHandlers getDroppedCellOnChessBoard(int row, int col) {
		return board[State.ROWS - row - 1][col];
	}

	@Override
	public HasDragOverHandlers getDraggedOverCellOnChessBoard(int row, int col) {
		return board[State.ROWS - row - 1][col];
	}

	@Override
	public HasDragLeaveHandlers getDraggedLeaveCellOnChessBoard(int row, int col) {
		return board[State.ROWS - row - 1][col];
	}

	@Override
	public HasClickHandlers getClickPromotionKindWhite(int row) {
		return promotionWhite[0][row];
	}

	@Override
	public HasClickHandlers getClickPromotionKindBlack(int row) {
		return promotionBlack[0][row];
	}

	@Override
	public void setPromotionGrid(boolean flag, Color color) {
		if (color == Color.WHITE) {
			whitePromotionGrid.setVisible(flag);
		} else {
			blackPromotionGrid.setVisible(flag);
		}
	}

	@Override
	public HasClickHandlers getClickStartGame() {
		return startGame;
	}

	@Override
	public void addHistoryItem(String str) {
		History.newItem(str);
	}

	@Override
	public String getHistoryItem() {
		return History.getToken();
	}

	@Override
	public void addHistoryHandler(ValueChangeHandler<String> handler) {
		History.addValueChangeHandler(handler);
	}

	@Override
	public void animation(Position p) {
		Image i = board[State.ROWS - 1 - p.getRow()][p.getCol()];
		GameAnimation ma = new GameAnimation(i);
		ma.run(DURATION);
	}

	@Override
	public HasClickHandlers getClickSaveGame() {
		return save;
	}

	@Override
	public HasClickHandlers getClickLoadGame() {
		return load;
	}

	@Override
	public HasClickHandlers getClickMakeMatch() {
		return makeMatch;
	}

	// @Override
	// public void addSocketListener(SocketListener listener) {
	// socketListener = listener;
	// }

	@Override
	public void setOpponent(String opponentName) {
		opponent.setText("Opponent: " + opponentName);
	}

	@Override
	public void setPlayerColor(Color color) {
		if (color == Color.WHITE) {
			playerColor.setText("Your color: White");
		} else {
			playerColor.setText("Your color: Black");
		}
	}
	
	@Override
	public void setPlayerInfo(String email, String nickName){
		playerInfo.setText("Welcome, " + nickName +" Your email is " + email);
	}
	
	@Override
	public  HasClickHandlers getClickFindOpponent(){
		return searchOpponent;
	}

	@Override
	public String getOpponentEmail() {
		return desiredOpponent.getText();
	}
	
	@Override
	public HasKeyPressHandlers getEnterFindOpponent(){
		return desiredOpponent;
	}
	
	@Override
	public void setDesiredOpponent(String opponentName){
		desiredOpponent.setText(opponentName);
	}

}