package org.zhaohuizhang.hw6.server;

import static com.googlecode.objectify.ObjectifyService.ofy;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

import org.shared.chess.Color;
import org.zhaohuizhang.hw6.client.ChessGameService;
import org.zhaohuizhang.hw6.client.LoginInfo;
import org.zhaohuizhang.hw7.Match;
import org.zhaohuizhang.hw7.Player;

import com.google.appengine.api.channel.ChannelMessage;
import com.google.appengine.api.channel.ChannelService;
import com.google.appengine.api.channel.ChannelServiceFactory;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.ObjectifyService;

public class ChessGameServiceImpl extends RemoteServiceServlet implements
		ChessGameService {
	private static final long serialVersionUID = 8213747913035536605L;

	private Queue<User> unmatchedPlayers = new LinkedList<User>();
	private Map<User, User> matchedPlayers = new HashMap<User, User>();
	private final UserService userService;
	ChannelService channelService = ChannelServiceFactory.getChannelService();
	
	static {
        ObjectifyService.register(Player.class);
        ObjectifyService.register(Match.class);
    }
	
	public ChessGameServiceImpl(){
		this(UserServiceFactory.getUserService());
	}
	
	public ChessGameServiceImpl(UserService userService){
		this.userService = userService;
	}
	
	@Override
	public LoginInfo login(String requestUri) {
		User user = userService.getCurrentUser();
		if(user == null){
			LoginInfo info = new LoginInfo();
			info.setLoginUrl(userService.createLoginURL(requestUri));
			return info;
		}
		
		if(ofy().load().type(Player.class).id(user.getEmail()).get() == null){
			Player player = new Player(user.getEmail(), user.getNickname());
			ofy().save().entity(player).now();
		}else{
			Player player = ofy().load().type(Player.class).id(user.getEmail()).get();
			player.setName(user.getNickname());
			ofy().save().entity(player).now();
		}
		
		LoginInfo info = new LoginInfo(user.getEmail(), user.getNickname());
		info.setLogoutUrl(userService.createLogoutURL(requestUri));
		return info;
	}

	@Override
	public void sendMove(String moveStr) {
		if (userService.isUserLoggedIn()) {
			User currUser = userService.getCurrentUser();
			if (matchedPlayers.containsKey(currUser)) {
				User otherUser = matchedPlayers.get(currUser);
				ChannelMessage message = new ChannelMessage(
						otherUser.getUserId(), "M" + moveStr);
				channelService.sendMessage(message);
			}
		}
	}

	@Override
	public void sendState(String stateStr) {
		if (userService.isUserLoggedIn()) {
			User currUser = userService.getCurrentUser();
			if (matchedPlayers.containsKey(currUser)) {
				User otherUser = matchedPlayers.get(currUser);
				ChannelMessage message = new ChannelMessage(
						otherUser.getUserId(), "S" + stateStr);
				channelService.sendMessage(message);
			}
		}
	}

	@Override
	public void matchPlayers() {
		if (userService.isUserLoggedIn()) {
			User currUser = userService.getCurrentUser();
			if (!unmatchedPlayers.isEmpty()) {
				User otherUser = unmatchedPlayers.poll();
				matchedPlayers.put(currUser, otherUser);
				matchedPlayers.put(otherUser, currUser);
				
				ChannelMessage messageForBlack = new ChannelMessage(
						otherUser.getUserId(), "B" + currUser.getNickname());
				ChannelMessage messageForWhite = new ChannelMessage(
						currUser.getUserId(), "W" + otherUser.getNickname());
				
				channelService.sendMessage(messageForBlack);
				channelService.sendMessage(messageForWhite);
			} else {
				unmatchedPlayers.add(currUser);
			}
			
		}
	}
	
	public synchronized String connectToServer(){
		if (userService.isUserLoggedIn()) {
			User currUser = userService.getCurrentUser();
			String token = channelService.createChannel(currUser.getUserId());
			return token;
		}
		return null;
	}
	
	@Override
	public void updateMatch(String email, String state, Color color, boolean isOver){
		if (userService.isUserLoggedIn()) {
			User currUser = userService.getCurrentUser();
			if(ofy().load().type(Player.class).id(email).get() == null){
				Key<Player> opponentKey = Key.create(Player.class, email);
				Key<Player> playerKey = Key.create(Player.class, currUser.getEmail());
				Match match = new Match(opponentKey, playerKey, state, isOver);
				Key<Match> matchKey = ofy().save().entity(match).now();
				Player player = ofy().load().key(playerKey).get();
				Player opponent = ofy().load().key(opponentKey).get();
                player.addMatch(matchKey);
                opponent.addMatch(matchKey);
                ofy().save().entity(player).now();
                ofy().save().entity(opponent).now();
				ofy().save().entity(match).now();
			}
		}
	}
	
	
	
	
	
}
