package org.karthikmahadevan.hw3;

import java.util.ArrayList;
import java.util.List;

import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Piece;
import org.shared.chess.State;

import org.karthikmahadevan.hw3.Presenter.View;

import com.google.gwt.dom.client.AudioElement;
import com.google.gwt.dom.client.MediaElement;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DragLeaveEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragLeaveHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.core.client.GWT;
import com.google.gwt.media.client.Audio;
import com.google.gwt.resources.client.ImageResource;
import com.google.gwt.storage.client.Storage;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.ui.SimplePanel;

import org.karthikmahadevan.hw6.client.LoginInfo;

public class Graphics extends Composite implements View {
	private static GameImages gameImages = GWT.create(GameImages.class);
	private static GraphicsUiBinder uiBinder = GWT
			.create(GraphicsUiBinder.class);

	interface GraphicsUiBinder extends UiBinder<Widget, Graphics> {
	}

	@UiField
	GameCss css;
	@UiField
	Button saveGame;
	@UiField
	Button loadGame;
	@UiField
	Button restartGame;
	@UiField
	Label gameStatus;
	@UiField
	Label turn;
	@UiField
	Grid gameGrid;
	@UiField
	Grid promotionOptions;
	@UiField
	Anchor signIn;
	@UiField
	Anchor signOut;
	@UiField
	Label signInPrompt;
	@UiField
	VerticalPanel pnlLogin;
	@UiField
	VerticalPanel pnlChessGame;
	@UiField
	VerticalPanel pnlBoard;
	@UiField
	Label yourColor;
	@UiField
	Button autoMatch;
	@UiField
	ListBox matches;
	@UiField
	Button deleteGame;
	@UiField
	Label opponent;
	@UiField
	Label loggedInAs;
	@UiField
	TextBox txtPlayWith;
	@UiField
	Button btnPlayWith;
	@UiField
	Button loadMatch;
	private Storage storage;
	private Image[][] board = new Image[8][8];
	private Presenter presenter;
	private List<HandlerRegistration> handlers = new ArrayList<HandlerRegistration>();
	private Audio audio = createAudio();
	private LoginInfo loginInfo = null;

	public Graphics(LoginInfo loginInfo) {
		this.loginInfo = loginInfo;
		initWidget(uiBinder.createAndBindUi(this));
	}

	public void loadChessGame() {
		pnlChessGame.removeStyleName(css.hide());
		pnlLogin.setStyleName(css.hide());
		loadGame.setStyleName(css.hide());
		saveGame.setStyleName(css.hide());
		restartGame.setStyleName(css.hide());
		signOut.setHref(loginInfo.getLogoutUrl());
		gameGrid.resize(8, 8);
		gameGrid.setCellPadding(0);
		gameGrid.setCellSpacing(0);
		gameGrid.setBorderWidth(0);
		for (int row = 0; row < 8; row++) {
			for (int col = 0; col < 8; col++) {
				final int rowID = row;
				final int colID = col;
				final Image image = new Image();
				board[row][col] = image;
				image.setResource(gameImages.blank());
				image.setWidth("50px");
				image.setHeight("50px");
				image.getElement().setDraggable(Element.DRAGGABLE_TRUE);
				image.addDragStartHandler(new DragStartHandler() {

					@Override
					public void onDragStart(DragStartEvent event) {
						presenter.clickedOn(rowID, colID);
						event.getDataTransfer().setDragImage(
								image.getElement(), 10, 10);
					}
				});
				image.addClickHandler(new ClickHandler() {
					@Override
					public void onClick(ClickEvent event) {
						presenter.clickedOn(rowID, colID);
					}
				});

				SimplePanel panel = new SimplePanel();
				panel.setWidth("50px");
				panel.setHeight("50px");
				if (row % 2 == 0 && col % 2 == 1 || row % 2 == 1
						&& col % 2 == 0) {
					panel.setStyleName(css.blackBackground());
				} else {
					panel.setStyleName(css.whiteBackground());
				}
				panel.setWidget(image);

				gameGrid.setWidget(row, col, panel);
			}
		}
		presenter = new Presenter(this);
		createPromotionOptionsGrids();
		createAudio();
		History.addValueChangeHandler(new ValueChangeHandler<String>() {

			@Override
			public void onValueChange(ValueChangeEvent<String> event) {
				String token = event.getValue();
				presenter.restoreState(token);
			}
		});

		storage = Storage.getLocalStorageIfSupported();
		if (storage == null) {
			saveGame.setStyleName(css.hide());
			loadGame.setStyleName(css.hide());
		} else {
			saveGame.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					storage.setItem("saved_state", History.getToken());
				}
			});

			loadGame.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					String savedState = storage.getItem("saved_state");
					History.newItem(savedState);
				}
			});

			restartGame.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					State newState = new State();
					History.newItem(newState.toString());
					gameStatus.setText("In Progress");
				}
			});

			autoMatch.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					presenter.autoMatchWithOpponent();
				}
			});

			matches.addChangeHandler(new ChangeHandler() {

				@Override
				public void onChange(ChangeEvent event) {
					int index = matches.getSelectedIndex();
					presenter.onMatchChange(matches.getItemText(index));
				}
			});

			deleteGame.addClickHandler(new ClickHandler() {

				@Override
				public void onClick(ClickEvent event) {
					int index = matches.getSelectedIndex();
					presenter.deleteMatch(matches.getItemText(index));

				}
			});

			btnPlayWith.addClickHandler(new ClickHandler() {

				@Override
				public void onClick(ClickEvent event) {
					if (txtPlayWith.getText().trim().equals("")) {
						return;
					}
					presenter.playWith(txtPlayWith.getText());
				}
			});

			loadMatch.addClickHandler(new ClickHandler() {

				@Override
				public void onClick(ClickEvent event) {
					presenter.loadSelectedMatch();
				}
			});
		}
	}

	@Override
	public void loadMatches(List<Long> matches) {
		this.matches.clear();
		for (int i = 0; i < matches.size(); ++i) {
			this.matches.insertItem(String.valueOf(matches.get(i)), i);
		}
		if (matches.size() == 1) {
			this.matches.setItemSelected(0, true);
		}
	}

	public void loadLogin() {
		pnlLogin.removeStyleName(css.hide());
		pnlChessGame.setStyleName(css.hide());
		signIn.setHref(loginInfo.getLoginUrl());
	}

	public void createPromotionOptionsGrids() {
		promotionOptions.resize(1, 4);
		ImageResource[] resources = { gameImages.YellowQueen(),
				gameImages.YellowRook(), gameImages.YellowBishop(),
				gameImages.YellowKnight() };
		Image image;
		for (int i = 0; i < 4; ++i) {
			final int colID = i;
			image = new Image();
			image.setResource(resources[i]);
			image.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
					presenter.promoteToPiece(colID);
				}
			});
			promotionOptions.setWidget(0, i, image);
		}
	}

	@Override
	public void setPiece(int row, int col, Piece piece) {
		ImageResource imgRes = getImageResource(row, col, piece);
		board[row][col].setResource(imgRes);
		board[row][col].setWidth("50px");
		board[row][col].setHeight("50px");
	}

	@Override
	public ImageResource getImageResource(int row, int col, Piece piece) {
		ImageResource imgRes;
		if (piece != null) {
			Color pieceColor = piece.getColor();
			switch (piece.getKind()) {
			case PAWN:
				imgRes = (pieceColor == Color.WHITE ? gameImages.whitePawn()
						: gameImages.BlackPawn());
				break;
			case BISHOP:
				imgRes = (pieceColor == Color.WHITE ? gameImages.whiteBishop()
						: gameImages.BlackBishop());
				break;
			case QUEEN:
				imgRes = (pieceColor == Color.WHITE ? gameImages.whiteQueen()
						: gameImages.BlackQueen());
				break;
			case ROOK:
				imgRes = (pieceColor == Color.WHITE ? gameImages.whiteRook()
						: gameImages.BlackRook());
				break;
			case KNIGHT:
				imgRes = (pieceColor == Color.WHITE ? gameImages.whiteKnight()
						: gameImages.BlackKnight());
				break;
			case KING:
				imgRes = (pieceColor == Color.WHITE ? gameImages.whiteKing()
						: gameImages.BlackKing());
				break;
			default:
				imgRes = gameImages.blank();
			}
		} else {
			imgRes = gameImages.blank();
		}
		return imgRes;
	}

	@Override
	public void setHighlighted(int row, int col, boolean highlighted) {
		final int rowID = row;
		final int colID = col;
		Element element = board[row][col].getElement();
		HandlerRegistration handler;
		if (highlighted) {
			element.setClassName(css.highlighted());
			handler = board[row][col].addDropHandler(new DropHandler() {

				@Override
				public void onDrop(DropEvent event) {
					event.preventDefault();
					audio = createAudio();
					if (audio != null) {
						audio.load();
						audio.play();
					}
					presenter.clickedOn(rowID, colID);
				}
			});
			handlers.add(handler);
			handler = board[row][col].addDragOverHandler(new DragOverHandler() {

				@Override
				public void onDragOver(DragOverEvent event) {
					event.preventDefault();
					board[rowID][colID].setStyleName(css.draggedOver());
				}
			});
			handlers.add(handler);
			handler = board[row][col]
					.addDragLeaveHandler(new DragLeaveHandler() {

						@Override
						public void onDragLeave(DragLeaveEvent event) {
							event.preventDefault();
							board[rowID][colID].setStyleName(css.highlighted());
						}
					});
			handlers.add(handler);
		} else {
			element.removeClassName(css.highlighted());
			element.removeClassName(css.draggedOver());
		}
	}

	@Override
	public void clearDragHandlers() {
		for (int i = 0; i < handlers.size(); ++i) {
			handlers.get(i).removeHandler();
		}
		handlers = new ArrayList<HandlerRegistration>();
	}

	@Override
	public void setWhoseTurn(Color color) {
		if (color == Color.WHITE) {
			turn.setText("White");
		} else if (color == Color.BLACK) {
			turn.setText("Black");
		} else {
			turn.setText("");
		}
	}

	@Override
	public void clearGameStatus() {
		gameStatus.setText("");
	}

	@Override
	public void setGameResult(GameResult gameResult) {
		if (gameResult == null) {
			gameStatus.setText("In Progress");
			return;
		}
		StringBuilder text = new StringBuilder("Game Result: ");
		switch (gameResult.getGameResultReason()) {
		case CHECKMATE:
			text.append(gameResult.getWinner() + " wins! Reason: Check Mate.");
			break;
		case STALEMATE:
			text.append("Draw! Reason: Stale Mate.");
			break;
		case FIFTY_MOVE_RULE:
			text.append("Draw! Reason: Fifty Move Rule.");
			break;
		case THREEFOLD_REPETITION_RULE:
			text.append("Draw! Reason: Threefold Repetition Rule.");
			break;
		}
		gameStatus.setText(text.toString());
	}

	@Override
	public void makePromotionOptionsAvailable(boolean available) {
		if (available) {
			promotionOptions.setVisible(true);
		} else {
			promotionOptions.setVisible(false);
		}
	}

	@Override
	public Presenter getPresenter() {
		return this.presenter;
	}

	@Override
	public void addToHistory(String state) {
		History.newItem(state);
	}

	public Audio createAudio() {
		Audio audio = Audio.createIfSupported();
		if (audio == null) {
			return null;
		}
		if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_MP3))) {
			audio.addSource("karthikmahadevan_audio/move.mp3",
					AudioElement.TYPE_MP3);
		} else if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_WAV))) {
			audio.addSource("karthikmahadevan_audio/move.wav",
					AudioElement.TYPE_WAV);
		} else if (MediaElement.CAN_PLAY_PROBABLY.equals(audio
				.canPlayType(AudioElement.TYPE_OGG))) {
			audio.addSource("karthikmahadevan_audio/move.ogg",
					AudioElement.TYPE_OGG);
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_MP3))) {
			audio.addSource("karthikmahadevan_audio/move.mp3",
					AudioElement.TYPE_MP3);
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_WAV))) {
			audio.addSource("karthikmahadevan_audio/move.wav",
					AudioElement.TYPE_WAV);
		} else if (MediaElement.CAN_PLAY_MAYBE.equals(audio
				.canPlayType(AudioElement.TYPE_OGG))) {
			audio.addSource("karthikmahadevan_audio/move.ogg",
					AudioElement.TYPE_OGG);
		}
		audio.load();
		return audio;
	}

	public Image[][] getBoard() {
		return board;
	}

	@Override
	public void setYourColor(Color color) {
		if (matches.getItemCount() == 0 || matches.getSelectedIndex() == -1)
			yourColor.setText("");
		else {
			if (color == Color.WHITE) {
				yourColor.setText("White");
			} else if (color == Color.BLACK) {
				yourColor.setText("Black");
			} else {
				yourColor.setText("");
			}
		}
	}

	@Override
	public String getSelectedMatch() {
		int selectedIndex = matches.getSelectedIndex();
		if (selectedIndex == -1) {
			return "";
		} else {
			return matches.getItemText(selectedIndex);
		}
	}

	@Override
	public void setOpponent(String opponent) {
		if (matches.getItemCount() == 0 || matches.getSelectedIndex() == -1) {
			this.opponent.setText("");
		} else {
			this.opponent.setText(opponent);
		}
	}

	@Override
	public void setLoggedInAs(String user) {
		loggedInAs.setText(user);
		loggedInAs.setStyleName(css.bigtext());
	}

}
