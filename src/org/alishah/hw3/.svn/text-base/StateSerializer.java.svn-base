package org.alishah.hw3;

import static org.shared.chess.Color.WHITE;
import static org.shared.chess.Color.BLACK;

import static org.shared.chess.PieceKind.BISHOP;
import static org.shared.chess.PieceKind.KING;
import static org.shared.chess.PieceKind.KNIGHT;
import static org.shared.chess.PieceKind.PAWN;
import static org.shared.chess.PieceKind.QUEEN;
import static org.shared.chess.PieceKind.ROOK;

import static org.shared.chess.State.COLS;
import static org.shared.chess.State.ROWS;

import static org.shared.chess.GameResultReason.CHECKMATE;
import static org.shared.chess.GameResultReason.STALEMATE;
import static org.shared.chess.GameResultReason.FIFTY_MOVE_RULE;
import static org.shared.chess.GameResultReason.THREEFOLD_REPETITION_RULE;


import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Move;
import org.shared.chess.Piece;
import org.shared.chess.PieceKind;
import org.shared.chess.Position;
import org.shared.chess.State;

public class StateSerializer {
	
	private static final String TURN_LABEL = "turn";
	private static final String BOARD_LABEL = "board";
	private static final String CASTLE_LABEL = "castling";
	private static final String ENPASSANT_LABEL = "enpassant";
	private static final String NO_PAWN_MOVE_CAPTURE_LABEL = "nopawnmoveorcapture";
	private static final String GAME_RESULT_LABEL = "gameresult";
	
	private static final String WHITE_STRING = "w";
	private static final String BLACK_STRING = "b";
	
	private static final String PAWN_STRING = "p";
	private static final String ROOK_STRING = "r";
	private static final String KNIGHT_STRING = "h";
	private static final String BISHOP_STRING = "b";
	private static final String QUEEN_STRING = "q";
	private static final String KING_STRING = "k";
	
	private static final String CHECKMATE_STRING = "cm";
	private static final String FIFTY_MOVE_RULE_STRING = "fm";
	private static final String STALEMATE_STRING = "sm";
	private static final String THREEFOLD_REPETITION_RULE_STRING = "tf";
	
	public static String serialize(State state) {
		String serializedState = TURN_LABEL + "=";
		
		serializedState += state.getTurn() == WHITE ? WHITE_STRING : BLACK_STRING;
		
		serializedState += "&" + BOARD_LABEL + "=";
		for (int i = 0; i < ROWS; i++) {
			serializedState += i == 0 ? "[" : "#[";
			for (int j = 0; j < COLS; j++) {
				serializedState += j == 0 ? "" : ",";
				serializedState += serializePiece(state.getPiece(i, j));
			}
			serializedState += "]";
		}
		
		serializedState += "&" + CASTLE_LABEL + "=" + serializeBoolean(state.isCanCastleKingSide(WHITE)) 
																	  					  + serializeBoolean(state.isCanCastleKingSide(BLACK))
																	  					  + serializeBoolean(state.isCanCastleQueenSide(WHITE))
																	  					  + serializeBoolean(state.isCanCastleQueenSide(BLACK));
		
		serializedState += "&" + ENPASSANT_LABEL + "=" + serializePosition(state.getEnpassantPosition());
		
		serializedState += "&" + NO_PAWN_MOVE_CAPTURE_LABEL + "=" + Integer.toString(state.getNumberOfMovesWithoutCaptureNorPawnMoved());
		
		serializedState += "&" + GAME_RESULT_LABEL + "=" + serializeGameResult(state.getGameResult());
		return serializedState;
	}
	
	public static State deserialize(String stateString) {
		Piece[][] board = null;
		boolean whiteKingSide = false;
		boolean blackKingSide = false;
		boolean whiteQueenSide = false;
		boolean blackQueenSide = false;
		Position enpassant = null;
		Color turn = null;
		int numberOfMovesWithoutCaptureNorPawnMoved = 0;
		GameResult result = null;
		
		String[] stateStringParts = stateString.split("&");
		for (String part : stateStringParts) {
			String[] keyValueMap = part.split("=");
			if (keyValueMap[0].equals(TURN_LABEL)) {
				turn =  deserializeColor(keyValueMap[1]);
			} else if (keyValueMap[0].equals(BOARD_LABEL)) {
				board = new Piece[8][8];
				String[] stringBoardRows = keyValueMap[1].split("#");
				for (int i = 0; i < stringBoardRows.length; i++) {
					String a = stringBoardRows[i].substring(1, stringBoardRows[i].length() - 1);
					String[] stringBoardRowCols = a.split(",");
					for (int j = 0; j < stringBoardRowCols.length; j++) {
						board[i][j] = deserializePiece(stringBoardRowCols[j]);
					}
				}
			} else if (keyValueMap[0].equals(CASTLE_LABEL)) {
				whiteKingSide = deserializeBoolean(keyValueMap[1].substring(0, 1));
				blackKingSide = deserializeBoolean(keyValueMap[1].substring(1, 2));
				whiteQueenSide = deserializeBoolean(keyValueMap[1].substring(2, 3));
				blackQueenSide = deserializeBoolean(keyValueMap[1].substring(3, 4));
			} else if (keyValueMap[0].equals(ENPASSANT_LABEL)) {
				enpassant = deserializePosition(keyValueMap[1]);
			} else if (keyValueMap[0].equals(NO_PAWN_MOVE_CAPTURE_LABEL)) {
				numberOfMovesWithoutCaptureNorPawnMoved = Integer.parseInt(keyValueMap[1]);
			} else if (keyValueMap[0].equals(GAME_RESULT_LABEL)) {
				result = deserializeGameResult(keyValueMap[1]);
			}
		}
		return new State(turn,
				 						 board,
				 						 new boolean[] { whiteKingSide, blackKingSide },
				 						 new boolean[] { whiteQueenSide, blackQueenSide },
				 						 enpassant,
				 						 numberOfMovesWithoutCaptureNorPawnMoved,
				 						 result);
	}
	
	public static String serializeMove(Move move) {
		String serializedMove = "";
		
		serializedMove += move.getFrom().getRow();
		serializedMove += move.getFrom().getCol();
		serializedMove += move.getTo().getRow();
		serializedMove += move.getTo().getCol();
		
		if (move.getPromoteToPiece() != null) {
			switch(move.getPromoteToPiece()) {
				case PAWN:
					serializedMove += PAWN_STRING;
				case ROOK:
					serializedMove += ROOK_STRING;
				case KNIGHT:
					serializedMove += KNIGHT_STRING;
				case BISHOP:
					serializedMove += BISHOP_STRING;
				case QUEEN:
					serializedMove += QUEEN_STRING;
				case KING:
					serializedMove += KING_STRING;
			}
		} else {
			serializedMove += "x";
		}
		return serializedMove;
	}
	
	public static Move deserializeMove(String move) {
		PieceKind promotionPiece;
		String pieceString = move.substring(4, 5);
		if (pieceString.equals("x")) {
			promotionPiece = null;
		} else {
			pieceString = "w" + pieceString;
			Piece piece = deserializePiece(pieceString);
			promotionPiece = piece.getKind();
		}
		
		Move deserializedMove = new Move(
																		 new Position(Integer.parseInt(move.substring(0, 1)),
																				 					Integer.parseInt(move.substring(1, 2))),
																		 new Position(Integer.parseInt(move.substring(2, 3)),
																				 					Integer.parseInt(move.substring(3, 4))),
																		 promotionPiece				
																		 );
		return deserializedMove;
	}
	
	private static String serializeGameResult(GameResult result) {
		if (result == null) {
			return "---";
		} else {
			switch (result.getGameResultReason()) {
				case CHECKMATE:
					return CHECKMATE_STRING + serializeColor(result.getWinner());
				case FIFTY_MOVE_RULE:
					return FIFTY_MOVE_RULE_STRING + "-";
				case STALEMATE:
					return STALEMATE_STRING + "-";
				case THREEFOLD_REPETITION_RULE:
					return THREEFOLD_REPETITION_RULE_STRING + "-";
			}
		}
		return "";
	}
	
	private static GameResult deserializeGameResult(String stringGameResult) {
		String stringGameResultReason = stringGameResult.substring(0, 2);
		String winner = stringGameResult.substring(2, 3);
		if (stringGameResultReason.equals(CHECKMATE_STRING)) {
			return new GameResult(deserializeColor(winner), CHECKMATE);
		} else if (stringGameResultReason.equals(FIFTY_MOVE_RULE_STRING)) {
			return new GameResult(null, FIFTY_MOVE_RULE);
		} else if (stringGameResultReason.equals(STALEMATE_STRING)) {
			return new GameResult(null, STALEMATE);
		} else if (stringGameResultReason.equals(THREEFOLD_REPETITION_RULE_STRING)) {
			return new GameResult(null, THREEFOLD_REPETITION_RULE);
		} else {
			return null;
		}
	}

	private static String serializePosition(Position pos) {
		if (pos == null) {
			return "--";
		} else {
			return Integer.toString(pos.getRow()) + Integer.toString(pos.getCol());
		}
	}
	
	private static Position deserializePosition(String stringPosition) {
		if (stringPosition.equals("--")) {
			return null;
		} else {
			return new Position(Integer.parseInt(stringPosition.substring(0, 1)),
													Integer.parseInt(stringPosition.substring(1, 2)));
		}
	}
	
	private static String serializeBoolean(boolean b) {
		return b ? "t" : "f";
	}
	
	private static boolean deserializeBoolean(String stringBoolean)  {
		return stringBoolean.equals("t") ? true
																		 : false;
	}
	
	private static String serializePiece(Piece piece) {
		if (piece == null) {
			return "--";
		}
		
		String serializedPiece = "";
		serializedPiece += serializeColor(piece.getColor()); 
		
		switch(piece.getKind()) {
			case PAWN:
				return serializedPiece + PAWN_STRING;
			case ROOK:
				return serializedPiece + ROOK_STRING;
			case KNIGHT:
				return serializedPiece + KNIGHT_STRING;
			case BISHOP:
				return serializedPiece + BISHOP_STRING;
			case QUEEN:
				return serializedPiece + QUEEN_STRING;
			case KING:
				return serializedPiece + KING_STRING;
		}
		// should never get here.
		return serializedPiece;
	}
	
	private static Piece deserializePiece(String stringPiece) {
		if (stringPiece.equals("--")) {
			return null;
		}
		Color pieceColor = deserializeColor(stringPiece.substring(0,1));
		String stringPieceType = stringPiece.substring(1, 2);
		if (stringPieceType.equals(PAWN_STRING)) {
			return new Piece(pieceColor, PAWN);
		} else if (stringPieceType.equals(ROOK_STRING)) {
			return new Piece(pieceColor, ROOK);
		} else if (stringPieceType.equals(KNIGHT_STRING)) {
			return new Piece(pieceColor, KNIGHT);
		} else if (stringPieceType.equals(BISHOP_STRING)) {
			return new Piece(pieceColor, BISHOP);
		} else if (stringPieceType.equals(QUEEN_STRING)) {
			return new Piece(pieceColor, QUEEN);
		} else if (stringPieceType.equals(KING_STRING)) {
			return new Piece(pieceColor, KING);
		} else {
			return null;
		}
	}
	
	private static String serializeColor(Color color) {
		return color == WHITE ? WHITE_STRING : BLACK_STRING; 
	}
	
	private static Color deserializeColor(String stringColor) throws IllegalArgumentException{
		if (stringColor.equals(WHITE_STRING)) {
			return WHITE;
		} else if (stringColor.equals(BLACK_STRING)) {
			return BLACK;
		} else {
			throw new IllegalArgumentException();
		}
	}
}
