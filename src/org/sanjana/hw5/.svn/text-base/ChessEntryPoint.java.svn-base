package org.sanjana.hw5;

import org.sanjana.hw6.LoginService;
import org.sanjana.hw6.LoginServiceAsync;
import org.sanjana.hw6.ChessService;
import org.sanjana.hw6.ChessServiceAsync;
import org.sanjana.hw6.LoginDetails;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;

public class ChessEntryPoint implements EntryPoint 
{
	private LoginDetails userInfo = null;
	private VerticalPanel loginPanel = new VerticalPanel();
	private Label loginLabel = new Label("Please sign in with your Google Account to Play Chess!");
	private Anchor signIn = new Anchor("Sign In");
	private Anchor signOut = new Anchor("Sign Out");
	private Label welcome;
	private Label welcomeID;
	private Label AutoMatch=new Label("1. Auto-Match with a Random Player");
	private HorizontalPanel automatch = new HorizontalPanel();
	private Button findGameButton = new Button("Auto Matching Game");
	private Button cancelGameButton = new Button("Cancel Matching Game");
	private HorizontalPanel playermatch = new HorizontalPanel();
	private Label statusText  = new Label("2. Play with a player of your choice");
	private TextBox emailBox = new TextBox();
	private Button gameButton = new Button("Start a game");

	@Override
	public void onModuleLoad() 
	{
		LoginServiceAsync loginService = GWT.create(LoginService.class);
		loginService.login(GWT.getHostPageBaseURL()+"sanjana.html",new AsyncCallback<LoginDetails>(){

//		LoginServiceAsync loginService = GWT.create(LoginService.class);
//		loginService.login(GWT.getHostPageBaseURL()+"sanjana.html",new AsyncCallback<LoginDetails>(){

			public void onFailure(Throwable error) {
				Window.alert("Sign in Error!");
			}

			public void onSuccess(LoginDetails result) 
			{
				Window.alert("Successful Sign in.");
				userInfo = result;
				if (userInfo.isLoggedIn()) 
				{
					signOut.setHref(userInfo.getLogoutUrl());
					welcome = new Label("Hello, " + userInfo.getNickname());
					welcomeID=new Label("Email ID "+userInfo.getEmailAddress());

					RootPanel.get().add(new Label("Player 1 Details"));
					RootPanel.get().add(welcome);
					RootPanel.get().add(welcomeID);
					RootPanel.get().add(signOut);

					RootPanel.get().add(AutoMatch);
					RootPanel.get().add(automatch);
					findGameButton.addClickHandler(new ClickHandler(){
						public void onClick(ClickEvent event){
							findGameButton.setEnabled(false);
							cancelGameButton.setEnabled(true);
						}
					});

					cancelGameButton.addClickHandler(new ClickHandler(){
						public void onClick(ClickEvent event){
							findGameButton.setEnabled(true);
							cancelGameButton.setEnabled(false);
						}
					});

					cancelGameButton.setEnabled(false);
					automatch.add(findGameButton);
					automatch.add(cancelGameButton);

					RootPanel.get().add(statusText);
					RootPanel.get().add(playermatch);
					emailBox.setText("Enter other player's email ID to start/resume a game");
					emailBox.setWidth("260px");
					gameButton.addClickHandler(new ClickHandler(){
						public void onClick(ClickEvent event){

						}
					});

					playermatch.add(emailBox);
					playermatch.add(gameButton);

					loadchess(result); 
				}
				else 
					userLogin();
			}
		});	
	}

	public void userLogin() 
	{
		signIn.setHref(userInfo.getLoginUrl());
		loginPanel.add(loginLabel);
		loginPanel.add(signIn);
		RootPanel.get().add(loginPanel);
	}

	public void loadchess(LoginDetails result)
	{
		final Presenter presenter = new Presenter();
		final Graphics graphics = new Graphics(presenter);
		presenter.setView(graphics);
		graphics.initStateWithChannel(result);

		//		signOut.setHref(userInfo.getLogoutUrl());
		//		welcome = new Label("Hello, " + userInfo.getNickname());
		//		welcomeID=new Label("Email ID "+userInfo.getEmailAddress());
		//
		//		RootPanel.get().add(new Label("Player 1 Details"));
		//		RootPanel.get().add(welcome);
		//		RootPanel.get().add(welcomeID);
		//		RootPanel.get().add(signOut);
		RootPanel.get().add(graphics);

		History.addValueChangeHandler(new ValueChangeHandler<String>()
				{
			@Override
			public void onValueChange(ValueChangeEvent<String> event) {
				String historyToken = event.getValue();
				if (!History.getToken().isEmpty())
					graphics.manageHistory(historyToken);						
			}});
	}
}
